// MIT License
//
// Copyright (c) 2021 Ferhat Geçdoğan All Rights Reserved.
// Distributed under the terms of the MIT License.
//
//
//
// GtkKa - Kalem wrapper around GTK3
// ---
// It's at early-stage, unstable, unusable,
// Many functions are not implemented yet.
//
// Some wrapper principles:
//  Using GtkWidget* with GTK_WINDOW macro instead of directly GtkWindow*
//


!required_flag("library")


#include {
    "gtk_import"
}

@gtk namespace {
    @application_new(const gchar* application_id, GApplicationFlags flags) GtkApplication*? {
        @return gtk_application_new(application_id, flags)
    }

    @application_add_window(GtkApplication* application, GtkWindow* window) void {
        @gtk_application_add_window(application, window)
    }

    @application_remove_window(GtkApplication* application, GtkWindow* window) void {
        @gtk_application_remove_window(application, window)
    }

    @application_get_windows(GtkApplication* application) GList*? {
        @return gtk_application_get_windows(application)
    }

    @application_get_window_by_id(GtkApplication* application, guint id) GtkWindow*? {
        @return gtk_application_get_window_by_id(application, id)
    }

    @application_get_active_window(GtkApplication* application) GtkWindow*? {
        @return gtk_application_get_active_window(application)
    }

    // GtkWindow
    @window_new(GtkWindowType type) GtkWidget*? {
        @return gtk_window_new(type)
    }

    @window_set_title(GtkWidget* window, const gchar* title) void {
        #gtk_window_set_title(GTK_WINDOW(window), title);
    }

    // Deprecated:  @gtk_window_set_wmclass(
    //      GtkWindow* window,
    //      const gchar* wmclass_name,
    //      const gchar* wmclass_class)

    @window_set_resizable(GtkWidget* window, gboolean resizable) void {
        @gtk_window_set_resizable(GTK_WINDOW(window), resizable)
    }

    @window_get_resizable(GtkWidget* window) gboolean? {
        @return gtk_window_get_resizable(GTK_WINDOW(window))
    }

    @window_add_accel_group(GtkWidget* window, GtkAccelGroup* accel_group) void {
        @gtk_window_add_accel_group(GTK_WINDOW(window), accel_group)
    }

    @window_remove_accel_group(GtkWidget* window, GtkAccelGroup* accel_group) void {
        @gtk_window_remove_accel_group(GTK_WINDOW(window), accel_group)
    }

    @window_activate_focus(GtkWidget* window) gboolean? {
        @return gtk_window_activate_focus(GTK_WINDOW(window))
    }

    @window_activate_default(GtkWidget* window) gboolean? {
        @return gtk_window_activate_default(GTK_WINDOW(window))
    }

    @window_set_modal(GtkWidget* window, gboolean modal) void {
        @gtk_window_set_modal(GTK_WINDOW(window), modal)
    }

    @window_set_default_size(GtkWidget* window, gint width, gint height) void {
        @gtk_window_set_default_size(GTK_WINDOW(window),width, height)
    }

    // Deprecated:  @gtk_window_set_default_geometry(
    //      GtkWindow* window,
    //      gint width,
    //      gint height)

    @window_set_geometry_hints(GtkWidget* window, GtkWidget* geometry_widget, GdkGeometry* geometry, GdkWindowHints geom_mask) void {
        @gtk_window_set_geometry_hints(GTK_WINDOW(window), geometry_widget,geometry,geom_mask)
    }

    @window_set_gravity(GtkWidget* window, GdkGravity gravity) void {
        @gtk_window_set_gravity(GTK_WINDOW(window), gravity)
    }

    @window_get_gravity(GtkWidget* window) GdkGravity {
        @return gtk_window_get_gravity(GTK_WINDOW(window))
    }

    @window_set_position(GtkWidget* window, GtkWindowPosition position) void {
        @gtk_window_set_position(GTK_WINDOW(window), position)
    }

    @window_set_transient_for(GtkWidget* window, GtkWidget* parent) void {
        @gtk_window_set_transient_for(GTK_WINDOW(window), GTK_WINDOW(parent))
    }

    @window_set_attached_to(GtkWidget* window, GtkWidget* attach_widget) void {
        @gtk_window_set_attached_to(GTK_WINDOW(window), attach_widget)
    }

    @window_set_destroy_with_parent(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_destroy_with_parent(GTK_WINDOW(window), setting)
    }

    @window_set_hide_titlebar_when_maximized(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_hide_titlebar_when_maximized(GTK_WINDOW(window), setting)
    }

    @window_set_screen(GtkWidget* window, GdkScreen* screen) void {
        @gtk_window_set_screen(GTK_WINDOW(window), screen)
    }

    @window_get_screen(GtkWidget* window) GdkScreen*? {
        @return gtk_window_get_screen(GTK_WINDOW(window))
    }

    @window_is_active(GtkWidget* window) gboolean? {
        @return gtk_window_is_active(GTK_WINDOW(window))
    }

    @window_is_maximized(GtkWidget* window) gboolean? {
        @return gtk_window_is_maximized(GTK_WINDOW(window))
    }

    @window_has_toplevel_focus(GtkWidget* window) gboolean? {
        @return gtk_window_has_toplevel_focus(GTK_WINDOW(window))
    }

    @window_list_toplevels GList*? {
        @return gtk_window_list_toplevels()
    }

    @window_add_mnemonic(GtkWidget* window, guint keyval, GtkWidget* target) void {
        @gtk_window_add_mnemonic(GTK_WINDOW(window),keyval, target)
    }

    @window_remove_mnemonic(GtkWidget* window, guint keyval, GtkWidget* target) void {
        @gtk_window_remove_mnemonic(GTK_WINDOW(window),keyval, target)
    }

    @window_mnemonic_activate(GtkWidget* window, guint keyval, GdkModifierType modifier) gboolean? {
        @return gtk_window_mnemonic_activate(GTK_WINDOW(window),keyval, modifier)
    }

    @window_activate_key(GtkWidget* window, GdkEventKey* event) gboolean? {
        @return gtk_window_activate_key(GTK_WINDOW(window), event)
    }

    @window_propagate_key_event(GtkWidget* window, GdkEventKey* event) gboolean? {
        @return gtk_window_propagate_key_event(GTK_WINDOW(window), event)
    }

    @window_get_focus(GtkWidget* window) GtkWidget*? {
        @return gtk_window_get_focus(GTK_WINDOW(window))
    }

    @window_set_focus(GtkWidget* window, GtkWidget* focus) void {
        @gtk_window_set_focus(GTK_WINDOW(window), focus)
    }

    @window_get_default_widget(GtkWidget* window) GtkWidget*? {
        @return gtk_window_get_default_widget(GTK_WINDOW(window))
    }

    @window_set_default(GtkWidget* window, GtkWidget* default_widget) void {
        @gtk_window_set_default(GTK_WINDOW(window), default_widget)
    }

    @window_present(GtkWidget* window) void {
        @gtk_window_present(GTK_WINDOW(window))
    }

    @window_present_with_time(GtkWidget* window, guint32 timestamp) void {
        @gtk_window_present_with_time(GTK_WINDOW(window), timestamp)
    }

    @window_close(GtkWidget* window) void {
        @gtk_window_close(GTK_WINDOW(window))
    }

    @window_iconify(GtkWidget* window) void {
        @gtk_window_iconify(GTK_WINDOW(window))
    }

    @window_deiconify(GtkWidget* window) void {
        @gtk_window_deiconify(GTK_WINDOW(window))
    }

    @window_stick(GtkWidget* window) void {
        @gtk_window_stick(GTK_WINDOW(window))
    }

    @window_unstick(GtkWidget* window) void {
        @gtk_window_unstick(GTK_WINDOW(window))
    }

    @window_maximize(GtkWidget* window) void {
        @gtk_window_maximize(GTK_WINDOW(window))
    }

    @window_unmaximize(GtkWidget* window) void {
        @gtk_window_unmaximize(GTK_WINDOW(window))
    }

    @window_fullscreen(GtkWidget* window) void {
        @gtk_window_fullscreen(GTK_WINDOW(window))
    }

    @window_fullscreen_on_monitor(GtkWidget* window, GdkScreen* screen, gint monitor) void {
        @gtk_window_fullscreen_on_monitor(GTK_WINDOW(window),screen, monitor)
    }

    @window_unfullscreen(GtkWidget* window) void {
        @gtk_window_unfullscreen(GTK_WINDOW(window))
    }

    @window_set_keep_above(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_keep_above(GTK_WINDOW(window), setting)
    }

    @window_set_keep_below(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_keep_below(GTK_WINDOW(window), setting)
    }

    @window_begin_resize_drag(GtkWidget* window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp) void {
        @gtk_window_begin_resize_drag(GTK_WINDOW(window),edge,button,root_x,root_y, timestamp)
    }

    @window_begin_move_drag(GtkWidget* window, gint button, gint root_x, gint root_y, guint32 timestamp) void {
        @gtk_window_begin_move_drag(GTK_WINDOW(window),button,root_x,root_y, timestamp)
    }

    @window_set_decorated(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_decorated(GTK_WINDOW(window), setting)
    }

    @window_set_deletable(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_deletable(GTK_WINDOW(window), setting)
    }

    @window_set_mnemonic_modifier(GtkWidget* window, GdkModifierType modifier) void {
        @gtk_window_set_mnemonic_modifier(GTK_WINDOW(window), modifier)
    }

    @window_set_type_hint(GtkWidget* window, GdkWindowTypeHint hint) void {
        @gtk_window_set_type_hint(GTK_WINDOW(window), hint)
    }

    @window_set_skip_taskbar_hint(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_skip_taskbar_hint(GTK_WINDOW(window), setting)
    }

    @window_set_skip_pager_hint(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_skip_pager_hint(GTK_WINDOW(window), setting)
    }


    // ...

    // GtkApplicationWindow
    @application_window_new(GtkApplication* application) GtkWidget*? {
        @return gtk_application_window_new(application)
    }

    // GtkWidget
    @widget_show_all(GtkWidget* widget) void {
        @gtk_widget_show_all(widget)
    }
}