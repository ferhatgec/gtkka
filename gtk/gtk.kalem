// MIT License
//
// Copyright (c) 2021 Ferhat Geçdoğan All Rights Reserved.
// Distributed under the terms of the MIT License.
//
//
//
// GtkKa - Kalem wrapper around GTK3
// ---
// It's at early-stage, unstable, unusable,
// Many functions are not implemented yet.
//
// Some wrapper principles:
//   Using GtkWidget* with GTK_WINDOW macro instead of directly GtkWindow*
//
//
// Extracted C++ library can be used as single-header C++* wrapper around GTK3.
//   * : Kalem generates readable C++ code.


!required_flag("library")

#include {
    "gtk_import"
}

#defn {
    LEVEL_BAR_OFFSET_LOW "low"
    LEVEL_BAR_OFFSET_HIGH "high"
    LEVEL_BAR_OFFSET_FULL "full"
}

@gtk namespace {
    // GtkApplication
    @application_new(const gchar* application_id, GApplicationFlags flags) GtkApplication*? {
        @return gtk_application_new(application_id, flags)
    }

    @application_add_window(GtkApplication* application, GtkWindow* window) void {
        @gtk_application_add_window(application, window)
    }

    @application_remove_window(GtkApplication* application, GtkWindow* window) void {
        @gtk_application_remove_window(application, window)
    }

    @application_get_windows(GtkApplication* application) GList*? {
        @return gtk_application_get_windows(application)
    }

    @application_get_window_by_id(GtkApplication* application, guint id) GtkWindow*? {
        @return gtk_application_get_window_by_id(application, id)
    }

    @application_get_active_window(GtkApplication* application) GtkWindow*? {
        @return gtk_application_get_active_window(application)
    }

    @application_inhibit(GtkApplication* application, GtkWidget* window, GtkApplicationInhibitFlags flags, const gchar* reason) guint? {
        @return gtk_application_inhibit(application,GTK_WINDOW(window),flags, reason)
    }

    @application_uninhibit(GtkApplication* application, guint cookie) void {
        @gtk_application_uninhibit(application, cookie)
    }

    @application_is_inhibited(GtkApplication* application, GtkApplicationInhibitFlags flags) gboolean? {
        @return gtk_application_is_inhibited(application, flags)
    }

    @application_prefers_app_menu(GtkApplication* application) gboolean? {
        @return gtk_application_prefers_app_menu(application)
    }

    @application_get_app_menu(GtkApplication* application) GMenuModel*? {
        @return gtk_application_get_app_menu(application)
    }

    @application_set_app_menu(GtkApplication* application, GMenuModel* app_menu) void {
        @gtk_application_set_app_menu(application, app_menu)
    }

    @application_get_menubar(GtkApplication* application) GMenuModel*? {
        @return gtk_application_get_menubar(application)
    }

    @application_set_menubar(GtkApplication* application, GMenuModel* menubar) void {
        @gtk_application_set_menubar(application, menubar)
    }

    @application_get_menu_by_id(GtkApplication* application, const gchar* id) GMenu*? {
        @return gtk_application_get_menu_by_id(application, id)
    }

    // Deprecated:  @gtk_application_add_accelerator(GtkApplication *application,
    //      const gchar *accelerator,
    //      const gchar *action_name,
    //      GVariant *parameter);

    // Deprecated:  @gtk_application_remove_accelerator(GtkApplication *application,
    //      const gchar *action_name,
    //      GVariant *parameter);

    @application_list_action_descriptions(GtkApplication* application) gchar**? {
        @return gtk_application_list_action_descriptions(application)
    }

    @application_get_accels_for_action(GtkApplication* application, const gchar* detailed_action_name) gchar**? {
        @return gtk_application_get_accels_for_action(application, detailed_action_name)
    }

    @application_set_accels_for_action(GtkApplication* application, const gchar* detailed_action_name, const gchar* const* accels) void {
        @gtk_application_set_accels_for_action(application,detailed_action_name, accels)
    }

    @application_get_actions_for_accel(GtkApplication* application, const gchar* accel) gchar**? {
        @return gtk_application_get_actions_for_accel(application, accel)
    }

    // ---
    // End of GtkApplication

    // GtkApplicationWindow
    @application_window_new(GtkApplication* application) GtkWidget*? {
        @return gtk_application_window_new(application)
    }

    @application_window_set_show_menubar(GtkApplicationWindow* window, gboolean show_menubar) void {
        @gtk_application_window_set_show_menubar(window, show_menubar)
    }

    @application_window_get_show_menubar(GtkApplicationWindow* window) gboolean? {
        @return gtk_application_window_get_show_menubar(window)
    }

    @application_window_get_id(GtkApplicationWindow* window) guint? {
        @return gtk_application_window_get_id(window)
    }

    @application_window_set_help_overlay(GtkApplicationWindow* window, GtkShortcutsWindow* help_overlay) void {
        @gtk_application_window_set_help_overlay(window, help_overlay)
    }

    @application_window_get_help_overlay(GtkApplicationWindow* window) GtkShortcutsWindow*? {
        @return gtk_application_window_get_help_overlay(window)
    }

    // ---
    // End of GtkApplicationWindow

    // GtkActionable

    #const gchar* actionable_get_action_name(GtkActionable* actionable) {
        @return gtk_actionable_get_action_name(actionable)
    }

    @actionable_set_action_name(GtkActionable* actionable, const gchar* action_name) void {
        @return gtk_actionable_set_action_name(actionable, action_name)
    }

    @actionable_get_action_target_value(GtkActionable* actionable) GVariant*? {
        @return gtk_actionable_get_action_target_value(actionable)
    }

    @actionable_set_action_target_value(GtkActionable* actionable, GVariant* target_value) void {
        @gtk_actionable_set_action_target_value(actionable, target_value)
    }

    @actionable_set_action_target(GtkActionable* actionable, const gchar* format_str) void {
        @gtk_actionable_set_action_target(actionable, format_str)
    }

    @actionable_set_detailed_action_name(GtkActionable* actionable, const gchar* detailed_action_name) void {
        @gtk_actionable_set_detailed_action_name(actionable, detailed_action_name)
    }

    // ---
    // End of GtkActionable

    // GtkWindow
    @window_new(GtkWindowType type) GtkWidget*? {
        @return gtk_window_new(type)
    }

    @window_set_title(GtkWidget* window, const gchar* title) void {
        #gtk_window_set_title(GTK_WINDOW(window), title);
    }

    // Deprecated:  @gtk_window_set_wmclass(
    //      GtkWindow* window,
    //      const gchar* wmclass_name,
    //      const gchar* wmclass_class)

    @window_set_resizable(GtkWidget* window, gboolean resizable) void {
        @gtk_window_set_resizable(GTK_WINDOW(window), resizable)
    }

    @window_get_resizable(GtkWidget* window) gboolean? {
        @return gtk_window_get_resizable(GTK_WINDOW(window))
    }

    @window_add_accel_group(GtkWidget* window, GtkAccelGroup* accel_group) void {
        @gtk_window_add_accel_group(GTK_WINDOW(window), accel_group)
    }

    @window_remove_accel_group(GtkWidget* window, GtkAccelGroup* accel_group) void {
        @gtk_window_remove_accel_group(GTK_WINDOW(window), accel_group)
    }

    @window_activate_focus(GtkWidget* window) gboolean? {
        @return gtk_window_activate_focus(GTK_WINDOW(window))
    }

    @window_activate_default(GtkWidget* window) gboolean? {
        @return gtk_window_activate_default(GTK_WINDOW(window))
    }

    @window_set_modal(GtkWidget* window, gboolean modal) void {
        @gtk_window_set_modal(GTK_WINDOW(window), modal)
    }

    @window_set_default_size(GtkWidget* window, gint width, gint height) void {
        @gtk_window_set_default_size(GTK_WINDOW(window),width, height)
    }

    // Deprecated:  @gtk_window_set_default_geometry(
    //      GtkWindow* window,
    //      gint width,
    //      gint height)

    @window_set_geometry_hints(GtkWidget* window, GtkWidget* geometry_widget, GdkGeometry* geometry, GdkWindowHints geom_mask) void {
        @gtk_window_set_geometry_hints(GTK_WINDOW(window), geometry_widget,geometry,geom_mask)
    }

    @window_set_gravity(GtkWidget* window, GdkGravity gravity) void {
        @gtk_window_set_gravity(GTK_WINDOW(window), gravity)
    }

    @window_get_gravity(GtkWidget* window) GdkGravity {
        @return gtk_window_get_gravity(GTK_WINDOW(window))
    }

    @window_set_position(GtkWidget* window, GtkWindowPosition position) void {
        @gtk_window_set_position(GTK_WINDOW(window), position)
    }

    @window_set_transient_for(GtkWidget* window, GtkWidget* parent) void {
        @gtk_window_set_transient_for(GTK_WINDOW(window), GTK_WINDOW(parent))
    }

    @window_set_attached_to(GtkWidget* window, GtkWidget* attach_widget) void {
        @gtk_window_set_attached_to(GTK_WINDOW(window), attach_widget)
    }

    @window_set_destroy_with_parent(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_destroy_with_parent(GTK_WINDOW(window), setting)
    }

    @window_set_hide_titlebar_when_maximized(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_hide_titlebar_when_maximized(GTK_WINDOW(window), setting)
    }

    @window_set_screen(GtkWidget* window, GdkScreen* screen) void {
        @gtk_window_set_screen(GTK_WINDOW(window), screen)
    }

    @window_get_screen(GtkWidget* window) GdkScreen*? {
        @return gtk_window_get_screen(GTK_WINDOW(window))
    }

    @window_is_active(GtkWidget* window) gboolean? {
        @return gtk_window_is_active(GTK_WINDOW(window))
    }

    @window_is_maximized(GtkWidget* window) gboolean? {
        @return gtk_window_is_maximized(GTK_WINDOW(window))
    }

    @window_has_toplevel_focus(GtkWidget* window) gboolean? {
        @return gtk_window_has_toplevel_focus(GTK_WINDOW(window))
    }

    @window_list_toplevels GList*? {
        @return gtk_window_list_toplevels()
    }

    @window_add_mnemonic(GtkWidget* window, guint keyval, GtkWidget* target) void {
        @gtk_window_add_mnemonic(GTK_WINDOW(window),keyval, target)
    }

    @window_remove_mnemonic(GtkWidget* window, guint keyval, GtkWidget* target) void {
        @gtk_window_remove_mnemonic(GTK_WINDOW(window),keyval, target)
    }

    @window_mnemonic_activate(GtkWidget* window, guint keyval, GdkModifierType modifier) gboolean? {
        @return gtk_window_mnemonic_activate(GTK_WINDOW(window),keyval, modifier)
    }

    @window_activate_key(GtkWidget* window, GdkEventKey* event) gboolean? {
        @return gtk_window_activate_key(GTK_WINDOW(window), event)
    }

    @window_propagate_key_event(GtkWidget* window, GdkEventKey* event) gboolean? {
        @return gtk_window_propagate_key_event(GTK_WINDOW(window), event)
    }

    @window_get_focus(GtkWidget* window) GtkWidget*? {
        @return gtk_window_get_focus(GTK_WINDOW(window))
    }

    @window_set_focus(GtkWidget* window, GtkWidget* focus) void {
        @gtk_window_set_focus(GTK_WINDOW(window), focus)
    }

    @window_get_default_widget(GtkWidget* window) GtkWidget*? {
        @return gtk_window_get_default_widget(GTK_WINDOW(window))
    }

    @window_set_default(GtkWidget* window, GtkWidget* default_widget) void {
        @gtk_window_set_default(GTK_WINDOW(window), default_widget)
    }

    @window_present(GtkWidget* window) void {
        @gtk_window_present(GTK_WINDOW(window))
    }

    @window_present_with_time(GtkWidget* window, guint32 timestamp) void {
        @gtk_window_present_with_time(GTK_WINDOW(window), timestamp)
    }

    @window_close(GtkWidget* window) void {
        @gtk_window_close(GTK_WINDOW(window))
    }

    @window_iconify(GtkWidget* window) void {
        @gtk_window_iconify(GTK_WINDOW(window))
    }

    @window_deiconify(GtkWidget* window) void {
        @gtk_window_deiconify(GTK_WINDOW(window))
    }

    @window_stick(GtkWidget* window) void {
        @gtk_window_stick(GTK_WINDOW(window))
    }

    @window_unstick(GtkWidget* window) void {
        @gtk_window_unstick(GTK_WINDOW(window))
    }

    @window_maximize(GtkWidget* window) void {
        @gtk_window_maximize(GTK_WINDOW(window))
    }

    @window_unmaximize(GtkWidget* window) void {
        @gtk_window_unmaximize(GTK_WINDOW(window))
    }

    @window_fullscreen(GtkWidget* window) void {
        @gtk_window_fullscreen(GTK_WINDOW(window))
    }

    @window_fullscreen_on_monitor(GtkWidget* window, GdkScreen* screen, gint monitor) void {
        @gtk_window_fullscreen_on_monitor(GTK_WINDOW(window),screen, monitor)
    }

    @window_unfullscreen(GtkWidget* window) void {
        @gtk_window_unfullscreen(GTK_WINDOW(window))
    }

    @window_set_keep_above(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_keep_above(GTK_WINDOW(window), setting)
    }

    @window_set_keep_below(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_keep_below(GTK_WINDOW(window), setting)
    }

    @window_begin_resize_drag(GtkWidget* window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp) void {
        @gtk_window_begin_resize_drag(GTK_WINDOW(window),edge,button,root_x,root_y, timestamp)
    }

    @window_begin_move_drag(GtkWidget* window, gint button, gint root_x, gint root_y, guint32 timestamp) void {
        @gtk_window_begin_move_drag(GTK_WINDOW(window),button,root_x,root_y, timestamp)
    }

    @window_set_decorated(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_decorated(GTK_WINDOW(window), setting)
    }

    @window_set_deletable(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_deletable(GTK_WINDOW(window), setting)
    }

    @window_set_mnemonic_modifier(GtkWidget* window, GdkModifierType modifier) void {
        @gtk_window_set_mnemonic_modifier(GTK_WINDOW(window), modifier)
    }

    @window_set_type_hint(GtkWidget* window, GdkWindowTypeHint hint) void {
        @gtk_window_set_type_hint(GTK_WINDOW(window), hint)
    }

    @window_set_skip_taskbar_hint(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_skip_taskbar_hint(GTK_WINDOW(window), setting)
    }

    @window_set_skip_pager_hint(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_skip_pager_hint(GTK_WINDOW(window), setting)
    }

    @window_set_urgency_hint(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_urgency_hint(GTK_WINDOW(window), setting)
    }

    @window_set_accept_focus(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_accept_focus(GTK_WINDOW(window), setting)
    }

    @window_set_focus_on_map(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_focus_on_map(GTK_WINDOW(window), setting)
    }

    @window_set_startup_id(GtkWidget* window, const gchar* startup_id) void {
        @gtk_window_set_startup_id(GTK_WINDOW(window), startup_id)
    }

    @window_set_role(GtkWidget* window, const gchar* role) void {
        @gtk_window_set_role(GTK_WINDOW(window), role)
    }

    @window_get_decorated(GtkWidget* window) gboolean? {
        @return gtk_window_get_decorated(GTK_WINDOW(window))
    }

    @window_get_deletable(GtkWidget* window) gboolean? {
        @return gtk_window_get_deletable(GTK_WINDOW(window))
    }

    @window_get_default_icon_list GList*? {
        @return gtk_window_get_default_icon_list()
    }

    #const gchar* window_get_default_icon_name() {
        @return gtk_window_get_default_icon_name()
    }

    @window_get_default_size(GtkWidget* window, gint* width, gint* height) void {
        @gtk_window_get_default_size(GTK_WINDOW(window),width, height)
    }

    @window_get_destroy_with_parent(GtkWidget* window) gboolean? {
        @return gtk_window_get_destroy_with_parent(GTK_WINDOW(window))
    }

    @window_get_hide_titlebar_when_maximized(GtkWidget* window) gboolean? {
        @return gtk_window_get_hide_titlebar_when_maximized(GTK_WINDOW(window))
    }

    @window_get_icon(GtkWidget* window) GdkPixbuf*? {
        @return gtk_window_get_icon(GTK_WINDOW(window))
    }

    @window_get_icon_list(GtkWidget* window) GList*? {
        @return gtk_window_get_icon_list(GTK_WINDOW(window))
    }

    #const gchar* window_get_icon_name(GtkWidget* window) {
        @return gtk_window_get_icon_name(GTK_WINDOW(window))
    }

    @window_get_mnemonic_modifier(GtkWidget* window) GdkModifierType? {
        @return gtk_window_get_mnemonic_modifier(GTK_WINDOW(window))
    }

    @window_get_modal(GtkWidget* window) gboolean? {
        @return gtk_window_get_modal(GTK_WINDOW(window))
    }

    @window_get_position(GtkWidget* window, gint* root_x, gint* root_y) void {
        @gtk_window_get_position(GTK_WINDOW(window),root_x, root_y)
    }

    #const gchar* window_get_role(GtkWidget* window) {
        @return gtk_window_get_role(GTK_WINDOW(window))
    }

    @window_get_size(GtkWidget* window, gint* width, gint* height) void {
        @gtk_window_get_size(GTK_WINDOW(window),width, height)
    }

    #const gchar* window_get_title(GtkWidget* window) {
        @return gtk_window_get_title(GTK_WINDOW(window))
    }

    @window_get_transient_for(GtkWidget* window) GtkWindow*? {
        @return gtk_window_get_transient_for(GTK_WINDOW(window))
    }

    @window_get_attached_to(GtkWidget* window) GtkWidget*? {
        @return gtk_window_get_attached_to(GTK_WINDOW(window))
    }

    @window_get_type_hint(GtkWidget* window) GdkWindowTypeHint? {
        @return gtk_window_get_type_hint(GTK_WINDOW(window))
    }

    @window_get_skip_taskbar_hint(GtkWidget* window) gboolean? {
        @return gtk_window_get_skip_taskbar_hint(GTK_WINDOW(window))
    }

    @window_get_skip_pager_hint(GtkWidget* window) gboolean? {
        @return gtk_window_get_skip_pager_hint(GTK_WINDOW(window))
    }

    @window_get_urgency_hint(GtkWidget* window) gboolean? {
        @return gtk_window_get_urgency_hint(GTK_WINDOW(window))
    }

    @window_get_accept_focus(GtkWidget* window) gboolean? {
        @return gtk_window_get_accept_focus(GTK_WINDOW(window))
    }

    @window_get_focus_on_map(GtkWidget* window) gboolean? {
        @return gtk_window_get_focus_on_map(GTK_WINDOW(window))
    }

    @window_get_group(GtkWidget* window) GtkWindowGroup*? {
        @return gtk_window_get_group(GTK_WINDOW(window))
    }

    @window_has_group(GtkWidget* window) gboolean? {
        @return gtk_window_has_group(GTK_WINDOW(window))
    }

    @window_get_window_type(GtkWidget* window) GtkWindowType? {
        @return gtk_window_get_window_type(GTK_WINDOW(window))
    }

    @window_move(GtkWidget* window, gint x, gint y) void {
        @gtk_window_move(GTK_WINDOW(window),x, y)
    }

    // Deprecated:  @gtk_window_parse_geometry(
    //      GtkWindow* window,
    //      const gchar *geometry)

    // Deprecated:  @gtk_window_reshow_with_initial_size(
    //      GtkWindow* window)

    @window_resize(GtkWidget* window, gint width, gint height) void {
        @gtk_window_resize(GTK_WINDOW(window),width, height)
    }

    // Deprecated:  @gtk_window_resize_to_geometry(
    //      GtkWindow* window,
    //      gint width,
    //      gint height)

    @window_set_default_icon_list(GList* list) void {
        @gtk_window_set_default_icon_list(list)
    }

    @window_set_default_icon(GdkPixbuf* icon) void {
        @gtk_window_set_default_icon(icon)
    }

    @window_set_default_icon_from_file(const gchar* filename, GError** err) gboolean? {
        @return gtk_window_set_default_icon_from_file(filename, err)
    }

    @window_set_default_icon_name(const gchar* name) void {
        @gtk_window_set_default_icon_name(name)
    }

    @window_set_icon(GtkWidget* window, GdkPixbuf* icon) void {
        @gtk_window_set_icon(GTK_WINDOW(window), icon)
    }

    @window_set_icon_list(GtkWidget* window, GList* list) void {
        @gtk_window_set_icon_list(GTK_WINDOW(window), list)
    }

    @window_set_icon_from_file(GtkWidget* window, const gchar* filename, GError** err) gboolean? {
        @return gtk_window_set_icon_from_file(GTK_WINDOW(window),filename, err)
    }

    @window_set_icon_name(GtkWidget* window, const gchar* name) void {
        @gtk_window_set_icon_name(GTK_WINDOW(window), name)
    }

    @window_set_auto_startup_notification(gboolean setting) void {
        @gtk_window_set_auto_startup_notification(setting)
    }

    // Deprecated:  @gtk_window_get_opacity(
    //      GtkWidget* window)

    // Deprecated:  @gtk_window_set_opacity(
    //      GtkWidget* window,
    //      gdouble opacity)

    @window_get_mnemonics_visible(GtkWidget* window) gboolean? {
        @return gtk_window_get_mnemonics_visible(GTK_WINDOW(window))
    }

    @window_set_mnemonics_visible(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_mnemonics_visible(GTK_WINDOW(window), setting)
    }

    @window_get_focus_visible(GtkWidget* window) gboolean? {
        @return gtk_window_get_focus_visible(GTK_WINDOW(window))
    }

    @window_set_focus_visible(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_focus_visible(GTK_WINDOW(window), setting)
    }

    // Deprecated:  @gtk_window_set_has_resize_grip(
    //      GtkWidget* window,
    //      gboolean value)

    // Deprecated:  @gtk_window_get_has_resize_grip(
    //      GtkWidget* window)

    // Deprecated:  @gtk_window_resize_grip_is_visible(
    //      GtkWidget* window)

    // Deprecated:  @gtk_window_get_resize_grip_area(
    //      GtkWidget* window,
    //      GdkRectangle* rect)

    @window_get_application(GtkWidget* window) GtkApplication*? {
        @return gtk_window_get_application(GTK_WINDOW(window))
    }

    @window_set_application(GtkWidget* window, GtkApplication* application) void {
        @gtk_window_set_application(GTK_WINDOW(window), application)
    }

    @window_set_has_user_ref_count(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_has_user_ref_count(GTK_WINDOW(window), setting)
    }

    @window_set_titlebar(GtkWidget* window, GtkWidget* titlebar) void {
        @gtk_window_set_titlebar(GTK_WINDOW(window), titlebar)
    }

    @window_get_titlebar(GtkWidget* window) GtkWidget*? {
        @gtk_window_get_titlebar(GTK_WINDOW(window))
    }

    @window_set_interactive_debugging(gboolean enable) void {
        @gtk_window_set_interactive_debugging(enable)
    }

    // ---
    // End of GtkWindow

    // GtkDialog

    @dialog_new GtkWidget*? {
        @return gtk_dialog_new()
    }

    #template <typename... ID>
    @dialog_new_with_buttons(const gchar* title, GtkWidget* window, GtkDialogFlags flags, const gchar* first_button_text, ID... ids) GtkWidget*? {
        @return (gtk_dialog_new_with_buttons(title, GTK_WINDOW(window),flags,first_button_text,ids),...)
    }

    @dialog_run(GtkDialog* dialog) gint? {
        @return gtk_dialog_run(dialog)
    }

    @dialog_response(GtkDialog* dialog, gint response_id) void {
        @gtk_dialog_response(dialog, response_id)
    }

    @dialog_add_button(GtkDialog* dialog, const gchar* button_text, gint response_id) GtkWidget*? {
        @return gtk_dialog_add_button(dialog,button_text, response_id)
    }

    #template <typename... ID>
    @dialog_add_buttons(GtkDialog* dialog, const gchar* button_text, ID... ids) void {
        @(gtk_dialog_add_buttons(dialog,button_text,ids), ...)
    }

    @dialog_add_action_widget(GtkDialog* dialog, GtkWidget* child, gint response_id) void {
        @gtk_dialog_add_action_widget(dialog,child, response_id)
    }

    @dialog_set_default_response(GtkDialog* dialog, gint response_id) void {
        @gtk_dialog_set_default_response(dialog, response_id)
    }

    @dialog_set_response_sensitive(GtkDialog* dialog, gint response_id, gboolean setting) void {
        @gtk_dialog_set_response_sensitive(dialog,response_id, setting)
    }

    @dialog_get_response_for_widget(GtkDialog* dialog, GtkWidget* widget) gint? {
        @return gtk_dialog_get_response_for_widget(dialog, widget)
    }

    @dialog_get_widget_for_response(GtkDialog* dialog, gint response_id) GtkWidget*? {
        @return gtk_dialog_get_widget_for_response(dialog, response_id)
    }

    // Deprecated:  @gtk_dialog_get_action_area(
    //      GtkDialog* dialog)

    @dialog_get_content_area(GtkDialog* dialog) GtkWidget*? {
        @return gtk_dialog_get_content_area(dialog)
    }

    @dialog_get_header_bar(GtkDialog* dialog) GtkWidget*? {
        @return gtk_dialog_get_header_bar(dialog)
    }

    // Deprecated:  @gtk_alternative_dialog_button_order(
    //      GdkScreen* screen)

    // Deprecated:  @gtk_dialog_set_alternative_button_order(
    //      GtkDialog* dialog,
    //      gint first_response_id,
    //      ...)

    // Deprecated:  @gtk_dialog_set_alternative_button_order_from_array(
    //      GtkDialog* dialog,
    //      gint n_params,
    //      gint* new_order,
    //      ...)

    // ---
    // End of GtkDialog

    // GtkMessageDialog

    #template <typename... Arguments>
    @message_dialog_new(GtkWidget* window, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar* message_format, Arguments... args) GtkWidget*? {
        @return (gtk_message_dialog_new(GTK_WINDOW(window),flags,type,buttons,message_format,args), ...)
    }

    #template <typename... Arguments>
    @message_dialog_new_with_markup(GtkWidget* parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar* message_format, Arguments... args) GtkWidget*? {
        @return (gtk_message_dialog_new_with_markup(GTK_WINDOW(parent),flags,type,buttons,message_format,args), ...)
    }

    @message_dialog_set_markup(GtkMessageDialog* message_dialog, const gchar* str) void {
        @gtk_message_dialog_set_markup(message_dialog, str)
    }

    // Deprecated:  @gtk_message_dialog_set_image(
    //      GtkMessageDialog* dialog,
    //      GtkWidget* image)

    // Deprecated:  @gtk_message_dialog_get_image(
    //      GtkMessageDialog* dialog)

    #template <typename... Arguments>
    @message_dialog_format_secondary_text(GtkMessageDialog* message_dialog, const gchar* message_format, Arguments... args) void {
        @(gtk_message_dialog_format_secondary_text(message_dialog,message_format,args), ...)
    }

    #template <typename... Arguments>
    @message_dialog_format_secondary_markup(GtkMessageDialog* message_dialog, const gchar* message_format, Arguments... args) void {
        @(gtk_message_dialog_format_secondary_markup(message_dialog,message_format,args), ...)
    }

    @message_dialog_get_message_area(GtkMessageDialog* message_dialog) GtkWidget*? {
        @return gtk_message_dialog_get_message_area(message_dialog)
    }

    // ---
    // End of GtkMessageDialog

    // GtkAboutDialog

    @about_dialog_new GtkWidget*? {
        @return gtk_about_dialog_new()
    }

    #const gchar* about_dialog_get_program_name(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_program_name(about)
    }

    @about_dialog_set_program_name(GtkAboutDialog* about, const gchar* name) void {
        @gtk_about_dialog_set_program_name(about, name)
    }

    #const gchar* about_dialog_get_version(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_version(about)
    }

    @about_dialog_set_version(GtkAboutDialog* dialog, const gchar* version) void {
        @gtk_about_dialog_set_version(dialog, version)
    }

    #const gchar* about_dialog_get_copyright(GtkAboutDialog* dialog) {
        @return gtk_about_dialog_get_copyright(dialog)
    }

    @about_dialog_set_copyright(GtkAboutDialog* about, const gchar* copyright) void {
        @gtk_about_dialog_set_copyright(about, copyright)
    }

    #const gchar* about_dialog_get_comments(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_comments(about)
    }

    @about_dialog_set_comments(GtkAboutDialog* about, const gchar* comments) void {
        @gtk_about_dialog_set_comments(about, comments)
    }

    #const gchar* about_dialog_get_license(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_license(about)
    }

    @about_dialog_set_license(GtkAboutDialog* about, const gchar* license) void {
        @gtk_about_dialog_set_license(about, license)
    }

    @about_dialog_get_wrap_license(GtkAboutDialog* about) gboolean? {
        @return gtk_about_dialog_get_wrap_license(about)
    }

    @about_dialog_set_wrap_license(GtkAboutDialog* about, gboolean wrap_license) void {
        @gtk_about_dialog_set_wrap_license(about, wrap_license)
    }

    @about_dialog_get_license_type(GtkAboutDialog* about) GtkLicense? {
        @return gtk_about_dialog_get_license_type(about)
    }

    @about_dialog_set_license_type(GtkAboutDialog* about, GtkLicense license_type) void {
        @gtk_about_dialog_set_license_type(about, license_type)
    }

    #const gchar* about_dialog_get_website(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_website(about)
    }

    @about_dialog_set_website(GtkAboutDialog* about, const gchar* website) void {
        @gtk_about_dialog_set_website(about, website)
    }

    #const gchar* about_dialog_get_website_label(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_website_label(about)
    }

    @about_dialog_set_website_label(GtkAboutDialog* about, const gchar* website_label) void {
        @gtk_about_dialog_set_website_label(about, website_label)
    }

    #const gchar* const * about_dialog_get_authors(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_authors(about)
    }

    @about_dialog_set_authors(GtkAboutDialog* about, const gchar** authors) void {
        @gtk_about_dialog_set_authors(about, authors)
    }

    #const gchar* const * about_dialog_get_artists(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_artists(about)
    }

    @about_dialog_set_artists(GtkAboutDialog* about, const gchar** artists) void {
        @gtk_about_dialog_set_artists(about, artists)
    }

    #const gchar* const * about_dialog_get_documenters(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_documenters(about)
    }

    @about_dialog_set_documenters(GtkAboutDialog* about, const gchar** documenters) void {
        @gtk_about_dialog_set_documenters(about, documenters)
    }

    #const gchar* about_dialog_get_translator_credits(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_translator_credits(about)
    }

    @about_dialog_set_translator_credits(GtkAboutDialog* about, const gchar* translator_credits) void {
        @gtk_about_dialog_set_translator_credits(about, translator_credits)
    }

    @about_dialog_get_logo(GtkAboutDialog* about) GdkPixbuf*? {
        @return gtk_about_dialog_get_logo(about)
    }

    @about_dialog_set_logo(GtkAboutDialog* about, GdkPixbuf* logo) void {
        @gtk_about_dialog_set_logo(about, logo)
    }

    #const gchar* about_dialog_get_logo_icon_name(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_logo_icon_name(about)
    }

    @about_dialog_set_logo_icon_name(GtkAboutDialog* about, const gchar* icon_name) void {
        @gtk_about_dialog_set_logo_icon_name(about, icon_name)
    }

    @about_dialog_add_credit_section(GtkAboutDialog* about, const gchar* section_name, const gchar** people) void {
        @gtk_about_dialog_add_credit_section(about,section_name, people)
    }

    #template <typename... Value>
    @show_about_dialog(GtkWidget* parent, const gchar* first_property_name, Value... first_property) void {
        @(gtk_show_about_dialog(GTK_WINDOW(parent),first_property_name,first_property), ...)
    }

    // ---
    // End of GtkAboutDialog

    // GtkAssistant

    @assistant_new GtkWidget*? {
        @return gtk_assistant_new()
    }

    @assistant_get_current_page(GtkAssistant* assistant) gint? {
        @return gtk_assistant_get_current_page(assistant)
    }

    @assistant_set_current_page(GtkAssistant* assistant, gint page_num) void {
        @gtk_assistant_set_current_page(assistant, page_num)
    }

    @assistant_get_n_pages(GtkAssistant* assistant) gint? {
        @return gtk_assistant_get_n_pages(assistant)
    }

    @assistant_get_nth_page(GtkAssistant* assistant, gint page_num) GtkWidget*? {
        @return gtk_assistant_get_nth_page(assistant, page_num)
    }

    @assistant_prepend_page(GtkAssistant* assistant, GtkWidget* page) gint? {
        @return gtk_assistant_prepend_page(assistant, page)
    }

    @assistant_append_page(GtkAssistant* assistant, GtkWidget* page) gint? {
        @return gtk_assistant_append_page(assistant, page)
    }

    @assistant_insert_page(GtkAssistant* assistant, GtkWidget* page, gint position) gint? {
        @return gtk_assistant_insert_page(assistant,page, position)
    }

    @assistant_remove_page(GtkAssistant* assistant, gint page_num) void {
        @gtk_assistant_remove_page(assistant, page_num)
    }

    // Unimplemented: gint
    //(*GtkAssistantPageFunc) (gint current_page,
    //                         gpointer data);

    @assistant_set_forward_page_func(GtkAssistant* assistant, GtkAssistantPageFunc page_func, gpointer data, GDestroyNotify destroy) void {
        @gtk_assistant_set_forward_page_func(assistant,page_func,data, destroy)
    }

    @assistant_set_page_type(GtkAssistant* assistant, GtkWidget* page, GtkAssistantPageType type) void {
        @gtk_assistant_set_page_type(assistant,page, type)
    }

    @assistant_get_page_type(GtkAssistant* assistant, GtkWidget* page) GtkAssistantPageType? {
        @return gtk_assistant_get_page_type(assistant, page)
    }

    @assistant_set_page_title(GtkAssistant* assistant, GtkWidget* page, const gchar* title) void {
        @gtk_assistant_set_page_title(assistant,page, title)
    }

    #const gchar* assistant_get_page_title(GtkAssistant* assistant, GtkWidget* page) {
        @return gtk_assistant_get_page_title(assistant, page)
    }

    // Deprecated:  @gtk_assistant_set_page_header_image(
    //      GtkAssistant* assistant,
    //      GtkWidget* page,
    //      GdkPixbuf* pixbuf)

    // Deprecated:  @gtk_assistant_get_page_header_image(
    //      GtkAssistant* assistant,
    //      GtkWidget* page)

    // Deprecated:  @gtk_assistant_set_page_side_image(
    //      GtkAssistant* assistant,
    //      GtkWidget* page,
    //      GdkPixbuf* pixbuf)

    // Deprecated:  @gtk_assistant_get_page_side_image(
    //      GtkAssistant* assistant,
    //      GtkWidget* page)

    @assistant_set_page_complete(GtkAssistant* assistant, GtkWidget* page, gboolean complete) void {
        @gtk_assistant_set_page_complete(assistant,page, complete)
    }

    @assistant_get_page_complete(GtkAssistant* assistant, GtkWidget* page) gboolean? {
        @return gtk_assistant_get_page_complete(assistant, page)
    }

    @assistant_set_page_has_padding(GtkAssistant* assistant, GtkWidget* page, gboolean has_padding) void {
        @gtk_assistant_set_page_has_padding(assistant,page, has_padding)
    }

    @assistant_get_page_has_padding(GtkAssistant* assistant, GtkWidget* page) gboolean? {
        @return gtk_assistant_get_page_has_padding(assistant, page)
    }

    @assistant_add_action_widget(GtkAssistant* assistant, GtkWidget* child) void {
        @gtk_assistant_add_action_widget(assistant, child)
    }

    @assistant_remove_action_widget(GtkAssistant* assistant, GtkWidget* child) void {
        @gtk_assistant_remove_action_widget(assistant, child)
    }

    @assistant_update_buttons_state(GtkAssistant* assistant) void {
        @gtk_assistant_update_buttons_state(assistant)
    }

    @assistant_commit(GtkAssistant* assistant) void {
        @gtk_assistant_commit(assistant)
    }

    @assistant_next_page(GtkAssistant* assistant) void {
        @gtk_assistant_next_page(assistant)
    }

    @assistant_previous_page(GtkAssistant* assistant) void {
        @gtk_assistant_previous_page(assistant)
    }

    // ---
    // End of GtkAssistant

    // GtkInvisible

    @invisible_new GtkWidget*? {
        @return gtk_invisible_new()
    }

    @invisible_new_for_screen(GdkScreen* screen) GtkWidget*? {
        @return gtk_invisible_new_for_screen(screen)
    }

    @invisible_set_screen(GtkInvisible* invisible, GdkScreen* screen) void {
        @gtk_invisible_set_screen(invisible, screen)
    }

    @invisible_get_screen(GtkInvisible* invisible) GdkScreen*? {
        @return gtk_invisible_get_screen(invisible)
    }

    // ---
    // End of GtkInvisible

    // GtkOffscreenWindow

    @offscreen_window_new GtkWidget*? {
        @return gtk_offscreen_window_new()
    }

    @offscreen_window_get_surface(GtkOffscreenWindow* offscreen) cairo_surface_t*? {
        @return gtk_offscreen_window_get_surface(offscreen)
    }

    @offscreen_window_get_pixbuf(GtkOffscreenWindow* offscreen) GdkPixbuf*? {
        @return gtk_offscreen_window_get_pixbuf(offscreen)
    }

    // ---
    // End of GtkOffscreenWindow

    // GtkWindowGroup

    @window_group_new GtkWindowGroup*? {
        @return gtk_window_group_new()
    }

    @window_group_add_window(GtkWindowGroup* window_group, GtkWidget* window) void {
        @gtk_window_group_add_window(window_group, GTK_WINDOW(window))
    }

    @window_group_remove_window(GtkWindowGroup* window_group, GtkWidget* window) void {
        @gtk_window_group_remove_window(window_group, GTK_WINDOW(window))
    }

    @window_group_list_windows(GtkWindowGroup* window_group) GList*? {
        @return gtk_window_group_list_windows(window_group)
    }

    @window_group_get_current_grab(GtkWindowGroup* window_group) GtkWidget*? {
        @return gtk_window_group_get_current_grab(window_group)
    }

    @window_group_get_current_device_grab(GtkWindowGroup* window_group, GdkDevice* device) GtkWidget*? {
        @return gtk_window_group_get_current_device_grab(window_group, device)
    }

    // ---
    // End of GtkWindowGroup

    // GtkBox

    @box_new(GtkOrientation orientation, gint spacing) GtkWidget*? {
        @return gtk_box_new(orientation, spacing)
    }

    @box_pack_start(GtkBox* box, GtkWidget* child, gboolean expand, gboolean fill, guint padding) void {
        @gtk_box_pack_start(box,child,expand,fill, padding)
    }

    @box_pack_end(GtkBox* box, GtkWidget* child, gboolean expand, gboolean fill, guint padding) void {
        @gtk_box_pack_end(box,child,expand,fill, padding)
    }

    @box_get_homogeneous(GtkBox* box) gboolean? {
        @return gtk_box_get_homogeneous(box)
    }

    @box_set_homogeneous(GtkBox* box, gboolean homogeneous) void {
        @gtk_box_set_homogeneous(box, homogeneous)
    }

    @box_get_spacing(GtkBox* box) gint? {
        @return gtk_box_get_spacing(box)
    }

    @box_set_spacing(GtkBox* box, gint spacing) void {
        @gtk_box_set_spacing(box, spacing)
    }

    @box_reorder_child(GtkBox* box, GtkWidget* child, gint position) void {
        @gtk_box_reorder_child(box,child, position)
    }

    @box_query_child_packing(GtkBox* box, GtkWidget* child, gboolean* expand, gboolean* fill, guint* padding, GtkPackType* pack_type) void {
        @gtk_box_query_child_packing(box,child,expand,fill,padding, pack_type)
    }

    @box_set_child_packing(GtkBox* box, GtkWidget* child, gboolean expand, gboolean fill, guint padding, GtkPackType pack_type) void {
        @gtk_box_set_child_packing(box,child,expand,fill,padding, pack_type)
    }

    @box_get_baseline_position(GtkBox* box) GtkBaselinePosition? {
        @return gtk_box_get_baseline_position(box)
    }

    @box_set_baseline_position(GtkBox* box, GtkBaselinePosition position) void {
        @gtk_box_set_baseline_position(box, position)
    }

    @box_get_center_widget(GtkBox* box) GtkWidget*? {
        @return gtk_box_get_center_widget(box)
    }

    @box_set_center_widget(GtkBox* box, GtkWidget* widget) void {
        @gtk_box_set_center_widget(box, widget)
    }

    // ---
    // End of GtkBox

    // GtkGrid

    @grid_new GtkWidget*? {
        @return gtk_grid_new()
    }

    @grid_attach(GtkGrid* grid, GtkWidget* child, gint left, gint top, gint width, gint height) void {
        @gtk_grid_attach(grid,child,left,top,width, height)
    }

    @grid_attach_next_to(GtkGrid* grid, GtkWidget* child, GtkWidget* sibling, GtkPositionType side, gint width, gint height) void {
        @gtk_grid_attach_next_to(grid,child,sibling,side,width, height)
    }

    @grid_get_child_at(GtkGrid* grid, gint left, gint top) GtkWidget*? {
        @return gtk_grid_get_child_at(grid,left, top)
    }

    @grid_insert_row(GtkGrid* grid, gint position) void {
        @gtk_grid_insert_row(grid, position)
    }

    @grid_insert_column(GtkGrid* grid, gint position) void {
        @gtk_grid_insert_column(grid, position)
    }

    @grid_remove_row(GtkGrid* grid, gint position) void {
        @gtk_grid_remove_row(grid, position)
    }

    @grid_remove_column(GtkGrid* grid, gint position) void {
        @gtk_grid_remove_column(grid, position)
    }

    @grid_insert_next_to(GtkGrid* grid, GtkWidget* sibling, GtkPositionType side) void {
        @gtk_grid_insert_next_to(grid,sibling, side)
    }

    @grid_set_row_homogeneous(GtkGrid* grid, gboolean homogeneous) void {
        @gtk_grid_set_row_homogeneous(grid, homogeneous)
    }

    @grid_get_row_homogeneous(GtkGrid* grid) gboolean? {
        @return gtk_grid_get_row_homogeneous(grid)
    }

    @grid_set_row_spacing(GtkGrid* grid, guint spacing) void {
        @gtk_grid_set_row_spacing(grid, spacing)
    }

    @grid_get_row_spacing(GtkGrid* grid) guint? {
        @return gtk_grid_get_row_spacing(grid)
    }

    @grid_set_column_homogeneous(GtkGrid* grid, gboolean homogeneous) void {
        @gtk_grid_set_column_homogeneous(grid, homogeneous)
    }

    @grid_get_column_homogeneous(GtkGrid* grid) gboolean? {
        @return gtk_grid_get_column_homogeneous(grid)
    }

    @grid_set_column_spacing(GtkGrid* grid, guint spacing) void {
        @gtk_grid_set_column_spacing(grid, spacing)
    }

    @grid_get_column_spacing(GtkGrid* grid) guint? {
        @return gtk_grid_get_column_spacing(grid)
    }

    @grid_get_baseline_row(GtkGrid* grid) guint? {
        @return gtk_grid_get_baseline_row(grid)
    }

    @grid_set_baseline_row(GtkGrid* grid, gint row) void {
        @gtk_grid_set_baseline_row(grid, row)
    }

    @grid_get_row_baseline_position(GtkGrid* grid, gint row) GtkBaselinePosition? {
        @return gtk_grid_get_row_baseline_position(grid, row)
    }

    @grid_set_row_baseline_position(GtkGrid* grid, gint row, GtkBaselinePosition pos) void {
        @gtk_grid_set_row_baseline_position(grid,row, pos)
    }

    // ---
    // End of GtkGrid

    // GtkRevealer

    @revealer_new GtkWidget*? {
        @return gtk_revealer_new()
    }

    @revealer_get_reveal_child(GtkRevealer* revealer) gboolean? {
        @return gtk_revealer_get_reveal_child(revealer)
    }

    @revealer_set_reveal_child(GtkRevealer* revealer, gboolean reveal_child) void {
        @gtk_revealer_set_reveal_child(revealer, reveal_child)
    }

    @revealer_get_child_revealed(GtkRevealer* revealer) gboolean? {
        @return gtk_revealer_get_child_revealed(revealer)
    }

    @revealer_get_transition_duration(GtkRevealer* revealer) guint? {
        @return gtk_revealer_get_transition_duration(revealer)
    }

    @revealer_set_transition_duration(GtkRevealer* revealer, guint duration) void {
        @gtk_revealer_set_transition_duration(revealer, duration)
    }

    @revealer_get_transition_type(GtkRevealer* revealer) GtkRevealerTransitionType? {
        @return gtk_revealer_get_transition_type(revealer)
    }

    @revealer_set_transition_type(GtkRevealer* revealer, GtkRevealerTransitionType transition) void {
        @gtk_revealer_set_transition_type(revealer, transition)
    }

    // ---
    // End of GtkRevealer

    // GtkListBox

    // Unimplemented: gboolean
    //(*GtkListBoxFilterFunc) (GtkListBoxRow *row,
    //                         gpointer user_data);

    // Unimplemented: gint
    //(*GtkListBoxSortFunc) (GtkListBoxRow *row1,
    //                       GtkListBoxRow *row2,
    //                       gpointer user_data);

    // Unimplemented: void
    //(*GtkListBoxUpdateHeaderFunc) (GtkListBoxRow *row,
    //                               GtkListBoxRow *before,
    //                               gpointer user_data);

    @list_box_new GtkWidget*? {
        @return gtk_list_box_new()
    }

    @list_box_prepend(GtkListBox* box, GtkWidget* child) void {
        @gtk_list_box_prepend(box, child)
    }

    @list_box_insert(GtkListBox* box, GtkWidget* child, gint position) void {
        @gtk_list_box_insert(box,child, position)
    }

    @list_box_select_row(GtkListBox* box, GtkListBoxRow* row) void {
        @gtk_list_box_select_row(box, row)
    }

    @list_box_unselect_row(GtkListBox* box, GtkListBoxRow* row) void {
        @gtk_list_box_unselect_row(box, row)
    }

    @list_box_select_all(GtkListBox* box) void {
        @gtk_list_box_select_all(box)
    }

    @list_box_unselect_all(GtkListBox* box) void {
        @gtk_list_box_unselect_all(box)
    }

    @list_box_get_selected_row(GtkListBox* box) GtkListBoxRow*? {
        @return gtk_list_box_get_selected_row(box)
    }

    // Unimplemented: void
    //(*GtkListBoxForeachFunc) (GtkListBox *box,
    //                          GtkListBoxRow *row,
    //                          gpointer user_data);

    @list_box_selected_foreach(GtkListBox* box, GtkListBoxForeachFunc func, gpointer data) void {
        @gtk_list_box_selected_foreach(box,func, data)
    }

    @list_box_get_selected_rows(GtkListBox* box) GList*? {
        @return gtk_list_box_get_selected_rows(box)
    }

    @list_box_set_selection_mode(GtkListBox* box, GtkSelectionMode mode) void {
        @gtk_list_box_set_selection_mode(box, mode)
    }

    @list_box_get_selection_mode(GtkListBox* box) GtkSelectionMode? {
        @return gtk_list_box_get_selection_mode(box)
    }

    @list_box_set_activate_on_single_click(GtkListBox* box, gboolean single) void {
        @gtk_list_box_set_activate_on_single_click(box, single)
    }

    @list_box_get_activate_on_single_click(GtkListBox* box) gboolean? {
        @return gtk_list_box_get_activate_on_single_click(box)
    }

    @list_box_get_adjustment(GtkListBox* box) GtkAdjustment*? {
        @return gtk_list_box_get_adjustment(box)
    }

    @list_box_set_adjustment(GtkListBox* box, GtkAdjustment* adjustment) void {
        @gtk_list_box_set_adjustment(box, adjustment)
    }

    @list_box_set_placeholder(GtkListBox* box, GtkWidget* placeholder) void {
        @gtk_list_box_set_placeholder(box, placeholder)
    }

    @list_box_get_row_at_index(GtkListBox* box, gint index_) GtkListBoxRow*? {
        @return gtk_list_box_get_row_at_index(box, index_)
    }

    @list_box_get_row_at_y(GtkListBox* box, gint y) GtkListBoxRow*? {
        @return gtk_list_box_get_row_at_y(box, y)
    }

    @list_box_invalidate_filter(GtkListBox* box) void {
        @gtk_list_box_invalidate_filter(box)
    }

    @list_box_invalidate_headers(GtkListBox* box) void {
        @gtk_list_box_invalidate_headers(box)
    }

    @list_box_invalidate_sort(GtkListBox* box) void {
        @gtk_list_box_invalidate_sort(box)
    }

    @list_box_set_filter_func(GtkListBox* box, GtkListBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_list_box_set_filter_func(box,filter_func,user_data, destroy)
    }

    @list_box_set_header_func(GtkListBox* box, GtkListBoxUpdateHeaderFunc update_header, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_list_box_set_header_func(box,update_header,user_data, destroy)
    }

    @list_box_set_sort_func(GtkListBox* box, GtkListBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_list_box_set_sort_func(box,sort_func,user_data, destroy)
    }

    @list_box_drag_highlight_row(GtkListBox* box, GtkListBoxRow* row) void {
        @gtk_list_box_drag_highlight_row(box, row)
    }

    @list_box_drag_unhighlight_row(GtkListBox* box) void {
        @gtk_list_box_drag_unhighlight_row(box)
    }

    // Unimplemented: GtkWidget *
    //(*GtkListBoxCreateWidgetFunc) (gpointer item,
    //                               gpointer user_data);

    @list_box_bind_model(GtkListBox* box, GListModel* model, GtkListBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func) void {
        @gtk_list_box_bind_model(box,model,create_widget_func,user_data, user_data_free_func)
    }

    @list_box_row_new GtkWidget*? {
        @return gtk_list_box_row_new()
    }

    @list_box_row_changed(GtkListBoxRow* row) void {
        @gtk_list_box_row_changed(row)
    }

    @list_box_row_is_selected(GtkListBoxRow* row) gboolean? {
        @return gtk_list_box_row_is_selected(row)
    }

    @list_box_row_get_header(GtkListBoxRow* row) GtkWidget*? {
        @return gtk_list_box_row_get_header(row)
    }

    @list_box_row_set_header(GtkListBoxRow* row, GtkWidget* header) void {
        @gtk_list_box_row_set_header(row, header)
    }

    @list_box_row_get_index(GtkListBoxRow* row) gint? {
        @return gtk_list_box_row_get_index(row)
    }

    @list_box_row_set_activatable(GtkListBoxRow* row, gboolean activatable) void {
        @gtk_list_box_row_set_activatable(row, activatable)
    }

    @list_box_row_get_activatable(GtkListBoxRow* row) gboolean {
        @return gtk_list_box_row_get_activatable(row)
    }

    @list_box_row_set_selectable(GtkListBoxRow* row, gboolean selectable) void {
        @gtk_list_box_row_set_selectable(row, selectable)
    }

    @list_box_row_get_selectable(GtkListBoxRow* row) gboolean? {
        @return gtk_list_box_row_get_selectable(row)
    }

    // ---
    // End of GtkListBox

    // GtkFlowBox

    @flow_box_new GtkWidget*? {
        @return gtk_flow_box_new()
    }

    @flow_box_insert(GtkFlowBox* box, GtkWidget* widget, gint position) void {
        @gtk_flow_box_insert(box,widget, position)
    }

    @flow_box_get_child_at_index(GtkFlowBox* box, gint idx) GtkFlowBoxChild*? {
        @return gtk_flow_box_get_child_at_index(box, idx)
    }

    @flow_box_get_child_at_pos(GtkFlowBox* box, gint x, gint y) GtkFlowBoxChild*? {
        @return gtk_flow_box_get_child_at_pos(box,x, y)
    }

    @flow_box_set_hadjustment(GtkFlowBox* box, GtkAdjustment* adjustment) void {
        @gtk_flow_box_set_hadjustment(box, adjustment)
    }

    @flow_box_set_vadjustment(GtkFlowBox* box, GtkAdjustment* adjustment) void {
        @gtk_flow_box_set_vadjustment(box, adjustment)
    }

    @flow_box_set_homogeneous(GtkFlowBox* box, gboolean homogeneous) void {
        @gtk_flow_box_set_homogeneous(box, homogeneous)
    }

    @flow_box_get_homogeneous(GtkFlowBox* box) gboolean? {
        @return gtk_flow_box_get_homogeneous(box)
    }

    @flow_box_set_row_spacing(GtkFlowBox* box, guint spacing) void {
        @gtk_flow_box_set_row_spacing(box, spacing)
    }

    @flow_box_get_row_spacing(GtkFlowBox* box) guint? {
        @return gtk_flow_box_get_row_spacing(box)
    }

    @flow_box_set_column_spacing(GtkFlowBox* box, guint spacing) void {
        @gtk_flow_box_set_column_spacing(box, spacing)
    }

    @flow_box_get_column_spacing(GtkFlowBox* box) guint? {
        @return gtk_flow_box_get_column_spacing(box)
    }

    @flow_box_set_min_children_per_line(GtkFlowBox* box, guint n_children) void {
        @gtk_flow_box_set_min_children_per_line(box, n_children)
    }

    @flow_box_get_min_children_per_line(GtkFlowBox* box) guint? {
        @return gtk_flow_box_get_min_children_per_line(box)
    }

    @flow_box_set_max_children_per_line(GtkFlowBox* box, guint n_children) void {
        @gtk_flow_box_set_max_children_per_line(box, n_children)
    }

    @flow_box_get_max_children_per_line(GtkFlowBox* box) guint? {
        @return gtk_flow_box_get_max_children_per_line(box)
    }

    @flow_box_set_activate_on_single_click(GtkFlowBox* box, gboolean single) void {
        @gtk_flow_box_set_activate_on_single_click(box, single)
    }

    @flow_box_get_activate_on_single_click(GtkFlowBox* box) gboolean? {
        @return gtk_flow_box_get_activate_on_single_click(box)
    }

    // Unimplemented: void
    //(*GtkFlowBoxForeachFunc) (GtkFlowBox *box,
    //                          GtkFlowBoxChild *child,
    //                          gpointer user_data);

    @flow_box_selected_foreach(GtkFlowBox* box, GtkFlowBoxForeachFunc func, gpointer data) void {
        @gtk_flow_box_selected_foreach(box,func, data)
    }

    @flow_box_get_selected_children(GtkFlowBox* box) GList*? {
        @return gtk_flow_box_get_selected_children(box)
    }

    @flow_box_select_child(GtkFlowBox* box, GtkFlowBoxChild* child) void {
        @gtk_flow_box_select_child(box, child)
    }

    @flow_box_unselect_child(GtkFlowBox* box, GtkFlowBoxChild* child) void {
        @gtk_flow_box_unselect_child(box, child)
    }

    @flow_box_select_all(GtkFlowBox* box) void {
        @gtk_flow_box_select_all(box)
    }

    @flow_box_unselect_all(GtkFlowBox* box) void {
        @gtk_flow_box_unselect_all(box)
    }

    @flow_box_set_selection_mode(GtkFlowBox* box, GtkSelectionMode mode) void {
        @gtk_flow_box_set_selection_mode(box, mode)
    }

    @flow_box_get_selection_mode(GtkFlowBox* box) GtkSelectionMode? {
        @return gtk_flow_box_get_selection_mode(box)
    }

    // Unimplemented: gboolean
    //(*GtkFlowBoxFilterFunc) (GtkFlowBoxChild *child,
    //                         gpointer user_data);

    @flow_box_set_filter_func(GtkFlowBox* box, GtkFlowBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_flow_box_set_filter_func(box,filter_func,user_data, destroy)
    }

    @flow_box_invalidate_filter(GtkFlowBox* box) void {
        @gtk_flow_box_invalidate_filter(box)
    }

    // Unimplemented: gint
    //(*GtkFlowBoxSortFunc) (GtkFlowBoxChild *child1,
    //                       GtkFlowBoxChild *child2,
    //                       gpointer user_data);

    @flow_box_set_sort_func(GtkFlowBox* box, GtkFlowBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_flow_box_set_sort_func(box,sort_func,user_data,destroy)
    }

    @flow_box_invalidate_sort(GtkFlowBox* box) void {
        @gtk_flow_box_invalidate_sort(box)
    }

    // Unimplemented: GtkWidget *
    //(*GtkFlowBoxCreateWidgetFunc) (gpointer item,
    //                               gpointer user_data);

    @flow_box_bind_model(GtkFlowBox* box, GListModel *model, GtkFlowBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func) void {
        @gtk_flow_box_bind_model(box,model,create_widget_func,user_data, user_data_free_func)
    }

    @flow_box_child_new GtkWidget*? {
        @return gtk_flow_box_child_new()
    }

    @flow_box_child_get_index(GtkFlowBoxChild* child) gint? {
        @return gtk_flow_box_child_get_index(child)
    }

    @flow_box_child_is_selected(GtkFlowBoxChild* child) gboolean? {
        @return gtk_flow_box_child_is_selected(child)
    }

    @flow_box_child_changed(GtkFlowBoxChild* child) void {
        @gtk_flow_box_child_changed(child)
    }

    // ---
    // End of GtkFlowBox

    // GtkStack

    @stack_new GtkWidget*? {
        @return gtk_stack_new()
    }

    @stack_add_named(GtkStack* stack, GtkWidget* child, const gchar* name) void {
        @gtk_stack_add_named(stack,child, name)
    }

    @stack_add_titled(GtkStack* stack, GtkWidget* child, const gchar* name, const gchar* title) void {
        @gtk_stack_add_titled(stack,child,name, title)
    }

    @stack_get_child_by_name(GtkStack* stack, const gchar* name) GtkWidget*? {
        @return gtk_stack_get_child_by_name(stack, name)
    }

    @stack_set_visible_child(GtkStack* stack, GtkWidget* child) void {
        @gtk_stack_set_visible_child(stack, child)
    }

    @stack_get_visible_child(GtkStack* stack) GtkWidget*? {
        @return gtk_stack_get_visible_child(stack)
    }

    @stack_set_visible_child_name(GtkStack* stack, const gchar* name) void {
        @gtk_stack_set_visible_child_name(stack, name)
    }

    #const gchar* stack_get_visible_child_name(GtkStack* stack) {
        @return gtk_stack_get_visible_child_name(stack)
    }

    @stack_set_visible_child_full(GtkStack* stack, const gchar* name, GtkStackTransitionType transition) void {
        @gtk_stack_set_visible_child_full(stack,name, transition)
    }

    @stack_set_homogeneous(GtkStack* stack, gboolean homogeneous) void {
        @gtk_stack_set_homogeneous(stack, homogeneous)
    }

    @stack_get_homogeneous(GtkStack* stack) gboolean? {
        @return gtk_stack_get_homogeneous(stack)
    }

    @stack_set_hhomogeneous(GtkStack* stack, gboolean hhomogeneous) void {
        @gtk_stack_set_hhomogeneous(stack, hhomogeneous)
    }

    @stack_get_hhomogeneous(GtkStack* stack) gboolean? {
        @return gtk_stack_get_hhomogeneous(stack)
    }

    @stack_set_vhomogeneous(GtkStack* stack, gboolean vhomogeneous) void {
        @gtk_stack_set_vhomogeneous(stack, vhomogeneous)
    }

    @stack_get_vhomogeneous(GtkStack* stack) gboolean? {
        @return gtk_stack_get_vhomogeneous(stack)
    }

    @stack_set_transition_duration(GtkStack* stack, guint duration) void {
        @gtk_stack_set_transition_duration(stack, duration)
    }

    @stack_get_transition_duration(GtkStack* stack) guint? {
        @return gtk_stack_get_transition_duration(stack)
    }

    @stack_set_transition_type(GtkStack* stack, GtkStackTransitionType transition) void {
        @gtk_stack_set_transition_type(stack, transition)
    }

    @stack_get_transition_type(GtkStack* stack) GtkStackTransitionType? {
        @return gtk_stack_get_transition_type(stack)
    }

    @stack_get_transition_running(GtkStack* stack) gboolean? {
        @return gtk_stack_get_transition_running(stack)
    }

    @stack_get_interpolate_size(GtkStack* stack) gboolean? {
        @return gtk_stack_get_interpolate_size(stack)
    }

    @stack_set_interpolate_size(GtkStack* stack, gboolean interpolate_size) void {
        @gtk_stack_set_interpolate_size(stack, interpolate_size)
    }

    // ---
    // End of GtkStack

    // GtkStackSwitcher

    @stack_switcher_new GtkWidget*? {
        @return gtk_stack_switcher_new()
    }

    @stack_switcher_set_stack(GtkStackSwitcher* switcher, GtkStack* stack) void {
        @gtk_stack_switcher_set_stack(switcher, stack)
    }

    @stack_switcher_get_stack(GtkStackSwitcher* switcher) GtkStack*? {
        @return gtk_stack_switcher_get_stack(switcher)
    }

    // ---
    // End of GtkStackSwitcher

    // GtkStackSidebar

    @stack_sidebar_new GtkWidget*? {
        @return gtk_stack_sidebar_new()
    }

    @stack_sidebar_set_stack(GtkStackSidebar* sidebar, GtkStack* stack) void {
        @gtk_stack_sidebar_set_stack(sidebar, stack)
    }

    @stack_sidebar_get_stack(GtkStackSidebar* sidebar) GtkStack*? {
        @return gtk_stack_sidebar_get_stack(sidebar)
    }

    // ---
    // End of GtkStackSidebar

    // GtkActionBar

    @action_bar_new GtkWidget*? {
        @return gtk_action_bar_new()
    }

    @action_bar_pack_start(GtkActionBar* action_bar, GtkWidget* child) void {
        @gtk_action_bar_pack_start(action_bar, child)
    }

    @action_bar_pack_end(GtkActionBar* action_bar, GtkWidget* child) void {
        @gtk_action_bar_pack_end(action_bar, child)
    }

    @action_bar_get_center_widget(GtkActionBar* action_bar) GtkWidget*? {
        @return gtk_action_bar_get_center_widget(action_bar)
    }

    @action_bar_set_center_widget(GtkActionBar* action_bar, GtkWidget* center_widget) void {
        @gtk_action_bar_set_center_widget(action_bar, center_widget)
    }

    // ---
    // End of GtkActionBar

    // GtkHeaderBar

    @header_bar_new GtkWidget*? {
        @return gtk_header_bar_new()
    }

    @header_bar_set_title(GtkHeaderBar* bar, const gchar* title) void {
        @gtk_header_bar_set_title(bar, title)
    }

    #const gchar* header_bar_get_title(GtkHeaderBar* bar) {
        @return gtk_header_bar_get_title(bar)
    }

    @header_bar_set_subtitle(GtkHeaderBar* bar, const gchar* subtitle) void {
        @gtk_header_bar_set_subtitle(bar, subtitle)
    }

    #const gchar* header_bar_get_subtitle(GtkHeaderBar* bar) {
        @return gtk_header_bar_get_subtitle(bar)
    }

    @header_bar_set_has_subtitle(GtkHeaderBar* bar, gboolean setting) void {
        @gtk_header_bar_set_has_subtitle(bar, setting)
    }

    @header_bar_get_has_subtitle(GtkHeaderBar* bar) gboolean? {
        @return gtk_header_bar_get_has_subtitle(bar)
    }

    @header_bar_set_custom_title(GtkHeaderBar* bar, GtkWidget* title_widget) void {
        @gtk_header_bar_set_custom_title(bar, title_widget)
    }

    @header_bar_get_custom_title(GtkHeaderBar* bar) GtkWidget*? {
        @return gtk_header_bar_get_custom_title(bar)
    }

    @header_bar_pack_start(GtkHeaderBar* bar, GtkWidget* child) void {
        @gtk_header_bar_pack_start(bar, child)
    }

    @header_bar_pack_end(GtkHeaderBar* bar, GtkWidget* child) void {
        @gtk_header_bar_pack_end(bar, child)
    }

    @header_bar_set_show_close_button(GtkHeaderBar* bar, gboolean setting) void {
        @gtk_header_bar_set_show_close_button(bar, setting)
    }

    @header_bar_get_show_close_button(GtkHeaderBar* bar) gboolean? {
        @return gtk_header_bar_get_show_close_button(bar)
    }

    @header_bar_set_decoration_layout(GtkHeaderBar* bar, const gchar* layout) void {
        @gtk_header_bar_set_decoration_layout(bar, layout)
    }

    #const gchar* header_bar_get_decoration_layout(GtkHeaderBar* bar) {
        @return gtk_header_bar_get_decoration_layout(bar)
    }

    // ---
    // End of GtkHeaderBar

    // GtkOverlay

    @overlay_new GtkWidget*? {
        @return gtk_overlay_new()
    }

    @overlay_add_overlay(GtkOverlay* overlay, GtkWidget* widget) void {
        @gtk_overlay_add_overlay(overlay, widget)
    }

    @overlay_reorder_overlay(GtkOverlay* overlay, GtkWidget* child, int index_) void {
        @gtk_overlay_reorder_overlay(overlay,child, index_)
    }

    @overlay_get_overlay_pass_through(GtkOverlay* overlay, GtkWidget* widget) gboolean? {
        @return gtk_overlay_get_overlay_pass_through(overlay, widget)
    }

    @overlay_set_overlay_pass_through(GtkOverlay* overlay, GtkWidget* widget, gboolean pass_through) void {
        @gtk_overlay_set_overlay_pass_through(overlay,widget, pass_through)
    }

    // ---
    // End of GtkOverlay

    // GtkButtonBox

    @button_box_new(GtkOrientation orientation) GtkWidget*? {
        @return gtk_button_box_new(orientation)
    }

    @button_box_get_layout(GtkButtonBox* widget) GtkButtonBoxStyle? {
        @return gtk_button_box_get_layout(widget)
    }

    @button_box_get_child_secondary(GtkButtonBox* widget, GtkWidget* child) gboolean? {
        @return gtk_button_box_get_child_secondary(widget, child)
    }

    @button_box_get_child_non_homogeneous(GtkButtonBox* widget, GtkWidget* child) gboolean? {
        @return gtk_button_box_get_child_non_homogeneous(widget, child)
    }

    @button_box_set_layout(GtkButtonBox* widget, GtkButtonBoxStyle layout_style) void {
        @gtk_button_box_set_layout(widget, layout_style)
    }

    @button_box_set_child_secondary(GtkButtonBox* widget, GtkWidget* child, gboolean is_secondary) void {
        @gtk_button_box_set_child_secondary(widget,child, is_secondary)
    }

    @button_box_set_child_non_homogeneous(GtkButtonBox* widget, GtkWidget* child, gboolean non_homogeneous) void {
        @gtk_button_box_set_child_non_homogeneous(widget,child, non_homogeneous)
    }

    // ---
    // End of GtkButtonBox

    // GtkPaned

    @paned_new(GtkOrientation orientation) GtkWidget*? {
        @return gtk_paned_new(orientation)
    }

    @paned_add1(GtkPaned* paned, GtkWidget* child) void {
        @gtk_paned_add1(paned, child)
    }

    @paned_add2(GtkPaned* paned, GtkWidget* child) void {
        @gtk_paned_add2(paned, child)
    }

    @paned_pack1(GtkPaned* paned, GtkWidget* child, gboolean resize, gboolean shrink) void {
        @gtk_paned_pack1(paned,child,resize, shrink)
    }

    @paned_pack2(GtkPaned* paned, GtkWidget* child, gboolean resize, gboolean shrink) void {
        @gtk_paned_pack2(paned,child,resize, shrink)
    }

    @paned_get_child1(GtkPaned* paned) GtkWidget*? {
        @return gtk_paned_get_child1(paned)
    }

    @paned_get_child2(GtkPaned* paned) GtkWidget*? {
        @return gtk_paned_get_child2(paned)
    }

    @paned_set_position(GtkPaned* paned, gint position) void {
        @gtk_paned_set_position(paned, position)
    }

    @paned_get_position(GtkPaned* paned) gint? {
        @return gtk_paned_get_position(paned)
    }

    @paned_get_handle_window(GtkPaned* paned) GdkWindow*? {
        @return gtk_paned_get_handle_window(paned)
    }

    @paned_set_wide_handle(GtkPaned* paned, gboolean wide) void {
        @gtk_paned_set_wide_handle(paned, wide)
    }

    @paned_get_wide_handle(GtkPaned* paned) gboolean? {
        @return gtk_paned_get_wide_handle(paned)
    }

    // ---
    // End of GtkPaned

    // GtkLayout

    @layout_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment) GtkWidget*? {
        @return gtk_layout_new(hadjustment, vadjustment)
    }

    @layout_put(GtkLayout* layout, GtkWidget* child_widget, gint x, gint y) void {
        @gtk_layout_put(layout,child_widget,x, y)
    }

    @layout_move(GtkLayout* layout, GtkWidget* child_widget, gint x, gint y) void {
        @gtk_layout_move(layout,child_widget,x, y)
    }

    @layout_set_size(GtkLayout* layout, guint width, guint height) void {
        @gtk_layout_set_size(layout,width, height)
    }

    @layout_get_size(GtkLayout* layout, guint* width, guint* height) void {
        @gtk_layout_get_size(layout,width, height)
    }

    // Deprecated: @gtk_layout_get_hadjustment(GtkLayout *layout)

    // Deprecated: @gtk_layout_get_vadjustment(GtkLayout *layout)

    // Deprecated: @gtk_layout_set_hadjustment(GtkLayout *layout, GtkAdjustment *adjustment)

    // Deprecated: @gtk_layout_set_vadjustment(GtkLayout *layout, GtkAdjustment *adjustment)

    @layout_get_bin_window(GtkLayout* layout) GdkWindow*? {
        @return gtk_layout_get_bin_window(layout)
    }

    // ---
    // End of GtkLayout

    // GtkNotebook

    @notebook_new GtkWidget*? {
        @return gtk_notebook_new()
    }

    @notebook_append_page(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label) gint? {
        @return gtk_notebook_append_page(notebook,child, tab_label)
    }

    @notebook_append_page_menu(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label, GtkWidget* menu_label) gint? {
        @return gtk_notebook_append_page_menu(notebook,child,tab_label, menu_label)
    }

    @notebook_prepend_page(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label) gint? {
        @return gtk_notebook_prepend_page(notebook,child, tab_label)
    }

    @notebook_prepend_page_menu(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label, GtkWidget* menu_label) gint? {
        @return gtk_notebook_prepend_page_menu(notebook,child,tab_label, menu_label)
    }

    @notebook_insert_page(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label, gint position) gint? {
        @return gtk_notebook_insert_page(notebook,child,tab_label, position)
    }

    @notebook_insert_page_menu(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label, GtkWidget* menu_label, gint position) gint? {
        @return gtk_notebook_insert_page_menu(notebook,child,tab_label,menu_label, position)
    }

    @notebook_remove_page(GtkNotebook* notebook, gint page_num) void {
        @gtk_notebook_remove_page(notebook, page_num)
    }

    @notebook_detach_tab(GtkNotebook* notebook, GtkWidget* child) void {
        @gtk_notebook_detach_tab(notebook, child)
    }

    @notebook_page_num(GtkNotebook* notebook, GtkWidget* child) gint? {
        @return gtk_notebook_page_num(notebook, child)
    }

    @notebook_next_page(GtkNotebook* notebook) void {
        @gtk_notebook_next_page(notebook)
    }

    @notebook_prev_page(GtkNotebook* notebook) void {
        @gtk_notebook_prev_page(notebook)
    }

    @notebook_reorder_child(GtkNotebook* notebook, GtkWidget* child, gint position) void {
        @gtk_notebook_reorder_child(notebook,child, position)
    }

    @notebook_set_tab_pos(GtkNotebook* notebook, GtkPositionType pos) void {
        @gtk_notebook_set_tab_pos(notebook, pos)
    }

    @notebook_set_show_tabs(GtkNotebook* notebook, gboolean show_tabs) void {
        @gtk_notebook_set_show_tabs(notebook, show_tabs)
    }

    @notebook_set_show_border(GtkNotebook* notebook, gboolean show_border) void {
        @gtk_notebook_set_show_border(notebook, show_border)
    }

    @notebook_set_scrollable(GtkNotebook* notebook, gboolean scrollable) void {
        @gtk_notebook_set_scrollable(notebook, scrollable)
    }

    @notebook_popup_enable(GtkNotebook* notebook) void {
        @gtk_notebook_popup_enable(notebook)
    }

    @notebook_popup_disable(GtkNotebook* notebook) void {
        @gtk_notebook_popup_disable(notebook)
    }

    @notebook_get_current_page(GtkNotebook* notebook) gint? {
        @return gtk_notebook_get_current_page(notebook)
    }

    @notebook_get_menu_label(GtkNotebook* notebook, GtkWidget* child) GtkWidget*? {
        @return gtk_notebook_get_menu_label(notebook, child)
    }

    @notebook_get_nth_page(GtkNotebook* notebook, gint page_num) GtkWidget*? {
        @return gtk_notebook_get_nth_page(notebook, page_num)
    }

    @notebook_get_n_pages(GtkNotebook* notebook) gint? {
        @return gtk_notebook_get_n_pages(notebook)
    }

    @notebook_get_tab_label(GtkNotebook* notebook, GtkWidget* child) GtkWidget*? {
        @return gtk_notebook_get_tab_label(notebook, child)
    }

    @notebook_set_menu_label(GtkNotebook* notebook, GtkWidget* child, GtkWidget* menu_label) void {
        @gtk_notebook_set_menu_label(notebook,child, menu_label)
    }

    @notebook_set_menu_label_text(GtkNotebook* notebook, GtkWidget* child, const gchar* menu_text) void {
        @gtk_notebook_set_menu_label_text(notebook,child, menu_text)
    }

    @notebook_set_tab_label(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label) void {
        @gtk_notebook_set_tab_label(notebook,child, tab_label)
    }

    @notebook_set_tab_label_text(GtkNotebook* notebook, GtkWidget* child, const gchar* tab_text) void {
        @gtk_notebook_set_tab_label_text(notebook,child, tab_text)
    }

    @notebook_set_tab_reorderable(GtkNotebook* notebook, GtkWidget* child, gboolean reorderable) void {
        @gtk_notebook_set_tab_reorderable(notebook,child, reorderable)
    }

    @notebook_set_tab_detachable(GtkNotebook* notebook, GtkWidget* child, gboolean detachable) void {
        @gtk_notebook_set_tab_detachable(notebook,child, detachable)
    }

    #const gchar* notebook_get_menu_label_text(GtkNotebook* notebook, GtkWidget* child) {
        @return gtk_notebook_get_menu_label_text(notebook, child)
    }

    @notebook_get_scrollable(GtkNotebook* notebook) gboolean? {
        @return gtk_notebook_get_scrollable(notebook)
    }

    @notebook_get_show_border(GtkNotebook* notebook) gboolean? {
        @return gtk_notebook_get_show_border(notebook)
    }

    @notebook_get_show_tabs(GtkNotebook* notebook) gboolean? {
        @return gtk_notebook_get_show_tabs(notebook)
    }

    #const gchar* notebook_get_tab_label_text(GtkNotebook* notebook, GtkWidget* child) {
        @return gtk_notebook_get_tab_label_text(notebook, child)
    }

    @notebook_get_tab_pos(GtkNotebook* notebook) GtkPositionType? {
        @return gtk_notebook_get_tab_pos(notebook)
    }

    @notebook_get_tab_reorderable(GtkNotebook* notebook, GtkWidget* child) gboolean? {
        @return gtk_notebook_get_tab_reorderable(notebook, child)
    }

    @notebook_get_tab_detachable(GtkNotebook* notebook, GtkWidget* child) gboolean? {
        @return gtk_notebook_get_tab_detachable(notebook, child)
    }

    // Deprecated: @notebook_get_tab_hborder(GtkNotebook *notebook)
    // Deprecated: @notebook_get_tab_vborder(GtkNotebook *notebook)

    @notebook_set_current_page(GtkNotebook* notebook, gint page_num) void {
        @gtk_notebook_set_current_page(notebook, page_num)
    }

    @notebook_set_group_name(GtkNotebook* notebook, const gchar* group_name) void {
        @gtk_notebook_set_group_name(notebook, group_name)
    }

    #const gchar* notebook_get_group_name(GtkNotebook* notebook) {
        @return gtk_notebook_get_group_name(notebook)
    }

    @notebook_set_action_widget(GtkNotebook* notebook, GtkWidget* widget, GtkPackType pack_type) void {
        @gtk_notebook_set_action_widget(notebook,widget, pack_type)
    }

    @notebook_get_action_widget(GtkNotebook* notebook, GtkPackType pack_type) GtkWidget*? {
        @return gtk_notebook_get_action_widget(notebook, pack_type)
    }

    // ---
    // End of GtkNotebook

    // GtkExpander

    @expander_new(const gchar* label) GtkWidget*? {
        @return gtk_expander_new(label)
    }

    @expander_new_with_mnemonic(const gchar* label) GtkWidget*? {
        @return gtk_expander_new_with_mnemonic(label)
    }

    @expander_set_expanded(GtkExpander* expander, gboolean expanded) void {
        @gtk_expander_set_expanded(expander, expanded)
    }

    @expander_get_expanded(GtkExpander* expander) gboolean? {
        @return gtk_expander_get_expanded(expander)
    }

    // Deprecated: @expander_set_spacing(GtkExpander *expander,
    //                          gint spacing)

    // Deprecated: @expander_get_spacing(GtkExpander *expander)

    @expander_set_label(GtkExpander* expander, const gchar* label) void {
        @gtk_expander_set_label(expander, label)
    }

    #const gchar* expander_get_label(GtkExpander* expander) {
        @return gtk_expander_get_label(expander)
    }

    @expander_set_use_underline(GtkExpander* expander, gboolean use_underline) void {
        @gtk_expander_set_use_underline(expander, use_underline)
    }

    @expander_get_use_underline(GtkExpander* expander) gboolean? {
        @return gtk_expander_get_use_underline(expander)
    }

    @expander_set_use_markup(GtkExpander* expander, gboolean use_markup) void {
        @gtk_expander_set_use_markup(expander, use_markup)
    }

    @expander_get_use_markup(GtkExpander* expander) gboolean? {
        @return gtk_expander_get_use_markup(expander)
    }

    @expander_set_label_widget(GtkExpander* expander, GtkWidget* label_widget) void {
        @gtk_expander_set_label_widget(expander, label_widget)
    }

    @expander_get_label_widget(GtkExpander* expander) GtkWidget*? {
        @return gtk_expander_get_label_widget(expander)
    }

    @expander_set_label_fill(GtkExpander* expander, gboolean label_fill) void {
        @gtk_expander_set_label_fill(expander, label_fill)
    }

    @expander_get_label_fill(GtkExpander* expander) gboolean? {
        @return gtk_expander_get_label_fill(expander)
    }

    @expander_set_resize_toplevel(GtkExpander* expander, gboolean resize_toplevel) void {
        @gtk_expander_set_resize_toplevel(expander, resize_toplevel)
    }

    @expander_get_resize_toplevel(GtkExpander* expander) gboolean? {
        @return gtk_expander_get_resize_toplevel(expander)
    }

    // ---
    // End of GtkExpander

    // GtkOrientable

    @orientable_get_orientation(GtkOrientable* orientable) GtkOrientation? {
        @return gtk_orientable_get_orientation(orientable)
    }

    @orientable_set_orientation(GtkOrientable* orientable, GtkOrientation orientation) void {
        @gtk_orientable_set_orientation(orientable, orientation)
    }

    // ---
    // End of GtkOrientable

    // GtkAspectFrame

    @aspect_frame_new(const gchar* label, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child) GtkWidget*? {
        @return gtk_aspect_frame_new(label,xalign,yalign,ratio, obey_child)
    }

    @aspect_frame_set(GtkAspectFrame* aspect_frame, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child) void {
        @gtk_aspect_frame_set(aspect_frame,xalign,yalign,ratio, obey_child)
    }

    // ---
    // End of GtkAspectFrame

    // GtkFixed

    @fixed_new GtkWidget*? {
        @return gtk_fixed_new()
    }

    @fixed_put(GtkFixed* fixed, GtkWidget* widget, gint x, gint y) void {
        @gtk_fixed_put(fixed,widget,x, y)
    }

    @fixed_move(GtkFixed* fixed, GtkWidget* widget, gint x, gint y) void {
        @gtk_fixed_move(fixed,widget,x, y)
    }

    // ---
    // End of GtkFixed

    // GtkLabel

    @label_new(const gchar* str) GtkWidget*? {
        @return gtk_label_new(str)
    }

    @label_set_text(GtkLabel* label, const gchar* str) void {
        @gtk_label_set_text(label, str)
    }

    @label_set_attributes(GtkLabel* label, PangoAttrList* attrs) void {
        @gtk_label_set_attributes(label, attrs)
    }

    @label_set_markup(GtkLabel* label, const gchar* str) void {
        @gtk_label_set_markup(label, str)
    }

    @label_set_markup_with_mnemonic(GtkLabel* label, const gchar* str) void {
        @gtk_label_set_markup_with_mnemonic(label, str)
    }

    @label_set_pattern(GtkLabel* label, const gchar* pattern) void {
        @gtk_label_set_pattern(label, pattern)
    }

    @label_set_justify(GtkLabel* label, GtkJustification jtype) void {
        @gtk_label_set_justify(label, jtype)
    }

    @label_set_xalign(GtkLabel* label, gfloat xalign) void {
        @gtk_label_set_xalign(label, xalign)
    }

    @label_set_yalign(GtkLabel* label, gfloat yalign) void {
        @gtk_label_set_yalign(label, yalign)
    }

    @label_set_ellipsize(GtkLabel* label, PangoEllipsizeMode mode) void {
        @gtk_label_set_ellipsize(label, mode)
    }

    @label_set_width_chars(GtkLabel* label, gint n_chars) void {
        @gtk_label_set_width_chars(label, n_chars)
    }

    @label_set_max_width_chars(GtkLabel* label, gint n_chars) void {
        @gtk_label_set_max_width_chars(label, n_chars)
    }

    @label_set_line_wrap(GtkLabel* label, gboolean wrap) void {
        @gtk_label_set_line_wrap(label, wrap)
    }

    @label_set_line_wrap_mode(GtkLabel* label, PangoWrapMode wrap_mode) void {
        @gtk_label_set_line_wrap_mode(label, wrap_mode)
    }

    @label_set_lines(GtkLabel* label, gint lines) void {
        @gtk_label_set_lines(label, lines)
    }

    @label_get_layout_offsets(GtkLabel* label, gint* x, gint* y) void {
        @gtk_label_get_layout_offsets(label,x, y)
    }

    @label_get_mnemonic_keyval(GtkLabel* label) guint? {
        @return gtk_label_get_mnemonic_keyval(label)
    }

    @label_get_selectable(GtkLabel* label) gboolean? {
        @return gtk_label_get_selectable(label)
    }

    #const gchar* label_get_text(GtkLabel* label) {
        @return gtk_label_get_text(label)
    }

    @label_new_with_mnemonic(const gchar* str) GtkWidget*? {
        @return gtk_label_new_with_mnemonic(str)
    }

    @label_select_region(GtkLabel* label, gint start_offset, gint end_offset) void {
        @gtk_label_select_region(label,start_offset, end_offset)
    }

    @label_set_mnemonic_widget(GtkLabel* label, GtkWidget* widget) void {
        @gtk_label_set_mnemonic_widget(label, widget)
    }

    @label_set_selectable(GtkLabel* label, gboolean setting) void {
        @gtk_label_set_selectable(label, setting)
    }

    @label_set_text_with_mnemonic(GtkLabel* label, const gchar* str) void {
        @gtk_label_set_text_with_mnemonic(label, str)
    }

    @label_get_attributes(GtkLabel* label) PangoAttrList*? {
        @return gtk_label_get_attributes(label)
    }

    @label_get_justify(GtkLabel* label) GtkJustification? {
        @return gtk_label_get_justify(label)
    }

    @label_get_xalign(GtkLabel* label) gfloat? {
        @return gtk_label_get_xalign(label)
    }

    @label_get_yalign(GtkLabel* label) gfloat? {
        @return gtk_label_get_yalign(label)
    }

    @label_get_ellipsize(GtkLabel* label) PangoEllipsizeMode? {
        @return gtk_label_get_ellipsize(label)
    }

    @label_get_width_chars(GtkLabel* label) gint? {
        @return gtk_label_get_width_chars(label)
    }

    @label_get_max_width_chars(GtkLabel* label) gint? {
        @return gtk_label_get_max_width_chars(label)
    }

    #const gchar* label_get_label(GtkLabel* label) {
        @return gtk_label_get_label(label)
    }

    @label_get_layout(GtkLabel* label) PangoLayout*? {
        @return gtk_label_get_layout(label)
    }

    @label_get_line_wrap(GtkLabel* label) gboolean? {
        @return gtk_label_get_line_wrap(label)
    }

    @label_get_line_wrap_mode(GtkLabel* label) PangoWrapMode? {
        @return gtk_label_get_line_wrap_mode(label)
    }

    @label_get_lines(GtkLabel* label) gint? {
        @return gtk_label_get_lines(label)
    }

    @label_get_mnemonic_widget(GtkLabel* label) GtkWidget*? {
        @return gtk_label_get_mnemonic_widget(label)
    }

    @label_get_selection_bounds(GtkLabel* label, gint* start, gint* end) gboolean? {
        @return gtk_label_get_selection_bounds(label,start, end)
    }

    @label_get_use_markup(GtkLabel* label) gboolean? {
        @return gtk_label_get_use_markup(label)
    }

    @label_get_use_underline(GtkLabel* label) gboolean? {
        @return gtk_label_get_use_underline(label)
    }

    @label_get_single_line_mode(GtkLabel* label) gboolean? {
        @return gtk_label_get_single_line_mode(label)
    }

    @label_get_angle(GtkLabel* label) gdouble? {
        @return gtk_label_get_angle(label)
    }

    @label_set_label(GtkLabel* label, const gchar* str) void {
        @gtk_label_set_label(label, str)
    }

    @label_set_use_markup(GtkLabel* label, gboolean setting) void {
        @gtk_label_set_use_markup(label, setting)
    }

    @label_set_use_underline(GtkLabel* label, gboolean setting) void {
        @gtk_label_set_use_underline(label, setting)
    }

    @label_set_single_line_mode(GtkLabel* label, gboolean single_line_mode) void {
        @gtk_label_set_single_line_mode(label, single_line_mode)
    }

    @label_set_angle(GtkLabel* label, gdouble angle) void {
        @gtk_label_set_angle(label, angle)
    }

    #const gchar* label_get_current_uri(GtkLabel* label) {
        @return gtk_label_get_current_uri(label)
    }

    @label_set_track_visited_links(GtkLabel* label, gboolean track_links) void {
        @gtk_label_set_track_visited_links(label, track_links)
    }

    @label_get_track_visited_links(GtkLabel* label) gboolean? {
        @return gtk_label_get_track_visited_links(label)
    }

    // ---
    // End of GtkLabel

    // GtkImage

    // Deprecated: @image_get_icon_set(GtkImage *image,
    //                        GtkIconSet **icon_set,
    //                        GtkIconSize *size)

    @image_get_pixbuf(GtkImage* image) GdkPixbuf*? {
        @return gtk_image_get_pixbuf(image)
    }

    // Deprecated: @image_get_stock(GtkImage *image,
    //                     gchar **stock_id,
    //                     GtkIconSize *size)

    @image_get_animation(GtkImage* image) GdkPixbufAnimation*? {
        @return gtk_image_get_animation(image)
    }

    @image_get_icon_name(GtkImage* image, const gchar** icon_name, GtkIconSize* size) void {
        @gtk_image_get_icon_name(image,icon_name, size)
    }

    @image_get_gicon(GtkImage* image, GIcon** gicon, GtkIconSize* size) void {
        @gtk_image_get_gicon(image,gicon, size)
    }

    @image_get_storage_type(GtkImage* image) GtkImageType? {
        @return gtk_image_get_storage_type(image)
    }

    @image_new_from_file(const gchar* filename) GtkWidget*? {
        @return gtk_image_new_from_file(filename)
    }

    // Deprecated: @image_new_from_icon_set(GtkIconSet *icon_set,
    //                             GtkIconSize size)

    @image_new_from_pixbuf(GdkPixbuf* pixbuf) GtkWidget*? {
        @return gtk_image_new_from_pixbuf(pixbuf)
    }

    // Deprecated: @gtk_image_new_from_stock(const gchar *stock_id,
    //                          GtkIconSize size)

    @image_new_from_animation(GdkPixbufAnimation* animation) GtkWidget*? {
        @return gtk_image_new_from_animation(animation)
    }

    @image_new_from_icon_name(const gchar* icon_name, GtkIconSize size) GtkWidget*? {
        @return gtk_image_new_from_icon_name(icon_name, size)
    }

    @image_new_from_gicon(GIcon* icon, GtkIconSize size) GtkWidget*? {
        @return gtk_image_new_from_gicon(icon, size)
    }

    @image_new_from_resource(const gchar* resource_path) GtkWidget*? {
        @return gtk_image_new_from_resource(resource_path)
    }

    @image_new_from_surface(cairo_surface_t* surface) GtkWidget*? {
        @return gtk_image_new_from_surface(surface)
    }

    @image_set_from_file(GtkImage* image, const gchar* filename) void {
        @gtk_image_set_from_file(image, filename)
    }

    // Deprecated: @image_set_from_icon_set(GtkImage *image,
    //                             GtkIconSet *icon_set,
    //                             GtkIconSize size)

    @image_set_from_pixbuf(GtkImage* image, GdkPixbuf* pixbuf) void {
        @gtk_image_set_from_pixbuf(image, pixbuf)
    }

    // Deprecated: @gtk_image_set_from_stock(GtkImage *image,
    //                          const gchar *stock_id,
    //                          GtkIconSize size)

    @image_set_from_animation(GtkImage* image, GdkPixbufAnimation* animation) void {
        @gtk_image_set_from_animation(image, animation)
    }

    @image_set_from_icon_name(GtkImage* image, const gchar* icon_name, GtkIconSize size) void {
        @gtk_image_set_from_icon_name(image,icon_name, size)
    }

    @image_set_from_gicon(GtkImage* image, GIcon* icon, GtkIconSize size) void {
        @gtk_image_set_from_gicon(image,icon, size)
    }

    @image_set_from_resource(GtkImage* image, const gchar* resource_path) void {
        @gtk_image_set_from_resource(image, resource_path)
    }

    @image_set_from_surface(GtkImage* image, cairo_surface_t* surface) void {
        @gtk_image_set_from_surface(image, surface)
    }

    @image_clear(GtkImage* image) void {
        @gtk_image_clear(image)
    }

    @image_new GtkWidget*? {
        @return gtk_image_new()
    }

    @image_set_pixel_size(GtkImage* image, gint pixel_size) void {
        @gtk_image_set_pixel_size(image, pixel_size)
    }

    @image_get_pixel_size(GtkImage* image) gint? {
        @return gtk_image_get_pixel_size(image)
    }

    // ---
    // End of GtkImage

    // GtkSpinner

    @spinner_new GtkWidget*? {
        @return gtk_spinner_new()
    }

    @spinner_start(GtkSpinner* spinner) void {
        @gtk_spinner_start(spinner)
    }

    @spinner_stop(GtkSpinner* spinner) void {
        @gtk_spinner_stop(spinner)
    }

    // ---
    // End of GtkSpinner

    // GtkInfoBar

    @info_bar_new GtkWidget*? {
        @return gtk_info_bar_new()
    }

    #template <typename... ID>
    @info_bar_new_with_buttons(const gchar* first_button_text, ID... ids) GtkWidget*? {
        @return (gtk_info_bar_new_with_buttons(first_button_text,ids), ...)
    }

    @info_bar_add_action_widget(GtkInfoBar* info_bar, GtkWidget* child, gint response_id) void {
        @gtk_info_bar_add_action_widget(info_bar,child, response_id)
    }

    @info_bar_add_button(GtkInfoBar* info_bar, const gchar* button_text, gint response_id) GtkWidget*? {
        @return gtk_info_bar_add_button(info_bar,button_text, response_id)
    }

    #template <typename... ID>
    @info_bar_add_buttons(GtkInfoBar* info_bar, const gchar* first_button_text, ID... ids) void {
        @(gtk_info_bar_add_buttons(info_bar,first_button_text,ids), ...)
    }

    @info_bar_set_response_sensitive(GtkInfoBar* info_bar, gint response_id, gboolean setting) void {
        @gtk_info_bar_set_response_sensitive(info_bar,response_id, setting)
    }

    @info_bar_set_default_response(GtkInfoBar* info_bar, gint response_id) void {
        @gtk_info_bar_set_default_response(info_bar, response_id)
    }

    @info_bar_response(GtkInfoBar* info_bar, gint response_id) void {
        @gtk_info_bar_response(info_bar, response_id)
    }

    @info_bar_set_message_type(GtkInfoBar* info_bar, GtkMessageType message_type) void {
        @gtk_info_bar_set_message_type(info_bar, message_type)
    }

    @info_bar_get_message_type(GtkInfoBar* info_bar) GtkMessageType? {
        @return gtk_info_bar_get_message_type(info_bar)
    }

    @info_bar_get_action_area(GtkInfoBar* info_bar) GtkWidget*? {
        @return gtk_info_bar_get_action_area(info_bar)
    }

    @info_bar_get_content_area(GtkInfoBar* info_bar) GtkWidget*? {
        @return gtk_info_bar_get_content_area(info_bar)
    }

    @info_bar_get_show_close_button(GtkInfoBar* info_bar) gboolean? {
        @return gtk_info_bar_get_show_close_button(info_bar)
    }

    @info_bar_set_show_close_button(GtkInfoBar* info_bar, gboolean setting) void {
        @gtk_info_bar_set_show_close_button(info_bar, setting)
    }

    @info_bar_get_revealed(GtkInfoBar* info_bar) gboolean? {
        @return gtk_info_bar_get_revealed(info_bar)
    }

    @info_bar_set_revealed(GtkInfoBar* info_bar, gboolean revealed) void {
        @gtk_info_bar_set_revealed(info_bar, revealed)
    }

    // ---
    // End of GtkInfoBar

    // GtkProgressBar

    @progress_bar_new GtkWidget*? {
        @return gtk_progress_bar_new()
    }

    @progress_bar_pulse(GtkProgressBar* pbar) void {
        @gtk_progress_bar_pulse(pbar)
    }

    @progress_bar_set_fraction(GtkProgressBar* pbar, gdouble fraction) void {
        @gtk_progress_bar_set_fraction(pbar, fraction)
    }

    @progress_bar_get_fraction(GtkProgressBar* pbar) gdouble? {
        @return gtk_progress_bar_get_fraction(pbar)
    }

    @progress_bar_set_inverted(GtkProgressBar* pbar, gboolean inverted) void {
        @gtk_progress_bar_set_inverted(pbar, inverted)
    }

    @progress_bar_get_inverted(GtkProgressBar* pbar) gboolean? {
        @return gtk_progress_bar_get_inverted(pbar)
    }

    @progress_bar_set_show_text(GtkProgressBar* pbar, gboolean show_text) void {
        @gtk_progress_bar_set_show_text(pbar, show_text)
    }

    @progress_bar_get_show_text(GtkProgressBar* pbar) gboolean? {
        @return gtk_progress_bar_get_show_text(pbar)
    }

    @progress_bar_set_text(GtkProgressBar* pbar, const gchar* text) void {
        @gtk_progress_bar_set_text(pbar, text)
    }

    #const gchar* progress_bar_get_text(GtkProgressBar* pbar) {
        @return gtk_progress_bar_get_text(pbar)
    }

    @progress_bar_set_ellipsize(GtkProgressBar* pbar, PangoEllipsizeMode mode) void {
        @gtk_progress_bar_set_ellipsize(pbar, mode)
    }

    @progress_bar_get_ellipsize(GtkProgressBar* pbar) PangoEllipsizeMode? {
        @return gtk_progress_bar_get_ellipsize(pbar)
    }

    @progress_bar_set_pulse_step(GtkProgressBar* pbar, gdouble fraction) void {
        @gtk_progress_bar_set_pulse_step(pbar, fraction)
    }

    @progress_bar_get_pulse_step(GtkProgressBar* pbar) gdouble? {
        @return gtk_progress_bar_get_pulse_step(pbar)
    }

    // ---
    // End of GtkProgressBar

    // GtkLevelBar

    @level_bar_new GtkWidget*? {
        @return gtk_level_bar_new()
    }

    @level_bar_new_for_interval(gdouble min_value, gdouble max_value) GtkWidget*? {
        @return gtk_level_bar_new_for_interval(min_value, max_value)
    }

    @level_bar_set_mode(GtkLevelBar* self, GtkLevelBarMode mode) void {
        @gtk_level_bar_set_mode(self, mode)
    }

    @level_bar_get_mode(GtkLevelBar* self) GtkLevelBarMode? {
        @return gtk_level_bar_get_mode(self)
    }

    @level_bar_set_value(GtkLevelBar* self, gdouble value) void {
        @gtk_level_bar_set_value(self, value)
    }

    @level_bar_get_value(GtkLevelBar* self) gdouble? {
        @return gtk_level_bar_get_value(self)
    }

    @level_bar_set_min_value(GtkLevelBar* self, gdouble value) void {
        @gtk_level_bar_set_min_value(self, value)
    }

    @level_bar_get_min_value(GtkLevelBar* self) gdouble? {
        @return gtk_level_bar_get_min_value(self)
    }

    @level_bar_set_max_value(GtkLevelBar* self, gdouble value) void {
        @gtk_level_bar_set_max_value(self, value)
    }

    @level_bar_get_max_value(GtkLevelBar* self) gdouble? {
        @return gtk_level_bar_get_max_value(self)
    }

    @level_bar_set_inverted(GtkLevelBar* self, gdouble inverted) void {
        @gtk_level_bar_set_inverted(self, inverted)
    }

    @level_bar_get_inverted(GtkLevelBar* self) gboolean? {
        @return gtk_level_bar_get_inverted(self)
    }

    @level_bar_add_offset_value(GtkLevelBar* self, const gchar* name, gdouble value) void {
        @gtk_level_bar_add_offset_value(self,name, value)
    }

    @level_bar_remove_offset_value(GtkLevelBar* self, const gchar* name) void {
        @gtk_level_bar_remove_offset_value(self, name)
    }

    @level_bar_get_offset_value(GtkLevelBar* self, const gchar* name, gdouble* value) gboolean? {
        @return gtk_level_bar_get_offset_value(self,name, value)
    }

    // ---
    // End of GtkLevelBar

    // GtkStatusbar

    @statusbar_new GtkWidget*? {
        @return gtk_statusbar_new()
    }

    @statusbar_get_context_id(GtkStatusbar* statusbar, const gchar* context_description) guint? {
        @return gtk_statusbar_get_context_id(statusbar, context_description)
    }

    @statusbar_push(GtkStatusbar* statusbar, guint context_id, const gchar* text) guint? {
        @return gtk_statusbar_push(statusbar,context_id, text)
    }

    @statusbar_pop(GtkStatusbar* statusbar, guint context_id) void {
        @gtk_statusbar_pop(statusbar, context_id)
    }

    @statusbar_remove(GtkStatusbar* statusbar, guint context_id, guint message_id) void {
        @gtk_statusbar_remove(statusbar,context_id, message_id)
    }

    @statusbar_remove_all(GtkStatusbar* statusbar, guint context_id) void {
        @gtk_statusbar_remove_all(statusbar, context_id)
    }

    @statusbar_get_message_area(GtkStatusbar* statusbar) GtkWidget*? {
        @return gtk_statusbar_get_message_area(statusbar)
    }

    // ---
    // End of GtkStatusbar

    // GtkAccelLabel

    @accel_label_new(const gchar* str) GtkWidget*? {
        @return gtk_accel_label_new(str)
    }

    @accel_label_set_accel_closure(GtkAccelLabel* accel_label, GClosure* accel_closure) void {
        @gtk_accel_label_set_accel_closure(accel_label, accel_closure)
    }

    @accel_label_get_accel_widget(GtkAccelLabel* accel_label) GtkWidget*? {
        @return gtk_accel_label_get_accel_widget(accel_label)
    }

    @accel_label_set_accel_widget(GtkAccelLabel* accel_label, GtkWidget* accel_widget) void {
        @gtk_accel_label_set_accel_widget(accel_label, accel_widget)
    }

    @accel_label_get_accel_width(GtkAccelLabel* accel_label) guint? {
        @return gtk_accel_label_get_accel_width(accel_label)
    }

    @accel_label_set_accel(GtkAccelLabel* accel_label, guint accelerator_key, GdkModifierType accelerator_mods) void {
        @gtk_accel_label_set_accel(accel_label,accelerator_key, accelerator_mods)
    }

    @accel_label_get_accel(GtkAccelLabel* accel_label, guint* accelerator_key, GdkModifierType* accelerator_mods) void {
        @gtk_accel_label_get_accel(accel_label,accelerator_key, accelerator_mods)
    }

    @accel_label_refetch(GtkAccelLabel* accel_label) gboolean? {
        @return gtk_accel_label_refetch(accel_label)
    }

    // ---
    // End of GtkAccelLabel

    // GtkButton

    @button_new GtkWidget*? {
        @return gtk_button_new()
    }

    @button_new_with_label(const gchar* label) GtkWidget*? {
        @return gtk_button_new_with_label(label)
    }

    @button_new_with_mnemonic(const gchar* label) GtkWidget*? {
        @return gtk_button_new_with_mnemonic(label)
    }

    @button_new_from_icon_name(const gchar* icon_name, GtkIconSize size) GtkWidget*? {
        @return gtk_button_new_from_icon_name(icon_name, size)
    }

    // Deprecated: @button_new_from_stock(const gchar *stock_id)

    // Deprecated: @button_pressed(GtkButton *button)

    // Deprecated: @button_released(GtkButton *button)

    @button_clicked(GtkButton* button) void {
        @gtk_button_clicked(button)
    }

    // Deprecated: @button_enter(GtkButton *button)

    // Deprecated: @button_leave(GtkButton *button)

    @button_set_relief(GtkButton* button, GtkReliefStyle relief) void {
        @gtk_button_set_relief(button, relief)
    }

    @button_get_relief(GtkButton* button) GtkReliefStyle? {
        @return gtk_button_get_relief(button)
    }

    #const gchar* button_get_label(GtkButton* button) {
        @return gtk_button_get_label(button)
    }

    @button_set_label(GtkButton* button, const gchar* label) void {
        @gtk_button_set_label(button, label)
    }

    // Deprecated: @button_get_use_stock(GtkButton *button)

    // Deprecated: @button_set_use_stock(GtkButton *button,
    //                          gboolean use_stock)

    @button_get_use_underline(GtkButton* button) gboolean? {
        @return gtk_button_get_use_underline(button)
    }

    @button_set_use_underline(GtkButton* button, gboolean use_underline) void {
        @gtk_button_set_use_underline(button, use_underline)
    }

    // Deprecated: @button_set_focus_on_click(GtkButton *button,
    //                               gboolean focus_on_click)

    // Deprecated: @button_get_focus_on_click(GtkButton *button)

    // Deprecated: @button_set_alignment(GtkButton *button,
    //                          gfloat xalign,
    //                          gfloat yalign)

    // Deprecated: @button_get_alignment(GtkButton *button,
    //                          gfloat *xalign,
    //                          gfloat *yalign)

    @button_set_image(GtkButton* button, GtkWidget* image) void {
        @gtk_button_set_image(button, image)
    }

    @button_get_image(GtkButton* button) GtkWidget*? {
        @return gtk_button_get_image(button)
    }

    @button_set_image_position(GtkButton* button, GtkPositionType position) void {
        @gtk_button_set_image_position(button, position)
    }

    @button_get_image_position(GtkButton* button) GtkPositionType? {
        @return gtk_button_get_image_position(button)
    }

    @button_set_always_show_image(GtkButton* button, gboolean always_show) void {
        @gtk_button_set_always_show_image(button, always_show)
    }

    @button_get_always_show_image(GtkButton* button) gboolean? {
        @return gtk_button_get_always_show_image(button)
    }

    @button_get_event_window(GtkButton* button) GdkWindow*? {
        @return gtk_button_get_event_window(button)
    }

    // ---
    // End of GtkButton

    // GtkCheckButton

    @check_button_new GtkWidget*? {
        @return gtk_check_button_new()
    }

    @check_button_new_with_label(const gchar* label) GtkWidget*? {
        @return gtk_check_button_new_with_label(label)
    }

    @check_button_new_with_mnemonic(const gchar* label) GtkWidget*? {
        @return gtk_check_button_new_with_mnemonic(label)
    }

    // ---
    // End of GtkCheckButton

    // GtkRadioButton

    @radio_button_new(GSList* group) GtkWidget*? {
        @return gtk_radio_button_new(group)
    }

    @radio_button_new_from_widget(GtkRadioButton* radio_group_member) GtkWidget*? {
        @return gtk_radio_button_new_from_widget(radio_group_member)
    }

    @radio_button_new_with_label(GSList* group, const gchar* label) GtkWidget*? {
        @return gtk_radio_button_new_with_label(group, label)
    }

    @radio_button_new_with_label_from_widget(GtkRadioButton* radio_group_member, const gchar* label) GtkWidget*? {
        @return gtk_radio_button_new_with_label_from_widget(radio_group_member, label)
    }

    @radio_button_new_with_mnemonic(GSList* group, const gchar* label) GtkWidget*? {
        @return gtk_radio_button_new_with_mnemonic(group, label)
    }

    @radio_button_new_with_mnemonic_from_widget(GtkRadioButton* radio_group_member, const gchar* label) GtkWidget*? {
        @return gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member, label)
    }

    @radio_button_set_group(GtkRadioButton* radio_button, GSList* group) void {
        @gtk_radio_button_set_group(radio_button, group)
    }

    @radio_button_get_group(GtkRadioButton* radio_button) GSList*? {
        @return gtk_radio_button_get_group(radio_button)
    }

    @radio_button_join_group(GtkRadioButton* radio_button, GtkRadioButton* group_source) void {
        @gtk_radio_button_join_group(radio_button, group_source)
    }

    // ---
    // End of GtkRadioButton

    // GtkToggleButton

    @toggle_button_new GtkWidget*? {
        @return gtk_toggle_button_new()
    }

    @toggle_button_new_with_label(const gchar* label) GtkWidget*? {
        @return gtk_toggle_button_new_with_label(label)
    }

    @toggle_button_new_with_mnemonic(const gchar* label) GtkWidget*? {
        @return gtk_toggle_button_new_with_mnemonic(label)
    }

    @toggle_button_set_mode(GtkToggleButton* toggle_button, gboolean draw_indicator) void {
        @gtk_toggle_button_set_mode(toggle_button, draw_indicator)
    }

    @toggle_button_get_mode(GtkToggleButton* toggle_button) gboolean? {
        @return gtk_toggle_button_get_mode(toggle_button)
    }

    @toggle_button_toggled(GtkToggleButton* toggle_button) void {
        @gtk_toggle_button_toggled(toggle_button)
    }

    @toggle_button_get_active(GtkToggleButton* toggle_button) gboolean? {
        @return gtk_toggle_button_get_active(toggle_button)
    }

    @toggle_button_set_active(GtkToggleButton* toggle_button, gboolean is_active) void {
        @gtk_toggle_button_set_active(toggle_button, is_active)
    }

    @toggle_button_get_inconsistent(GtkToggleButton* toggle_button) gboolean? {
        @return gtk_toggle_button_get_inconsistent(toggle_button)
    }

    @toggle_button_set_inconsistent(GtkToggleButton* toggle_button, gboolean setting) void {
        @gtk_toggle_button_set_inconsistent(toggle_button, setting)
    }

    // ---
    // End of GtkToggleButton

    // GtkWidget
    @widget_show_all(GtkWidget* widget) void {
        @gtk_widget_show_all(widget)
    }
}