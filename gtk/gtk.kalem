// MIT License
//
// Copyright (c) 2021 Ferhat Geçdoğan All Rights Reserved.
// Distributed under the terms of the MIT License.
//
//
//
// GtkKa - Kalem wrapper around GTK3
// ---
// It's at early-stage, unstable, unusable,
// Many functions are not implemented yet.
//
// Some wrapper principles:
//  Using GtkWidget* with GTK_WINDOW macro instead of directly GtkWindow*
//


!required_flag("library")

#include {
    "gtk_import"
}

@gtk namespace {
    // GtkApplication
    @application_new(const gchar* application_id, GApplicationFlags flags) GtkApplication*? {
        @return gtk_application_new(application_id, flags)
    }

    @application_add_window(GtkApplication* application, GtkWindow* window) void {
        @gtk_application_add_window(application, window)
    }

    @application_remove_window(GtkApplication* application, GtkWindow* window) void {
        @gtk_application_remove_window(application, window)
    }

    @application_get_windows(GtkApplication* application) GList*? {
        @return gtk_application_get_windows(application)
    }

    @application_get_window_by_id(GtkApplication* application, guint id) GtkWindow*? {
        @return gtk_application_get_window_by_id(application, id)
    }

    @application_get_active_window(GtkApplication* application) GtkWindow*? {
        @return gtk_application_get_active_window(application)
    }

    @application_inhibit(GtkApplication* application, GtkWidget* window, GtkApplicationInhibitFlags flags, const gchar* reason) guint? {
        @return gtk_application_inhibit(application,GTK_WINDOW(window),flags, reason)
    }

    @application_uninhibit(GtkApplication* application, guint cookie) void {
        @gtk_application_uninhibit(application, cookie)
    }

    @application_is_inhibited(GtkApplication* application, GtkApplicationInhibitFlags flags) gboolean? {
        @return gtk_application_is_inhibited(application, flags)
    }

    @application_prefers_app_menu(GtkApplication* application) gboolean? {
        @return gtk_application_prefers_app_menu(application)
    }

    @application_get_app_menu(GtkApplication* application) GMenuModel*? {
        @return gtk_application_get_app_menu(application)
    }

    @application_set_app_menu(GtkApplication* application, GMenuModel* app_menu) void {
        @gtk_application_set_app_menu(application, app_menu)
    }

    @application_get_menubar(GtkApplication* application) GMenuModel*? {
        @return gtk_application_get_menubar(application)
    }

    @application_set_menubar(GtkApplication* application, GMenuModel* menubar) void {
        @gtk_application_set_menubar(application, menubar)
    }

    @application_get_menu_by_id(GtkApplication* application, const gchar* id) GMenu*? {
        @return gtk_application_get_menu_by_id(application, id)
    }

    // Deprecated:  @gtk_application_add_accelerator(GtkApplication *application,
    //      const gchar *accelerator,
    //      const gchar *action_name,
    //      GVariant *parameter);

    // Deprecated:  @gtk_application_remove_accelerator(GtkApplication *application,
    //      const gchar *action_name,
    //      GVariant *parameter);

    @application_list_action_descriptions(GtkApplication* application) gchar**? {
        @return gtk_application_list_action_descriptions(application)
    }

    @application_get_accels_for_action(GtkApplication* application, const gchar* detailed_action_name) gchar**? {
        @return gtk_application_get_accels_for_action(application, detailed_action_name)
    }

    @application_set_accels_for_action(GtkApplication* application, const gchar* detailed_action_name, const gchar* const* accels) void {
        @gtk_application_set_accels_for_action(application,detailed_action_name, accels)
    }

    @application_get_actions_for_accel(GtkApplication* application, const gchar* accel) gchar**? {
        @return gtk_application_get_actions_for_accel(application, accel)
    }

    // ---
    // End of GtkApplication

    // GtkApplicationWindow
    @application_window_new(GtkApplication* application) GtkWidget*? {
        @return gtk_application_window_new(application)
    }

    @application_window_set_show_menubar(GtkApplicationWindow* window, gboolean show_menubar) void {
        @gtk_application_window_set_show_menubar(window, show_menubar)
    }

    @application_window_get_show_menubar(GtkApplicationWindow* window) gboolean? {
        @return gtk_application_window_get_show_menubar(window)
    }

    @application_window_get_id(GtkApplicationWindow* window) guint? {
        @return gtk_application_window_get_id(window)
    }

    @application_window_set_help_overlay(GtkApplicationWindow* window, GtkShortcutsWindow* help_overlay) void {
        @gtk_application_window_set_help_overlay(window, help_overlay)
    }

    @application_window_get_help_overlay(GtkApplicationWindow* window) GtkShortcutsWindow*? {
        @return gtk_application_window_get_help_overlay(window)
    }

    // ---
    // End of GtkApplicationWindow

    // GtkActionable

    #const gchar* actionable_get_action_name(GtkActionable* actionable) {
        @return gtk_actionable_get_action_name(actionable)
    }

    @actionable_set_action_name(GtkActionable* actionable, const gchar* action_name) void {
        @return gtk_actionable_set_action_name(actionable, action_name)
    }

    @actionable_get_action_target_value(GtkActionable* actionable) GVariant*? {
        @return gtk_actionable_get_action_target_value(actionable)
    }

    @actionable_set_action_target_value(GtkActionable* actionable, GVariant* target_value) void {
        @gtk_actionable_set_action_target_value(actionable, target_value)
    }

    @actionable_set_action_target(GtkActionable* actionable, const gchar* format_str) void {
        @gtk_actionable_set_action_target(actionable, format_str)
    }

    @actionable_set_detailed_action_name(GtkActionable* actionable, const gchar* detailed_action_name) void {
        @gtk_actionable_set_detailed_action_name(actionable, detailed_action_name)
    }

    // ---
    // End of GtkActionable

    // GtkWindow
    @window_new(GtkWindowType type) GtkWidget*? {
        @return gtk_window_new(type)
    }

    @window_set_title(GtkWidget* window, const gchar* title) void {
        #gtk_window_set_title(GTK_WINDOW(window), title);
    }

    // Deprecated:  @gtk_window_set_wmclass(
    //      GtkWindow* window,
    //      const gchar* wmclass_name,
    //      const gchar* wmclass_class)

    @window_set_resizable(GtkWidget* window, gboolean resizable) void {
        @gtk_window_set_resizable(GTK_WINDOW(window), resizable)
    }

    @window_get_resizable(GtkWidget* window) gboolean? {
        @return gtk_window_get_resizable(GTK_WINDOW(window))
    }

    @window_add_accel_group(GtkWidget* window, GtkAccelGroup* accel_group) void {
        @gtk_window_add_accel_group(GTK_WINDOW(window), accel_group)
    }

    @window_remove_accel_group(GtkWidget* window, GtkAccelGroup* accel_group) void {
        @gtk_window_remove_accel_group(GTK_WINDOW(window), accel_group)
    }

    @window_activate_focus(GtkWidget* window) gboolean? {
        @return gtk_window_activate_focus(GTK_WINDOW(window))
    }

    @window_activate_default(GtkWidget* window) gboolean? {
        @return gtk_window_activate_default(GTK_WINDOW(window))
    }

    @window_set_modal(GtkWidget* window, gboolean modal) void {
        @gtk_window_set_modal(GTK_WINDOW(window), modal)
    }

    @window_set_default_size(GtkWidget* window, gint width, gint height) void {
        @gtk_window_set_default_size(GTK_WINDOW(window),width, height)
    }

    // Deprecated:  @gtk_window_set_default_geometry(
    //      GtkWindow* window,
    //      gint width,
    //      gint height)

    @window_set_geometry_hints(GtkWidget* window, GtkWidget* geometry_widget, GdkGeometry* geometry, GdkWindowHints geom_mask) void {
        @gtk_window_set_geometry_hints(GTK_WINDOW(window), geometry_widget,geometry,geom_mask)
    }

    @window_set_gravity(GtkWidget* window, GdkGravity gravity) void {
        @gtk_window_set_gravity(GTK_WINDOW(window), gravity)
    }

    @window_get_gravity(GtkWidget* window) GdkGravity {
        @return gtk_window_get_gravity(GTK_WINDOW(window))
    }

    @window_set_position(GtkWidget* window, GtkWindowPosition position) void {
        @gtk_window_set_position(GTK_WINDOW(window), position)
    }

    @window_set_transient_for(GtkWidget* window, GtkWidget* parent) void {
        @gtk_window_set_transient_for(GTK_WINDOW(window), GTK_WINDOW(parent))
    }

    @window_set_attached_to(GtkWidget* window, GtkWidget* attach_widget) void {
        @gtk_window_set_attached_to(GTK_WINDOW(window), attach_widget)
    }

    @window_set_destroy_with_parent(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_destroy_with_parent(GTK_WINDOW(window), setting)
    }

    @window_set_hide_titlebar_when_maximized(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_hide_titlebar_when_maximized(GTK_WINDOW(window), setting)
    }

    @window_set_screen(GtkWidget* window, GdkScreen* screen) void {
        @gtk_window_set_screen(GTK_WINDOW(window), screen)
    }

    @window_get_screen(GtkWidget* window) GdkScreen*? {
        @return gtk_window_get_screen(GTK_WINDOW(window))
    }

    @window_is_active(GtkWidget* window) gboolean? {
        @return gtk_window_is_active(GTK_WINDOW(window))
    }

    @window_is_maximized(GtkWidget* window) gboolean? {
        @return gtk_window_is_maximized(GTK_WINDOW(window))
    }

    @window_has_toplevel_focus(GtkWidget* window) gboolean? {
        @return gtk_window_has_toplevel_focus(GTK_WINDOW(window))
    }

    @window_list_toplevels GList*? {
        @return gtk_window_list_toplevels()
    }

    @window_add_mnemonic(GtkWidget* window, guint keyval, GtkWidget* target) void {
        @gtk_window_add_mnemonic(GTK_WINDOW(window),keyval, target)
    }

    @window_remove_mnemonic(GtkWidget* window, guint keyval, GtkWidget* target) void {
        @gtk_window_remove_mnemonic(GTK_WINDOW(window),keyval, target)
    }

    @window_mnemonic_activate(GtkWidget* window, guint keyval, GdkModifierType modifier) gboolean? {
        @return gtk_window_mnemonic_activate(GTK_WINDOW(window),keyval, modifier)
    }

    @window_activate_key(GtkWidget* window, GdkEventKey* event) gboolean? {
        @return gtk_window_activate_key(GTK_WINDOW(window), event)
    }

    @window_propagate_key_event(GtkWidget* window, GdkEventKey* event) gboolean? {
        @return gtk_window_propagate_key_event(GTK_WINDOW(window), event)
    }

    @window_get_focus(GtkWidget* window) GtkWidget*? {
        @return gtk_window_get_focus(GTK_WINDOW(window))
    }

    @window_set_focus(GtkWidget* window, GtkWidget* focus) void {
        @gtk_window_set_focus(GTK_WINDOW(window), focus)
    }

    @window_get_default_widget(GtkWidget* window) GtkWidget*? {
        @return gtk_window_get_default_widget(GTK_WINDOW(window))
    }

    @window_set_default(GtkWidget* window, GtkWidget* default_widget) void {
        @gtk_window_set_default(GTK_WINDOW(window), default_widget)
    }

    @window_present(GtkWidget* window) void {
        @gtk_window_present(GTK_WINDOW(window))
    }

    @window_present_with_time(GtkWidget* window, guint32 timestamp) void {
        @gtk_window_present_with_time(GTK_WINDOW(window), timestamp)
    }

    @window_close(GtkWidget* window) void {
        @gtk_window_close(GTK_WINDOW(window))
    }

    @window_iconify(GtkWidget* window) void {
        @gtk_window_iconify(GTK_WINDOW(window))
    }

    @window_deiconify(GtkWidget* window) void {
        @gtk_window_deiconify(GTK_WINDOW(window))
    }

    @window_stick(GtkWidget* window) void {
        @gtk_window_stick(GTK_WINDOW(window))
    }

    @window_unstick(GtkWidget* window) void {
        @gtk_window_unstick(GTK_WINDOW(window))
    }

    @window_maximize(GtkWidget* window) void {
        @gtk_window_maximize(GTK_WINDOW(window))
    }

    @window_unmaximize(GtkWidget* window) void {
        @gtk_window_unmaximize(GTK_WINDOW(window))
    }

    @window_fullscreen(GtkWidget* window) void {
        @gtk_window_fullscreen(GTK_WINDOW(window))
    }

    @window_fullscreen_on_monitor(GtkWidget* window, GdkScreen* screen, gint monitor) void {
        @gtk_window_fullscreen_on_monitor(GTK_WINDOW(window),screen, monitor)
    }

    @window_unfullscreen(GtkWidget* window) void {
        @gtk_window_unfullscreen(GTK_WINDOW(window))
    }

    @window_set_keep_above(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_keep_above(GTK_WINDOW(window), setting)
    }

    @window_set_keep_below(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_keep_below(GTK_WINDOW(window), setting)
    }

    @window_begin_resize_drag(GtkWidget* window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp) void {
        @gtk_window_begin_resize_drag(GTK_WINDOW(window),edge,button,root_x,root_y, timestamp)
    }

    @window_begin_move_drag(GtkWidget* window, gint button, gint root_x, gint root_y, guint32 timestamp) void {
        @gtk_window_begin_move_drag(GTK_WINDOW(window),button,root_x,root_y, timestamp)
    }

    @window_set_decorated(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_decorated(GTK_WINDOW(window), setting)
    }

    @window_set_deletable(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_deletable(GTK_WINDOW(window), setting)
    }

    @window_set_mnemonic_modifier(GtkWidget* window, GdkModifierType modifier) void {
        @gtk_window_set_mnemonic_modifier(GTK_WINDOW(window), modifier)
    }

    @window_set_type_hint(GtkWidget* window, GdkWindowTypeHint hint) void {
        @gtk_window_set_type_hint(GTK_WINDOW(window), hint)
    }

    @window_set_skip_taskbar_hint(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_skip_taskbar_hint(GTK_WINDOW(window), setting)
    }

    @window_set_skip_pager_hint(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_skip_pager_hint(GTK_WINDOW(window), setting)
    }

    @window_set_urgency_hint(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_urgency_hint(GTK_WINDOW(window), setting)
    }

    @window_set_accept_focus(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_accept_focus(GTK_WINDOW(window), setting)
    }

    @window_set_focus_on_map(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_focus_on_map(GTK_WINDOW(window), setting)
    }

    @window_set_startup_id(GtkWidget* window, const gchar* startup_id) void {
        @gtk_window_set_startup_id(GTK_WINDOW(window), startup_id)
    }

    @window_set_role(GtkWidget* window, const gchar* role) void {
        @gtk_window_set_role(GTK_WINDOW(window), role)
    }

    @window_get_decorated(GtkWidget* window) gboolean? {
        @return gtk_window_get_decorated(GTK_WINDOW(window))
    }

    @window_get_deletable(GtkWidget* window) gboolean? {
        @return gtk_window_get_deletable(GTK_WINDOW(window))
    }

    @window_get_default_icon_list GList*? {
        @return gtk_window_get_default_icon_list()
    }

    #const gchar* window_get_default_icon_name() {
        @return gtk_window_get_default_icon_name()
    }

    @window_get_default_size(GtkWidget* window, gint* width, gint* height) void {
        @gtk_window_get_default_size(GTK_WINDOW(window),width, height)
    }

    @window_get_destroy_with_parent(GtkWidget* window) gboolean? {
        @return gtk_window_get_destroy_with_parent(GTK_WINDOW(window))
    }

    @window_get_hide_titlebar_when_maximized(GtkWidget* window) gboolean? {
        @return gtk_window_get_hide_titlebar_when_maximized(GTK_WINDOW(window))
    }

    @window_get_icon(GtkWidget* window) GdkPixbuf*? {
        @return gtk_window_get_icon(GTK_WINDOW(window))
    }

    @window_get_icon_list(GtkWidget* window) GList*? {
        @return gtk_window_get_icon_list(GTK_WINDOW(window))
    }

    #const gchar* window_get_icon_name(GtkWidget* window) {
        @return gtk_window_get_icon_name(GTK_WINDOW(window))
    }

    @window_get_mnemonic_modifier(GtkWidget* window) GdkModifierType? {
        @return gtk_window_get_mnemonic_modifier(GTK_WINDOW(window))
    }

    @window_get_modal(GtkWidget* window) gboolean? {
        @return gtk_window_get_modal(GTK_WINDOW(window))
    }

    @window_get_position(GtkWidget* window, gint* root_x, gint* root_y) void {
        @gtk_window_get_position(GTK_WINDOW(window),root_x, root_y)
    }

    #const gchar* window_get_role(GtkWidget* window) {
        @return gtk_window_get_role(GTK_WINDOW(window))
    }

    @window_get_size(GtkWidget* window, gint* width, gint* height) void {
        @gtk_window_get_size(GTK_WINDOW(window),width, height)
    }

    #const gchar* window_get_title(GtkWidget* window) {
        @return gtk_window_get_title(GTK_WINDOW(window))
    }

    @window_get_transient_for(GtkWidget* window) GtkWindow*? {
        @return gtk_window_get_transient_for(GTK_WINDOW(window))
    }

    @window_get_attached_to(GtkWidget* window) GtkWidget*? {
        @return gtk_window_get_attached_to(GTK_WINDOW(window))
    }

    @window_get_type_hint(GtkWidget* window) GdkWindowTypeHint? {
        @return gtk_window_get_type_hint(GTK_WINDOW(window))
    }

    @window_get_skip_taskbar_hint(GtkWidget* window) gboolean? {
        @return gtk_window_get_skip_taskbar_hint(GTK_WINDOW(window))
    }

    @window_get_skip_pager_hint(GtkWidget* window) gboolean? {
        @return gtk_window_get_skip_pager_hint(GTK_WINDOW(window))
    }

    @window_get_urgency_hint(GtkWidget* window) gboolean? {
        @return gtk_window_get_urgency_hint(GTK_WINDOW(window))
    }

    @window_get_accept_focus(GtkWidget* window) gboolean? {
        @return gtk_window_get_accept_focus(GTK_WINDOW(window))
    }

    @window_get_focus_on_map(GtkWidget* window) gboolean? {
        @return gtk_window_get_focus_on_map(GTK_WINDOW(window))
    }

    @window_get_group(GtkWidget* window) GtkWindowGroup*? {
        @return gtk_window_get_group(GTK_WINDOW(window))
    }

    @window_has_group(GtkWidget* window) gboolean? {
        @return gtk_window_has_group(GTK_WINDOW(window))
    }

    @window_get_window_type(GtkWidget* window) GtkWindowType? {
        @return gtk_window_get_window_type(GTK_WINDOW(window))
    }

    @window_move(GtkWidget* window, gint x, gint y) void {
        @gtk_window_move(GTK_WINDOW(window),x, y)
    }

    // Deprecated:  @gtk_window_parse_geometry(
    //      GtkWindow* window,
    //      const gchar *geometry)

    // Deprecated:  @gtk_window_reshow_with_initial_size(
    //      GtkWindow* window)

    @window_resize(GtkWidget* window, gint width, gint height) void {
        @gtk_window_resize(GTK_WINDOW(window),width, height)
    }

    // Deprecated:  @gtk_window_resize_to_geometry(
    //      GtkWindow* window,
    //      gint width,
    //      gint height)

    @window_set_default_icon_list(GList* list) void {
        @gtk_window_set_default_icon_list(list)
    }

    @window_set_default_icon(GdkPixbuf* icon) void {
        @gtk_window_set_default_icon(icon)
    }

    @window_set_default_icon_from_file(const gchar* filename, GError** err) gboolean? {
        @return gtk_window_set_default_icon_from_file(filename, err)
    }

    @window_set_default_icon_name(const gchar* name) void {
        @gtk_window_set_default_icon_name(name)
    }

    @window_set_icon(GtkWidget* window, GdkPixbuf* icon) void {
        @gtk_window_set_icon(GTK_WINDOW(window), icon)
    }

    @window_set_icon_list(GtkWidget* window, GList* list) void {
        @gtk_window_set_icon_list(GTK_WINDOW(window), list)
    }

    @window_set_icon_from_file(GtkWidget* window, const gchar* filename, GError** err) gboolean? {
        @return gtk_window_set_icon_from_file(GTK_WINDOW(window),filename, err)
    }

    @window_set_icon_name(GtkWidget* window, const gchar* name) void {
        @gtk_window_set_icon_name(GTK_WINDOW(window), name)
    }

    @window_set_auto_startup_notification(gboolean setting) void {
        @gtk_window_set_auto_startup_notification(setting)
    }

    // Deprecated:  @gtk_window_get_opacity(
    //      GtkWidget* window)

    // Deprecated:  @gtk_window_set_opacity(
    //      GtkWidget* window,
    //      gdouble opacity)

    @window_get_mnemonics_visible(GtkWidget* window) gboolean? {
        @return gtk_window_get_mnemonics_visible(GTK_WINDOW(window))
    }

    @window_set_mnemonics_visible(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_mnemonics_visible(GTK_WINDOW(window), setting)
    }

    @window_get_focus_visible(GtkWidget* window) gboolean? {
        @return gtk_window_get_focus_visible(GTK_WINDOW(window))
    }

    @window_set_focus_visible(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_focus_visible(GTK_WINDOW(window), setting)
    }

    // Deprecated:  @gtk_window_set_has_resize_grip(
    //      GtkWidget* window,
    //      gboolean value)

    // Deprecated:  @gtk_window_get_has_resize_grip(
    //      GtkWidget* window)

    // Deprecated:  @gtk_window_resize_grip_is_visible(
    //      GtkWidget* window)

    // Deprecated:  @gtk_window_get_resize_grip_area(
    //      GtkWidget* window,
    //      GdkRectangle* rect)

    @window_get_application(GtkWidget* window) GtkApplication*? {
        @return gtk_window_get_application(GTK_WINDOW(window))
    }

    @window_set_application(GtkWidget* window, GtkApplication* application) void {
        @gtk_window_set_application(GTK_WINDOW(window), application)
    }

    @window_set_has_user_ref_count(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_has_user_ref_count(GTK_WINDOW(window), setting)
    }

    @window_set_titlebar(GtkWidget* window, GtkWidget* titlebar) void {
        @gtk_window_set_titlebar(GTK_WINDOW(window), titlebar)
    }

    @window_get_titlebar(GtkWidget* window) GtkWidget*? {
        @gtk_window_get_titlebar(GTK_WINDOW(window))
    }

    @window_set_interactive_debugging(gboolean enable) void {
        @gtk_window_set_interactive_debugging(enable)
    }

    // ---
    // End of GtkWindow

    // GtkDialog

    @dialog_new GtkWidget*? {
        @return gtk_dialog_new()
    }

    #template <typename... ID>
    @dialog_new_with_buttons(const gchar* title, GtkWidget* window, GtkDialogFlags flags, const gchar* first_button_text, ID... ids) GtkWidget*? {
        @return (gtk_dialog_new_with_buttons(title, GTK_WINDOW(window),flags,first_button_text,ids),...)
    }

    @dialog_run(GtkDialog* dialog) gint? {
        @return gtk_dialog_run(dialog)
    }

    @dialog_response(GtkDialog* dialog, gint response_id) void {
        @gtk_dialog_response(dialog, response_id)
    }

    @dialog_add_button(GtkDialog* dialog, const gchar* button_text, gint response_id) GtkWidget*? {
        @return gtk_dialog_add_button(dialog,button_text, response_id)
    }

    #template <typename... ID>
    @dialog_add_buttons(GtkDialog* dialog, const gchar* button_text, ID... ids) void {
        @(gtk_dialog_add_buttons(dialog,button_text,ids), ...)
    }

    @dialog_add_action_widget(GtkDialog* dialog, GtkWidget* child, gint response_id) void {
        @gtk_dialog_add_action_widget(dialog,child, response_id)
    }

    @dialog_set_default_response(GtkDialog* dialog, gint response_id) void {
        @gtk_dialog_set_default_response(dialog, response_id)
    }

    @dialog_set_response_sensitive(GtkDialog* dialog, gint response_id, gboolean setting) void {
        @gtk_dialog_set_response_sensitive(dialog,response_id, setting)
    }

    @dialog_get_response_for_widget(GtkDialog* dialog, GtkWidget* widget) gint? {
        @return gtk_dialog_get_response_for_widget(dialog, widget)
    }

    @dialog_get_widget_for_response(GtkDialog* dialog, gint response_id) GtkWidget*? {
        @return gtk_dialog_get_widget_for_response(dialog, response_id)
    }

    // Deprecated:  @gtk_dialog_get_action_area(
    //      GtkDialog* dialog)

    @dialog_get_content_area(GtkDialog* dialog) GtkWidget*? {
        @return gtk_dialog_get_content_area(dialog)
    }

    @dialog_get_header_bar(GtkDialog* dialog) GtkWidget*? {
        @return gtk_dialog_get_header_bar(dialog)
    }

    // Deprecated:  @gtk_alternative_dialog_button_order(
    //      GdkScreen* screen)

    // Deprecated:  @gtk_dialog_set_alternative_button_order(
    //      GtkDialog* dialog,
    //      gint first_response_id,
    //      ...)

    // Deprecated:  @gtk_dialog_set_alternative_button_order_from_array(
    //      GtkDialog* dialog,
    //      gint n_params,
    //      gint* new_order,
    //      ...)

    // ---
    // End of GtkDialog

    // GtkMessageDialog

    #template <typename... Arguments>
    @message_dialog_new(GtkWidget* window, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar* message_format, Arguments... args) GtkWidget*? {
        @return (gtk_message_dialog_new(GTK_WINDOW(window),flags,type,buttons,message_format,args), ...)
    }

    #template <typename... Arguments>
    @message_dialog_new_with_markup(GtkWidget* parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar* message_format, Arguments... args) GtkWidget*? {
        @return (gtk_message_dialog_new_with_markup(GTK_WINDOW(parent),flags,type,buttons,message_format,args), ...)
    }

    @message_dialog_set_markup(GtkMessageDialog* message_dialog, const gchar* str) void {
        @gtk_message_dialog_set_markup(message_dialog, str)
    }

    // Deprecated:  @gtk_message_dialog_set_image(
    //      GtkMessageDialog* dialog,
    //      GtkWidget* image)

    // Deprecated:  @gtk_message_dialog_get_image(
    //      GtkMessageDialog* dialog)

    #template <typename... Arguments>
    @message_dialog_format_secondary_text(GtkMessageDialog* message_dialog, const gchar* message_format, Arguments... args) void {
        @(gtk_message_dialog_format_secondary_text(message_dialog,message_format,args), ...)
    }

    #template <typename... Arguments>
    @message_dialog_format_secondary_markup(GtkMessageDialog* message_dialog, const gchar* message_format, Arguments... args) void {
        @(gtk_message_dialog_format_secondary_markup(message_dialog,message_format,args), ...)
    }

    @message_dialog_get_message_area(GtkMessageDialog* message_dialog) GtkWidget*? {
        @return gtk_message_dialog_get_message_area(message_dialog)
    }

    // ---
    // End of GtkMessageDialog

    // GtkWidget
    @widget_show_all(GtkWidget* widget) void {
        @gtk_widget_show_all(widget)
    }
}