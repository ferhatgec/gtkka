// MIT License
//
// Copyright (c) 2021 Ferhat Geçdoğan All Rights Reserved.
// Distributed under the terms of the MIT License.
//
//
//
// GtkKa - Kalem wrapper around GTK3
// ---
// It's at early-stage, unstable, unusable,
// Many functions are not implemented yet.
//
// Some wrapper principles:
//   Using GtkWidget* with GTK_WINDOW macro instead of directly GtkWindow*
//
//
// Extracted C++ library can be used as single-header C++* wrapper around GTK3.
//   * : Kalem generates readable C++ code.


!required_flag("library")

#include {
    "gtk_import"
}

#defn {
    LEVEL_BAR_OFFSET_LOW "low"
    LEVEL_BAR_OFFSET_HIGH "high"
    LEVEL_BAR_OFFSET_FULL "full"

    CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID(object,property_id,pspec) GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID(object,property_id,pspec)
}

@gtk namespace {
    // GtkApplication
    @application_new(const gchar* application_id, GApplicationFlags flags) GtkApplication*? {
        @return gtk_application_new(application_id, flags)
    }

    @application_add_window(GtkApplication* application, GtkWindow* window) void {
        @gtk_application_add_window(application, window)
    }

    @application_remove_window(GtkApplication* application, GtkWindow* window) void {
        @gtk_application_remove_window(application, window)
    }

    @application_get_windows(GtkApplication* application) GList*? {
        @return gtk_application_get_windows(application)
    }

    @application_get_window_by_id(GtkApplication* application, guint id) GtkWindow*? {
        @return gtk_application_get_window_by_id(application, id)
    }

    @application_get_active_window(GtkApplication* application) GtkWindow*? {
        @return gtk_application_get_active_window(application)
    }

    @application_inhibit(GtkApplication* application, GtkWidget* window, GtkApplicationInhibitFlags flags, const gchar* reason) guint? {
        @return gtk_application_inhibit(application,GTK_WINDOW(window),flags, reason)
    }

    @application_uninhibit(GtkApplication* application, guint cookie) void {
        @gtk_application_uninhibit(application, cookie)
    }

    @application_is_inhibited(GtkApplication* application, GtkApplicationInhibitFlags flags) gboolean? {
        @return gtk_application_is_inhibited(application, flags)
    }

    @application_prefers_app_menu(GtkApplication* application) gboolean? {
        @return gtk_application_prefers_app_menu(application)
    }

    @application_get_app_menu(GtkApplication* application) GMenuModel*? {
        @return gtk_application_get_app_menu(application)
    }

    @application_set_app_menu(GtkApplication* application, GMenuModel* app_menu) void {
        @gtk_application_set_app_menu(application, app_menu)
    }

    @application_get_menubar(GtkApplication* application) GMenuModel*? {
        @return gtk_application_get_menubar(application)
    }

    @application_set_menubar(GtkApplication* application, GMenuModel* menubar) void {
        @gtk_application_set_menubar(application, menubar)
    }

    @application_get_menu_by_id(GtkApplication* application, const gchar* id) GMenu*? {
        @return gtk_application_get_menu_by_id(application, id)
    }

    // Deprecated:  @gtk_application_add_accelerator(GtkApplication *application,
    //      const gchar *accelerator,
    //      const gchar *action_name,
    //      GVariant *parameter);

    // Deprecated:  @gtk_application_remove_accelerator(GtkApplication *application,
    //      const gchar *action_name,
    //      GVariant *parameter);

    @application_list_action_descriptions(GtkApplication* application) gchar**? {
        @return gtk_application_list_action_descriptions(application)
    }

    @application_get_accels_for_action(GtkApplication* application, const gchar* detailed_action_name) gchar**? {
        @return gtk_application_get_accels_for_action(application, detailed_action_name)
    }

    @application_set_accels_for_action(GtkApplication* application, const gchar* detailed_action_name, const gchar* const* accels) void {
        @gtk_application_set_accels_for_action(application,detailed_action_name, accels)
    }

    @application_get_actions_for_accel(GtkApplication* application, const gchar* accel) gchar**? {
        @return gtk_application_get_actions_for_accel(application, accel)
    }

    // ---
    // End of GtkApplication

    // GtkApplicationWindow
    @application_window_new(GtkApplication* application) GtkWidget*? {
        @return gtk_application_window_new(application)
    }

    @application_window_set_show_menubar(GtkApplicationWindow* window, gboolean show_menubar) void {
        @gtk_application_window_set_show_menubar(window, show_menubar)
    }

    @application_window_get_show_menubar(GtkApplicationWindow* window) gboolean? {
        @return gtk_application_window_get_show_menubar(window)
    }

    @application_window_get_id(GtkApplicationWindow* window) guint? {
        @return gtk_application_window_get_id(window)
    }

    @application_window_set_help_overlay(GtkApplicationWindow* window, GtkShortcutsWindow* help_overlay) void {
        @gtk_application_window_set_help_overlay(window, help_overlay)
    }

    @application_window_get_help_overlay(GtkApplicationWindow* window) GtkShortcutsWindow*? {
        @return gtk_application_window_get_help_overlay(window)
    }

    // ---
    // End of GtkApplicationWindow

    // GtkActionable

    #const gchar* actionable_get_action_name(GtkActionable* actionable) {
        @return gtk_actionable_get_action_name(actionable)
    }

    @actionable_set_action_name(GtkActionable* actionable, const gchar* action_name) void {
        @return gtk_actionable_set_action_name(actionable, action_name)
    }

    @actionable_get_action_target_value(GtkActionable* actionable) GVariant*? {
        @return gtk_actionable_get_action_target_value(actionable)
    }

    @actionable_set_action_target_value(GtkActionable* actionable, GVariant* target_value) void {
        @gtk_actionable_set_action_target_value(actionable, target_value)
    }

    @actionable_set_action_target(GtkActionable* actionable, const gchar* format_str) void {
        @gtk_actionable_set_action_target(actionable, format_str)
    }

    @actionable_set_detailed_action_name(GtkActionable* actionable, const gchar* detailed_action_name) void {
        @gtk_actionable_set_detailed_action_name(actionable, detailed_action_name)
    }

    // ---
    // End of GtkActionable

    // GtkWindow
    @window_new(GtkWindowType type) GtkWidget*? {
        @return gtk_window_new(type)
    }

    @window_set_title(GtkWidget* window, const gchar* title) void {
        #gtk_window_set_title(GTK_WINDOW(window), title);
    }

    // Deprecated:  @gtk_window_set_wmclass(
    //      GtkWindow* window,
    //      const gchar* wmclass_name,
    //      const gchar* wmclass_class)

    @window_set_resizable(GtkWidget* window, gboolean resizable) void {
        @gtk_window_set_resizable(GTK_WINDOW(window), resizable)
    }

    @window_get_resizable(GtkWidget* window) gboolean? {
        @return gtk_window_get_resizable(GTK_WINDOW(window))
    }

    @window_add_accel_group(GtkWidget* window, GtkAccelGroup* accel_group) void {
        @gtk_window_add_accel_group(GTK_WINDOW(window), accel_group)
    }

    @window_remove_accel_group(GtkWidget* window, GtkAccelGroup* accel_group) void {
        @gtk_window_remove_accel_group(GTK_WINDOW(window), accel_group)
    }

    @window_activate_focus(GtkWidget* window) gboolean? {
        @return gtk_window_activate_focus(GTK_WINDOW(window))
    }

    @window_activate_default(GtkWidget* window) gboolean? {
        @return gtk_window_activate_default(GTK_WINDOW(window))
    }

    @window_set_modal(GtkWidget* window, gboolean modal) void {
        @gtk_window_set_modal(GTK_WINDOW(window), modal)
    }

    @window_set_default_size(GtkWidget* window, gint width, gint height) void {
        @gtk_window_set_default_size(GTK_WINDOW(window),width, height)
    }

    // Deprecated:  @gtk_window_set_default_geometry(
    //      GtkWindow* window,
    //      gint width,
    //      gint height)

    @window_set_geometry_hints(GtkWidget* window, GtkWidget* geometry_widget, GdkGeometry* geometry, GdkWindowHints geom_mask) void {
        @gtk_window_set_geometry_hints(GTK_WINDOW(window), geometry_widget,geometry,geom_mask)
    }

    @window_set_gravity(GtkWidget* window, GdkGravity gravity) void {
        @gtk_window_set_gravity(GTK_WINDOW(window), gravity)
    }

    @window_get_gravity(GtkWidget* window) GdkGravity {
        @return gtk_window_get_gravity(GTK_WINDOW(window))
    }

    @window_set_position(GtkWidget* window, GtkWindowPosition position) void {
        @gtk_window_set_position(GTK_WINDOW(window), position)
    }

    @window_set_transient_for(GtkWidget* window, GtkWidget* parent) void {
        @gtk_window_set_transient_for(GTK_WINDOW(window), GTK_WINDOW(parent))
    }

    @window_set_attached_to(GtkWidget* window, GtkWidget* attach_widget) void {
        @gtk_window_set_attached_to(GTK_WINDOW(window), attach_widget)
    }

    @window_set_destroy_with_parent(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_destroy_with_parent(GTK_WINDOW(window), setting)
    }

    @window_set_hide_titlebar_when_maximized(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_hide_titlebar_when_maximized(GTK_WINDOW(window), setting)
    }

    @window_set_screen(GtkWidget* window, GdkScreen* screen) void {
        @gtk_window_set_screen(GTK_WINDOW(window), screen)
    }

    @window_get_screen(GtkWidget* window) GdkScreen*? {
        @return gtk_window_get_screen(GTK_WINDOW(window))
    }

    @window_is_active(GtkWidget* window) gboolean? {
        @return gtk_window_is_active(GTK_WINDOW(window))
    }

    @window_is_maximized(GtkWidget* window) gboolean? {
        @return gtk_window_is_maximized(GTK_WINDOW(window))
    }

    @window_has_toplevel_focus(GtkWidget* window) gboolean? {
        @return gtk_window_has_toplevel_focus(GTK_WINDOW(window))
    }

    @window_list_toplevels GList*? {
        @return gtk_window_list_toplevels()
    }

    @window_add_mnemonic(GtkWidget* window, guint keyval, GtkWidget* target) void {
        @gtk_window_add_mnemonic(GTK_WINDOW(window),keyval, target)
    }

    @window_remove_mnemonic(GtkWidget* window, guint keyval, GtkWidget* target) void {
        @gtk_window_remove_mnemonic(GTK_WINDOW(window),keyval, target)
    }

    @window_mnemonic_activate(GtkWidget* window, guint keyval, GdkModifierType modifier) gboolean? {
        @return gtk_window_mnemonic_activate(GTK_WINDOW(window),keyval, modifier)
    }

    @window_activate_key(GtkWidget* window, GdkEventKey* event) gboolean? {
        @return gtk_window_activate_key(GTK_WINDOW(window), event)
    }

    @window_propagate_key_event(GtkWidget* window, GdkEventKey* event) gboolean? {
        @return gtk_window_propagate_key_event(GTK_WINDOW(window), event)
    }

    @window_get_focus(GtkWidget* window) GtkWidget*? {
        @return gtk_window_get_focus(GTK_WINDOW(window))
    }

    @window_set_focus(GtkWidget* window, GtkWidget* focus) void {
        @gtk_window_set_focus(GTK_WINDOW(window), focus)
    }

    @window_get_default_widget(GtkWidget* window) GtkWidget*? {
        @return gtk_window_get_default_widget(GTK_WINDOW(window))
    }

    @window_set_default(GtkWidget* window, GtkWidget* default_widget) void {
        @gtk_window_set_default(GTK_WINDOW(window), default_widget)
    }

    @window_present(GtkWidget* window) void {
        @gtk_window_present(GTK_WINDOW(window))
    }

    @window_present_with_time(GtkWidget* window, guint32 timestamp) void {
        @gtk_window_present_with_time(GTK_WINDOW(window), timestamp)
    }

    @window_close(GtkWidget* window) void {
        @gtk_window_close(GTK_WINDOW(window))
    }

    @window_iconify(GtkWidget* window) void {
        @gtk_window_iconify(GTK_WINDOW(window))
    }

    @window_deiconify(GtkWidget* window) void {
        @gtk_window_deiconify(GTK_WINDOW(window))
    }

    @window_stick(GtkWidget* window) void {
        @gtk_window_stick(GTK_WINDOW(window))
    }

    @window_unstick(GtkWidget* window) void {
        @gtk_window_unstick(GTK_WINDOW(window))
    }

    @window_maximize(GtkWidget* window) void {
        @gtk_window_maximize(GTK_WINDOW(window))
    }

    @window_unmaximize(GtkWidget* window) void {
        @gtk_window_unmaximize(GTK_WINDOW(window))
    }

    @window_fullscreen(GtkWidget* window) void {
        @gtk_window_fullscreen(GTK_WINDOW(window))
    }

    @window_fullscreen_on_monitor(GtkWidget* window, GdkScreen* screen, gint monitor) void {
        @gtk_window_fullscreen_on_monitor(GTK_WINDOW(window),screen, monitor)
    }

    @window_unfullscreen(GtkWidget* window) void {
        @gtk_window_unfullscreen(GTK_WINDOW(window))
    }

    @window_set_keep_above(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_keep_above(GTK_WINDOW(window), setting)
    }

    @window_set_keep_below(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_keep_below(GTK_WINDOW(window), setting)
    }

    @window_begin_resize_drag(GtkWidget* window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp) void {
        @gtk_window_begin_resize_drag(GTK_WINDOW(window),edge,button,root_x,root_y, timestamp)
    }

    @window_begin_move_drag(GtkWidget* window, gint button, gint root_x, gint root_y, guint32 timestamp) void {
        @gtk_window_begin_move_drag(GTK_WINDOW(window),button,root_x,root_y, timestamp)
    }

    @window_set_decorated(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_decorated(GTK_WINDOW(window), setting)
    }

    @window_set_deletable(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_deletable(GTK_WINDOW(window), setting)
    }

    @window_set_mnemonic_modifier(GtkWidget* window, GdkModifierType modifier) void {
        @gtk_window_set_mnemonic_modifier(GTK_WINDOW(window), modifier)
    }

    @window_set_type_hint(GtkWidget* window, GdkWindowTypeHint hint) void {
        @gtk_window_set_type_hint(GTK_WINDOW(window), hint)
    }

    @window_set_skip_taskbar_hint(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_skip_taskbar_hint(GTK_WINDOW(window), setting)
    }

    @window_set_skip_pager_hint(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_skip_pager_hint(GTK_WINDOW(window), setting)
    }

    @window_set_urgency_hint(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_urgency_hint(GTK_WINDOW(window), setting)
    }

    @window_set_accept_focus(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_accept_focus(GTK_WINDOW(window), setting)
    }

    @window_set_focus_on_map(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_focus_on_map(GTK_WINDOW(window), setting)
    }

    @window_set_startup_id(GtkWidget* window, const gchar* startup_id) void {
        @gtk_window_set_startup_id(GTK_WINDOW(window), startup_id)
    }

    @window_set_role(GtkWidget* window, const gchar* role) void {
        @gtk_window_set_role(GTK_WINDOW(window), role)
    }

    @window_get_decorated(GtkWidget* window) gboolean? {
        @return gtk_window_get_decorated(GTK_WINDOW(window))
    }

    @window_get_deletable(GtkWidget* window) gboolean? {
        @return gtk_window_get_deletable(GTK_WINDOW(window))
    }

    @window_get_default_icon_list GList*? {
        @return gtk_window_get_default_icon_list()
    }

    #const gchar* window_get_default_icon_name() {
        @return gtk_window_get_default_icon_name()
    }

    @window_get_default_size(GtkWidget* window, gint* width, gint* height) void {
        @gtk_window_get_default_size(GTK_WINDOW(window),width, height)
    }

    @window_get_destroy_with_parent(GtkWidget* window) gboolean? {
        @return gtk_window_get_destroy_with_parent(GTK_WINDOW(window))
    }

    @window_get_hide_titlebar_when_maximized(GtkWidget* window) gboolean? {
        @return gtk_window_get_hide_titlebar_when_maximized(GTK_WINDOW(window))
    }

    @window_get_icon(GtkWidget* window) GdkPixbuf*? {
        @return gtk_window_get_icon(GTK_WINDOW(window))
    }

    @window_get_icon_list(GtkWidget* window) GList*? {
        @return gtk_window_get_icon_list(GTK_WINDOW(window))
    }

    #const gchar* window_get_icon_name(GtkWidget* window) {
        @return gtk_window_get_icon_name(GTK_WINDOW(window))
    }

    @window_get_mnemonic_modifier(GtkWidget* window) GdkModifierType? {
        @return gtk_window_get_mnemonic_modifier(GTK_WINDOW(window))
    }

    @window_get_modal(GtkWidget* window) gboolean? {
        @return gtk_window_get_modal(GTK_WINDOW(window))
    }

    @window_get_position(GtkWidget* window, gint* root_x, gint* root_y) void {
        @gtk_window_get_position(GTK_WINDOW(window),root_x, root_y)
    }

    #const gchar* window_get_role(GtkWidget* window) {
        @return gtk_window_get_role(GTK_WINDOW(window))
    }

    @window_get_size(GtkWidget* window, gint* width, gint* height) void {
        @gtk_window_get_size(GTK_WINDOW(window),width, height)
    }

    #const gchar* window_get_title(GtkWidget* window) {
        @return gtk_window_get_title(GTK_WINDOW(window))
    }

    @window_get_transient_for(GtkWidget* window) GtkWindow*? {
        @return gtk_window_get_transient_for(GTK_WINDOW(window))
    }

    @window_get_attached_to(GtkWidget* window) GtkWidget*? {
        @return gtk_window_get_attached_to(GTK_WINDOW(window))
    }

    @window_get_type_hint(GtkWidget* window) GdkWindowTypeHint? {
        @return gtk_window_get_type_hint(GTK_WINDOW(window))
    }

    @window_get_skip_taskbar_hint(GtkWidget* window) gboolean? {
        @return gtk_window_get_skip_taskbar_hint(GTK_WINDOW(window))
    }

    @window_get_skip_pager_hint(GtkWidget* window) gboolean? {
        @return gtk_window_get_skip_pager_hint(GTK_WINDOW(window))
    }

    @window_get_urgency_hint(GtkWidget* window) gboolean? {
        @return gtk_window_get_urgency_hint(GTK_WINDOW(window))
    }

    @window_get_accept_focus(GtkWidget* window) gboolean? {
        @return gtk_window_get_accept_focus(GTK_WINDOW(window))
    }

    @window_get_focus_on_map(GtkWidget* window) gboolean? {
        @return gtk_window_get_focus_on_map(GTK_WINDOW(window))
    }

    @window_get_group(GtkWidget* window) GtkWindowGroup*? {
        @return gtk_window_get_group(GTK_WINDOW(window))
    }

    @window_has_group(GtkWidget* window) gboolean? {
        @return gtk_window_has_group(GTK_WINDOW(window))
    }

    @window_get_window_type(GtkWidget* window) GtkWindowType? {
        @return gtk_window_get_window_type(GTK_WINDOW(window))
    }

    @window_move(GtkWidget* window, gint x, gint y) void {
        @gtk_window_move(GTK_WINDOW(window),x, y)
    }

    // Deprecated:  @gtk_window_parse_geometry(
    //      GtkWindow* window,
    //      const gchar *geometry)

    // Deprecated:  @gtk_window_reshow_with_initial_size(
    //      GtkWindow* window)

    @window_resize(GtkWidget* window, gint width, gint height) void {
        @gtk_window_resize(GTK_WINDOW(window),width, height)
    }

    // Deprecated:  @gtk_window_resize_to_geometry(
    //      GtkWindow* window,
    //      gint width,
    //      gint height)

    @window_set_default_icon_list(GList* list) void {
        @gtk_window_set_default_icon_list(list)
    }

    @window_set_default_icon(GdkPixbuf* icon) void {
        @gtk_window_set_default_icon(icon)
    }

    @window_set_default_icon_from_file(const gchar* filename, GError** err) gboolean? {
        @return gtk_window_set_default_icon_from_file(filename, err)
    }

    @window_set_default_icon_name(const gchar* name) void {
        @gtk_window_set_default_icon_name(name)
    }

    @window_set_icon(GtkWidget* window, GdkPixbuf* icon) void {
        @gtk_window_set_icon(GTK_WINDOW(window), icon)
    }

    @window_set_icon_list(GtkWidget* window, GList* list) void {
        @gtk_window_set_icon_list(GTK_WINDOW(window), list)
    }

    @window_set_icon_from_file(GtkWidget* window, const gchar* filename, GError** err) gboolean? {
        @return gtk_window_set_icon_from_file(GTK_WINDOW(window),filename, err)
    }

    @window_set_icon_name(GtkWidget* window, const gchar* name) void {
        @gtk_window_set_icon_name(GTK_WINDOW(window), name)
    }

    @window_set_auto_startup_notification(gboolean setting) void {
        @gtk_window_set_auto_startup_notification(setting)
    }

    // Deprecated:  @gtk_window_get_opacity(
    //      GtkWidget* window)

    // Deprecated:  @gtk_window_set_opacity(
    //      GtkWidget* window,
    //      gdouble opacity)

    @window_get_mnemonics_visible(GtkWidget* window) gboolean? {
        @return gtk_window_get_mnemonics_visible(GTK_WINDOW(window))
    }

    @window_set_mnemonics_visible(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_mnemonics_visible(GTK_WINDOW(window), setting)
    }

    @window_get_focus_visible(GtkWidget* window) gboolean? {
        @return gtk_window_get_focus_visible(GTK_WINDOW(window))
    }

    @window_set_focus_visible(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_focus_visible(GTK_WINDOW(window), setting)
    }

    // Deprecated:  @gtk_window_set_has_resize_grip(
    //      GtkWidget* window,
    //      gboolean value)

    // Deprecated:  @gtk_window_get_has_resize_grip(
    //      GtkWidget* window)

    // Deprecated:  @gtk_window_resize_grip_is_visible(
    //      GtkWidget* window)

    // Deprecated:  @gtk_window_get_resize_grip_area(
    //      GtkWidget* window,
    //      GdkRectangle* rect)

    @window_get_application(GtkWidget* window) GtkApplication*? {
        @return gtk_window_get_application(GTK_WINDOW(window))
    }

    @window_set_application(GtkWidget* window, GtkApplication* application) void {
        @gtk_window_set_application(GTK_WINDOW(window), application)
    }

    @window_set_has_user_ref_count(GtkWidget* window, gboolean setting) void {
        @gtk_window_set_has_user_ref_count(GTK_WINDOW(window), setting)
    }

    @window_set_titlebar(GtkWidget* window, GtkWidget* titlebar) void {
        @gtk_window_set_titlebar(GTK_WINDOW(window), titlebar)
    }

    @window_get_titlebar(GtkWidget* window) GtkWidget*? {
        @gtk_window_get_titlebar(GTK_WINDOW(window))
    }

    @window_set_interactive_debugging(gboolean enable) void {
        @gtk_window_set_interactive_debugging(enable)
    }

    // ---
    // End of GtkWindow

    // GtkDialog

    @dialog_new GtkWidget*? {
        @return gtk_dialog_new()
    }

    #template <typename... ID>
    @dialog_new_with_buttons(const gchar* title, GtkWidget* window, GtkDialogFlags flags, const gchar* first_button_text, ID... ids) GtkWidget*? {
        @return (gtk_dialog_new_with_buttons(title, GTK_WINDOW(window),flags,first_button_text,ids),...)
    }

    @dialog_run(GtkDialog* dialog) gint? {
        @return gtk_dialog_run(dialog)
    }

    @dialog_response(GtkDialog* dialog, gint response_id) void {
        @gtk_dialog_response(dialog, response_id)
    }

    @dialog_add_button(GtkDialog* dialog, const gchar* button_text, gint response_id) GtkWidget*? {
        @return gtk_dialog_add_button(dialog,button_text, response_id)
    }

    #template <typename... ID>
    @dialog_add_buttons(GtkDialog* dialog, const gchar* button_text, ID... ids) void {
        @(gtk_dialog_add_buttons(dialog,button_text,ids), ...)
    }

    @dialog_add_action_widget(GtkDialog* dialog, GtkWidget* child, gint response_id) void {
        @gtk_dialog_add_action_widget(dialog,child, response_id)
    }

    @dialog_set_default_response(GtkDialog* dialog, gint response_id) void {
        @gtk_dialog_set_default_response(dialog, response_id)
    }

    @dialog_set_response_sensitive(GtkDialog* dialog, gint response_id, gboolean setting) void {
        @gtk_dialog_set_response_sensitive(dialog,response_id, setting)
    }

    @dialog_get_response_for_widget(GtkDialog* dialog, GtkWidget* widget) gint? {
        @return gtk_dialog_get_response_for_widget(dialog, widget)
    }

    @dialog_get_widget_for_response(GtkDialog* dialog, gint response_id) GtkWidget*? {
        @return gtk_dialog_get_widget_for_response(dialog, response_id)
    }

    // Deprecated:  @gtk_dialog_get_action_area(
    //      GtkDialog* dialog)

    @dialog_get_content_area(GtkDialog* dialog) GtkWidget*? {
        @return gtk_dialog_get_content_area(dialog)
    }

    @dialog_get_header_bar(GtkDialog* dialog) GtkWidget*? {
        @return gtk_dialog_get_header_bar(dialog)
    }

    // Deprecated:  @gtk_alternative_dialog_button_order(
    //      GdkScreen* screen)

    // Deprecated:  @gtk_dialog_set_alternative_button_order(
    //      GtkDialog* dialog,
    //      gint first_response_id,
    //      ...)

    // Deprecated:  @gtk_dialog_set_alternative_button_order_from_array(
    //      GtkDialog* dialog,
    //      gint n_params,
    //      gint* new_order,
    //      ...)

    // ---
    // End of GtkDialog

    // GtkMessageDialog

    #template <typename... Arguments>
    @message_dialog_new(GtkWidget* window, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar* message_format, Arguments... args) GtkWidget*? {
        @return (gtk_message_dialog_new(GTK_WINDOW(window),flags,type,buttons,message_format,args), ...)
    }

    #template <typename... Arguments>
    @message_dialog_new_with_markup(GtkWidget* parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar* message_format, Arguments... args) GtkWidget*? {
        @return (gtk_message_dialog_new_with_markup(GTK_WINDOW(parent),flags,type,buttons,message_format,args), ...)
    }

    @message_dialog_set_markup(GtkMessageDialog* message_dialog, const gchar* str) void {
        @gtk_message_dialog_set_markup(message_dialog, str)
    }

    // Deprecated:  @gtk_message_dialog_set_image(
    //      GtkMessageDialog* dialog,
    //      GtkWidget* image)

    // Deprecated:  @gtk_message_dialog_get_image(
    //      GtkMessageDialog* dialog)

    #template <typename... Arguments>
    @message_dialog_format_secondary_text(GtkMessageDialog* message_dialog, const gchar* message_format, Arguments... args) void {
        @(gtk_message_dialog_format_secondary_text(message_dialog,message_format,args), ...)
    }

    #template <typename... Arguments>
    @message_dialog_format_secondary_markup(GtkMessageDialog* message_dialog, const gchar* message_format, Arguments... args) void {
        @(gtk_message_dialog_format_secondary_markup(message_dialog,message_format,args), ...)
    }

    @message_dialog_get_message_area(GtkMessageDialog* message_dialog) GtkWidget*? {
        @return gtk_message_dialog_get_message_area(message_dialog)
    }

    // ---
    // End of GtkMessageDialog

    // GtkAboutDialog

    @about_dialog_new GtkWidget*? {
        @return gtk_about_dialog_new()
    }

    #const gchar* about_dialog_get_program_name(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_program_name(about)
    }

    @about_dialog_set_program_name(GtkAboutDialog* about, const gchar* name) void {
        @gtk_about_dialog_set_program_name(about, name)
    }

    #const gchar* about_dialog_get_version(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_version(about)
    }

    @about_dialog_set_version(GtkAboutDialog* dialog, const gchar* version) void {
        @gtk_about_dialog_set_version(dialog, version)
    }

    #const gchar* about_dialog_get_copyright(GtkAboutDialog* dialog) {
        @return gtk_about_dialog_get_copyright(dialog)
    }

    @about_dialog_set_copyright(GtkAboutDialog* about, const gchar* copyright) void {
        @gtk_about_dialog_set_copyright(about, copyright)
    }

    #const gchar* about_dialog_get_comments(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_comments(about)
    }

    @about_dialog_set_comments(GtkAboutDialog* about, const gchar* comments) void {
        @gtk_about_dialog_set_comments(about, comments)
    }

    #const gchar* about_dialog_get_license(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_license(about)
    }

    @about_dialog_set_license(GtkAboutDialog* about, const gchar* license) void {
        @gtk_about_dialog_set_license(about, license)
    }

    @about_dialog_get_wrap_license(GtkAboutDialog* about) gboolean? {
        @return gtk_about_dialog_get_wrap_license(about)
    }

    @about_dialog_set_wrap_license(GtkAboutDialog* about, gboolean wrap_license) void {
        @gtk_about_dialog_set_wrap_license(about, wrap_license)
    }

    @about_dialog_get_license_type(GtkAboutDialog* about) GtkLicense? {
        @return gtk_about_dialog_get_license_type(about)
    }

    @about_dialog_set_license_type(GtkAboutDialog* about, GtkLicense license_type) void {
        @gtk_about_dialog_set_license_type(about, license_type)
    }

    #const gchar* about_dialog_get_website(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_website(about)
    }

    @about_dialog_set_website(GtkAboutDialog* about, const gchar* website) void {
        @gtk_about_dialog_set_website(about, website)
    }

    #const gchar* about_dialog_get_website_label(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_website_label(about)
    }

    @about_dialog_set_website_label(GtkAboutDialog* about, const gchar* website_label) void {
        @gtk_about_dialog_set_website_label(about, website_label)
    }

    #const gchar* const * about_dialog_get_authors(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_authors(about)
    }

    @about_dialog_set_authors(GtkAboutDialog* about, const gchar** authors) void {
        @gtk_about_dialog_set_authors(about, authors)
    }

    #const gchar* const * about_dialog_get_artists(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_artists(about)
    }

    @about_dialog_set_artists(GtkAboutDialog* about, const gchar** artists) void {
        @gtk_about_dialog_set_artists(about, artists)
    }

    #const gchar* const * about_dialog_get_documenters(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_documenters(about)
    }

    @about_dialog_set_documenters(GtkAboutDialog* about, const gchar** documenters) void {
        @gtk_about_dialog_set_documenters(about, documenters)
    }

    #const gchar* about_dialog_get_translator_credits(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_translator_credits(about)
    }

    @about_dialog_set_translator_credits(GtkAboutDialog* about, const gchar* translator_credits) void {
        @gtk_about_dialog_set_translator_credits(about, translator_credits)
    }

    @about_dialog_get_logo(GtkAboutDialog* about) GdkPixbuf*? {
        @return gtk_about_dialog_get_logo(about)
    }

    @about_dialog_set_logo(GtkAboutDialog* about, GdkPixbuf* logo) void {
        @gtk_about_dialog_set_logo(about, logo)
    }

    #const gchar* about_dialog_get_logo_icon_name(GtkAboutDialog* about) {
        @return gtk_about_dialog_get_logo_icon_name(about)
    }

    @about_dialog_set_logo_icon_name(GtkAboutDialog* about, const gchar* icon_name) void {
        @gtk_about_dialog_set_logo_icon_name(about, icon_name)
    }

    @about_dialog_add_credit_section(GtkAboutDialog* about, const gchar* section_name, const gchar** people) void {
        @gtk_about_dialog_add_credit_section(about,section_name, people)
    }

    #template <typename... Value>
    @show_about_dialog(GtkWidget* parent, const gchar* first_property_name, Value... first_property) void {
        @(gtk_show_about_dialog(GTK_WINDOW(parent),first_property_name,first_property), ...)
    }

    // ---
    // End of GtkAboutDialog

    // GtkAssistant

    @assistant_new GtkWidget*? {
        @return gtk_assistant_new()
    }

    @assistant_get_current_page(GtkAssistant* assistant) gint? {
        @return gtk_assistant_get_current_page(assistant)
    }

    @assistant_set_current_page(GtkAssistant* assistant, gint page_num) void {
        @gtk_assistant_set_current_page(assistant, page_num)
    }

    @assistant_get_n_pages(GtkAssistant* assistant) gint? {
        @return gtk_assistant_get_n_pages(assistant)
    }

    @assistant_get_nth_page(GtkAssistant* assistant, gint page_num) GtkWidget*? {
        @return gtk_assistant_get_nth_page(assistant, page_num)
    }

    @assistant_prepend_page(GtkAssistant* assistant, GtkWidget* page) gint? {
        @return gtk_assistant_prepend_page(assistant, page)
    }

    @assistant_append_page(GtkAssistant* assistant, GtkWidget* page) gint? {
        @return gtk_assistant_append_page(assistant, page)
    }

    @assistant_insert_page(GtkAssistant* assistant, GtkWidget* page, gint position) gint? {
        @return gtk_assistant_insert_page(assistant,page, position)
    }

    @assistant_remove_page(GtkAssistant* assistant, gint page_num) void {
        @gtk_assistant_remove_page(assistant, page_num)
    }

    // Unimplemented: gint
    //(*GtkAssistantPageFunc) (gint current_page,
    //                         gpointer data);

    @assistant_set_forward_page_func(GtkAssistant* assistant, GtkAssistantPageFunc page_func, gpointer data, GDestroyNotify destroy) void {
        @gtk_assistant_set_forward_page_func(assistant,page_func,data, destroy)
    }

    @assistant_set_page_type(GtkAssistant* assistant, GtkWidget* page, GtkAssistantPageType type) void {
        @gtk_assistant_set_page_type(assistant,page, type)
    }

    @assistant_get_page_type(GtkAssistant* assistant, GtkWidget* page) GtkAssistantPageType? {
        @return gtk_assistant_get_page_type(assistant, page)
    }

    @assistant_set_page_title(GtkAssistant* assistant, GtkWidget* page, const gchar* title) void {
        @gtk_assistant_set_page_title(assistant,page, title)
    }

    #const gchar* assistant_get_page_title(GtkAssistant* assistant, GtkWidget* page) {
        @return gtk_assistant_get_page_title(assistant, page)
    }

    // Deprecated:  @gtk_assistant_set_page_header_image(
    //      GtkAssistant* assistant,
    //      GtkWidget* page,
    //      GdkPixbuf* pixbuf)

    // Deprecated:  @gtk_assistant_get_page_header_image(
    //      GtkAssistant* assistant,
    //      GtkWidget* page)

    // Deprecated:  @gtk_assistant_set_page_side_image(
    //      GtkAssistant* assistant,
    //      GtkWidget* page,
    //      GdkPixbuf* pixbuf)

    // Deprecated:  @gtk_assistant_get_page_side_image(
    //      GtkAssistant* assistant,
    //      GtkWidget* page)

    @assistant_set_page_complete(GtkAssistant* assistant, GtkWidget* page, gboolean complete) void {
        @gtk_assistant_set_page_complete(assistant,page, complete)
    }

    @assistant_get_page_complete(GtkAssistant* assistant, GtkWidget* page) gboolean? {
        @return gtk_assistant_get_page_complete(assistant, page)
    }

    @assistant_set_page_has_padding(GtkAssistant* assistant, GtkWidget* page, gboolean has_padding) void {
        @gtk_assistant_set_page_has_padding(assistant,page, has_padding)
    }

    @assistant_get_page_has_padding(GtkAssistant* assistant, GtkWidget* page) gboolean? {
        @return gtk_assistant_get_page_has_padding(assistant, page)
    }

    @assistant_add_action_widget(GtkAssistant* assistant, GtkWidget* child) void {
        @gtk_assistant_add_action_widget(assistant, child)
    }

    @assistant_remove_action_widget(GtkAssistant* assistant, GtkWidget* child) void {
        @gtk_assistant_remove_action_widget(assistant, child)
    }

    @assistant_update_buttons_state(GtkAssistant* assistant) void {
        @gtk_assistant_update_buttons_state(assistant)
    }

    @assistant_commit(GtkAssistant* assistant) void {
        @gtk_assistant_commit(assistant)
    }

    @assistant_next_page(GtkAssistant* assistant) void {
        @gtk_assistant_next_page(assistant)
    }

    @assistant_previous_page(GtkAssistant* assistant) void {
        @gtk_assistant_previous_page(assistant)
    }

    // ---
    // End of GtkAssistant

    // GtkInvisible

    @invisible_new GtkWidget*? {
        @return gtk_invisible_new()
    }

    @invisible_new_for_screen(GdkScreen* screen) GtkWidget*? {
        @return gtk_invisible_new_for_screen(screen)
    }

    @invisible_set_screen(GtkInvisible* invisible, GdkScreen* screen) void {
        @gtk_invisible_set_screen(invisible, screen)
    }

    @invisible_get_screen(GtkInvisible* invisible) GdkScreen*? {
        @return gtk_invisible_get_screen(invisible)
    }

    // ---
    // End of GtkInvisible

    // GtkOffscreenWindow

    @offscreen_window_new GtkWidget*? {
        @return gtk_offscreen_window_new()
    }

    @offscreen_window_get_surface(GtkOffscreenWindow* offscreen) cairo_surface_t*? {
        @return gtk_offscreen_window_get_surface(offscreen)
    }

    @offscreen_window_get_pixbuf(GtkOffscreenWindow* offscreen) GdkPixbuf*? {
        @return gtk_offscreen_window_get_pixbuf(offscreen)
    }

    // ---
    // End of GtkOffscreenWindow

    // GtkWindowGroup

    @window_group_new GtkWindowGroup*? {
        @return gtk_window_group_new()
    }

    @window_group_add_window(GtkWindowGroup* window_group, GtkWidget* window) void {
        @gtk_window_group_add_window(window_group, GTK_WINDOW(window))
    }

    @window_group_remove_window(GtkWindowGroup* window_group, GtkWidget* window) void {
        @gtk_window_group_remove_window(window_group, GTK_WINDOW(window))
    }

    @window_group_list_windows(GtkWindowGroup* window_group) GList*? {
        @return gtk_window_group_list_windows(window_group)
    }

    @window_group_get_current_grab(GtkWindowGroup* window_group) GtkWidget*? {
        @return gtk_window_group_get_current_grab(window_group)
    }

    @window_group_get_current_device_grab(GtkWindowGroup* window_group, GdkDevice* device) GtkWidget*? {
        @return gtk_window_group_get_current_device_grab(window_group, device)
    }

    // ---
    // End of GtkWindowGroup

    // GtkBox

    @box_new(GtkOrientation orientation, gint spacing) GtkWidget*? {
        @return gtk_box_new(orientation, spacing)
    }

    @box_pack_start(GtkBox* box, GtkWidget* child, gboolean expand, gboolean fill, guint padding) void {
        @gtk_box_pack_start(box,child,expand,fill, padding)
    }

    @box_pack_end(GtkBox* box, GtkWidget* child, gboolean expand, gboolean fill, guint padding) void {
        @gtk_box_pack_end(box,child,expand,fill, padding)
    }

    @box_get_homogeneous(GtkBox* box) gboolean? {
        @return gtk_box_get_homogeneous(box)
    }

    @box_set_homogeneous(GtkBox* box, gboolean homogeneous) void {
        @gtk_box_set_homogeneous(box, homogeneous)
    }

    @box_get_spacing(GtkBox* box) gint? {
        @return gtk_box_get_spacing(box)
    }

    @box_set_spacing(GtkBox* box, gint spacing) void {
        @gtk_box_set_spacing(box, spacing)
    }

    @box_reorder_child(GtkBox* box, GtkWidget* child, gint position) void {
        @gtk_box_reorder_child(box,child, position)
    }

    @box_query_child_packing(GtkBox* box, GtkWidget* child, gboolean* expand, gboolean* fill, guint* padding, GtkPackType* pack_type) void {
        @gtk_box_query_child_packing(box,child,expand,fill,padding, pack_type)
    }

    @box_set_child_packing(GtkBox* box, GtkWidget* child, gboolean expand, gboolean fill, guint padding, GtkPackType pack_type) void {
        @gtk_box_set_child_packing(box,child,expand,fill,padding, pack_type)
    }

    @box_get_baseline_position(GtkBox* box) GtkBaselinePosition? {
        @return gtk_box_get_baseline_position(box)
    }

    @box_set_baseline_position(GtkBox* box, GtkBaselinePosition position) void {
        @gtk_box_set_baseline_position(box, position)
    }

    @box_get_center_widget(GtkBox* box) GtkWidget*? {
        @return gtk_box_get_center_widget(box)
    }

    @box_set_center_widget(GtkBox* box, GtkWidget* widget) void {
        @gtk_box_set_center_widget(box, widget)
    }

    // ---
    // End of GtkBox

    // GtkGrid

    @grid_new GtkWidget*? {
        @return gtk_grid_new()
    }

    @grid_attach(GtkGrid* grid, GtkWidget* child, gint left, gint top, gint width, gint height) void {
        @gtk_grid_attach(grid,child,left,top,width, height)
    }

    @grid_attach_next_to(GtkGrid* grid, GtkWidget* child, GtkWidget* sibling, GtkPositionType side, gint width, gint height) void {
        @gtk_grid_attach_next_to(grid,child,sibling,side,width, height)
    }

    @grid_get_child_at(GtkGrid* grid, gint left, gint top) GtkWidget*? {
        @return gtk_grid_get_child_at(grid,left, top)
    }

    @grid_insert_row(GtkGrid* grid, gint position) void {
        @gtk_grid_insert_row(grid, position)
    }

    @grid_insert_column(GtkGrid* grid, gint position) void {
        @gtk_grid_insert_column(grid, position)
    }

    @grid_remove_row(GtkGrid* grid, gint position) void {
        @gtk_grid_remove_row(grid, position)
    }

    @grid_remove_column(GtkGrid* grid, gint position) void {
        @gtk_grid_remove_column(grid, position)
    }

    @grid_insert_next_to(GtkGrid* grid, GtkWidget* sibling, GtkPositionType side) void {
        @gtk_grid_insert_next_to(grid,sibling, side)
    }

    @grid_set_row_homogeneous(GtkGrid* grid, gboolean homogeneous) void {
        @gtk_grid_set_row_homogeneous(grid, homogeneous)
    }

    @grid_get_row_homogeneous(GtkGrid* grid) gboolean? {
        @return gtk_grid_get_row_homogeneous(grid)
    }

    @grid_set_row_spacing(GtkGrid* grid, guint spacing) void {
        @gtk_grid_set_row_spacing(grid, spacing)
    }

    @grid_get_row_spacing(GtkGrid* grid) guint? {
        @return gtk_grid_get_row_spacing(grid)
    }

    @grid_set_column_homogeneous(GtkGrid* grid, gboolean homogeneous) void {
        @gtk_grid_set_column_homogeneous(grid, homogeneous)
    }

    @grid_get_column_homogeneous(GtkGrid* grid) gboolean? {
        @return gtk_grid_get_column_homogeneous(grid)
    }

    @grid_set_column_spacing(GtkGrid* grid, guint spacing) void {
        @gtk_grid_set_column_spacing(grid, spacing)
    }

    @grid_get_column_spacing(GtkGrid* grid) guint? {
        @return gtk_grid_get_column_spacing(grid)
    }

    @grid_get_baseline_row(GtkGrid* grid) guint? {
        @return gtk_grid_get_baseline_row(grid)
    }

    @grid_set_baseline_row(GtkGrid* grid, gint row) void {
        @gtk_grid_set_baseline_row(grid, row)
    }

    @grid_get_row_baseline_position(GtkGrid* grid, gint row) GtkBaselinePosition? {
        @return gtk_grid_get_row_baseline_position(grid, row)
    }

    @grid_set_row_baseline_position(GtkGrid* grid, gint row, GtkBaselinePosition pos) void {
        @gtk_grid_set_row_baseline_position(grid,row, pos)
    }

    // ---
    // End of GtkGrid

    // GtkRevealer

    @revealer_new GtkWidget*? {
        @return gtk_revealer_new()
    }

    @revealer_get_reveal_child(GtkRevealer* revealer) gboolean? {
        @return gtk_revealer_get_reveal_child(revealer)
    }

    @revealer_set_reveal_child(GtkRevealer* revealer, gboolean reveal_child) void {
        @gtk_revealer_set_reveal_child(revealer, reveal_child)
    }

    @revealer_get_child_revealed(GtkRevealer* revealer) gboolean? {
        @return gtk_revealer_get_child_revealed(revealer)
    }

    @revealer_get_transition_duration(GtkRevealer* revealer) guint? {
        @return gtk_revealer_get_transition_duration(revealer)
    }

    @revealer_set_transition_duration(GtkRevealer* revealer, guint duration) void {
        @gtk_revealer_set_transition_duration(revealer, duration)
    }

    @revealer_get_transition_type(GtkRevealer* revealer) GtkRevealerTransitionType? {
        @return gtk_revealer_get_transition_type(revealer)
    }

    @revealer_set_transition_type(GtkRevealer* revealer, GtkRevealerTransitionType transition) void {
        @gtk_revealer_set_transition_type(revealer, transition)
    }

    // ---
    // End of GtkRevealer

    // GtkListBox

    // Unimplemented: gboolean
    //(*GtkListBoxFilterFunc) (GtkListBoxRow *row,
    //                         gpointer user_data);

    // Unimplemented: gint
    //(*GtkListBoxSortFunc) (GtkListBoxRow *row1,
    //                       GtkListBoxRow *row2,
    //                       gpointer user_data);

    // Unimplemented: void
    //(*GtkListBoxUpdateHeaderFunc) (GtkListBoxRow *row,
    //                               GtkListBoxRow *before,
    //                               gpointer user_data);

    @list_box_new GtkWidget*? {
        @return gtk_list_box_new()
    }

    @list_box_prepend(GtkListBox* box, GtkWidget* child) void {
        @gtk_list_box_prepend(box, child)
    }

    @list_box_insert(GtkListBox* box, GtkWidget* child, gint position) void {
        @gtk_list_box_insert(box,child, position)
    }

    @list_box_select_row(GtkListBox* box, GtkListBoxRow* row) void {
        @gtk_list_box_select_row(box, row)
    }

    @list_box_unselect_row(GtkListBox* box, GtkListBoxRow* row) void {
        @gtk_list_box_unselect_row(box, row)
    }

    @list_box_select_all(GtkListBox* box) void {
        @gtk_list_box_select_all(box)
    }

    @list_box_unselect_all(GtkListBox* box) void {
        @gtk_list_box_unselect_all(box)
    }

    @list_box_get_selected_row(GtkListBox* box) GtkListBoxRow*? {
        @return gtk_list_box_get_selected_row(box)
    }

    // Unimplemented: void
    //(*GtkListBoxForeachFunc) (GtkListBox *box,
    //                          GtkListBoxRow *row,
    //                          gpointer user_data);

    @list_box_selected_foreach(GtkListBox* box, GtkListBoxForeachFunc func, gpointer data) void {
        @gtk_list_box_selected_foreach(box,func, data)
    }

    @list_box_get_selected_rows(GtkListBox* box) GList*? {
        @return gtk_list_box_get_selected_rows(box)
    }

    @list_box_set_selection_mode(GtkListBox* box, GtkSelectionMode mode) void {
        @gtk_list_box_set_selection_mode(box, mode)
    }

    @list_box_get_selection_mode(GtkListBox* box) GtkSelectionMode? {
        @return gtk_list_box_get_selection_mode(box)
    }

    @list_box_set_activate_on_single_click(GtkListBox* box, gboolean single) void {
        @gtk_list_box_set_activate_on_single_click(box, single)
    }

    @list_box_get_activate_on_single_click(GtkListBox* box) gboolean? {
        @return gtk_list_box_get_activate_on_single_click(box)
    }

    @list_box_get_adjustment(GtkListBox* box) GtkAdjustment*? {
        @return gtk_list_box_get_adjustment(box)
    }

    @list_box_set_adjustment(GtkListBox* box, GtkAdjustment* adjustment) void {
        @gtk_list_box_set_adjustment(box, adjustment)
    }

    @list_box_set_placeholder(GtkListBox* box, GtkWidget* placeholder) void {
        @gtk_list_box_set_placeholder(box, placeholder)
    }

    @list_box_get_row_at_index(GtkListBox* box, gint index_) GtkListBoxRow*? {
        @return gtk_list_box_get_row_at_index(box, index_)
    }

    @list_box_get_row_at_y(GtkListBox* box, gint y) GtkListBoxRow*? {
        @return gtk_list_box_get_row_at_y(box, y)
    }

    @list_box_invalidate_filter(GtkListBox* box) void {
        @gtk_list_box_invalidate_filter(box)
    }

    @list_box_invalidate_headers(GtkListBox* box) void {
        @gtk_list_box_invalidate_headers(box)
    }

    @list_box_invalidate_sort(GtkListBox* box) void {
        @gtk_list_box_invalidate_sort(box)
    }

    @list_box_set_filter_func(GtkListBox* box, GtkListBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_list_box_set_filter_func(box,filter_func,user_data, destroy)
    }

    @list_box_set_header_func(GtkListBox* box, GtkListBoxUpdateHeaderFunc update_header, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_list_box_set_header_func(box,update_header,user_data, destroy)
    }

    @list_box_set_sort_func(GtkListBox* box, GtkListBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_list_box_set_sort_func(box,sort_func,user_data, destroy)
    }

    @list_box_drag_highlight_row(GtkListBox* box, GtkListBoxRow* row) void {
        @gtk_list_box_drag_highlight_row(box, row)
    }

    @list_box_drag_unhighlight_row(GtkListBox* box) void {
        @gtk_list_box_drag_unhighlight_row(box)
    }

    // Unimplemented: GtkWidget *
    //(*GtkListBoxCreateWidgetFunc) (gpointer item,
    //                               gpointer user_data);

    @list_box_bind_model(GtkListBox* box, GListModel* model, GtkListBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func) void {
        @gtk_list_box_bind_model(box,model,create_widget_func,user_data, user_data_free_func)
    }

    @list_box_row_new GtkWidget*? {
        @return gtk_list_box_row_new()
    }

    @list_box_row_changed(GtkListBoxRow* row) void {
        @gtk_list_box_row_changed(row)
    }

    @list_box_row_is_selected(GtkListBoxRow* row) gboolean? {
        @return gtk_list_box_row_is_selected(row)
    }

    @list_box_row_get_header(GtkListBoxRow* row) GtkWidget*? {
        @return gtk_list_box_row_get_header(row)
    }

    @list_box_row_set_header(GtkListBoxRow* row, GtkWidget* header) void {
        @gtk_list_box_row_set_header(row, header)
    }

    @list_box_row_get_index(GtkListBoxRow* row) gint? {
        @return gtk_list_box_row_get_index(row)
    }

    @list_box_row_set_activatable(GtkListBoxRow* row, gboolean activatable) void {
        @gtk_list_box_row_set_activatable(row, activatable)
    }

    @list_box_row_get_activatable(GtkListBoxRow* row) gboolean {
        @return gtk_list_box_row_get_activatable(row)
    }

    @list_box_row_set_selectable(GtkListBoxRow* row, gboolean selectable) void {
        @gtk_list_box_row_set_selectable(row, selectable)
    }

    @list_box_row_get_selectable(GtkListBoxRow* row) gboolean? {
        @return gtk_list_box_row_get_selectable(row)
    }

    // ---
    // End of GtkListBox

    // GtkFlowBox

    @flow_box_new GtkWidget*? {
        @return gtk_flow_box_new()
    }

    @flow_box_insert(GtkFlowBox* box, GtkWidget* widget, gint position) void {
        @gtk_flow_box_insert(box,widget, position)
    }

    @flow_box_get_child_at_index(GtkFlowBox* box, gint idx) GtkFlowBoxChild*? {
        @return gtk_flow_box_get_child_at_index(box, idx)
    }

    @flow_box_get_child_at_pos(GtkFlowBox* box, gint x, gint y) GtkFlowBoxChild*? {
        @return gtk_flow_box_get_child_at_pos(box,x, y)
    }

    @flow_box_set_hadjustment(GtkFlowBox* box, GtkAdjustment* adjustment) void {
        @gtk_flow_box_set_hadjustment(box, adjustment)
    }

    @flow_box_set_vadjustment(GtkFlowBox* box, GtkAdjustment* adjustment) void {
        @gtk_flow_box_set_vadjustment(box, adjustment)
    }

    @flow_box_set_homogeneous(GtkFlowBox* box, gboolean homogeneous) void {
        @gtk_flow_box_set_homogeneous(box, homogeneous)
    }

    @flow_box_get_homogeneous(GtkFlowBox* box) gboolean? {
        @return gtk_flow_box_get_homogeneous(box)
    }

    @flow_box_set_row_spacing(GtkFlowBox* box, guint spacing) void {
        @gtk_flow_box_set_row_spacing(box, spacing)
    }

    @flow_box_get_row_spacing(GtkFlowBox* box) guint? {
        @return gtk_flow_box_get_row_spacing(box)
    }

    @flow_box_set_column_spacing(GtkFlowBox* box, guint spacing) void {
        @gtk_flow_box_set_column_spacing(box, spacing)
    }

    @flow_box_get_column_spacing(GtkFlowBox* box) guint? {
        @return gtk_flow_box_get_column_spacing(box)
    }

    @flow_box_set_min_children_per_line(GtkFlowBox* box, guint n_children) void {
        @gtk_flow_box_set_min_children_per_line(box, n_children)
    }

    @flow_box_get_min_children_per_line(GtkFlowBox* box) guint? {
        @return gtk_flow_box_get_min_children_per_line(box)
    }

    @flow_box_set_max_children_per_line(GtkFlowBox* box, guint n_children) void {
        @gtk_flow_box_set_max_children_per_line(box, n_children)
    }

    @flow_box_get_max_children_per_line(GtkFlowBox* box) guint? {
        @return gtk_flow_box_get_max_children_per_line(box)
    }

    @flow_box_set_activate_on_single_click(GtkFlowBox* box, gboolean single) void {
        @gtk_flow_box_set_activate_on_single_click(box, single)
    }

    @flow_box_get_activate_on_single_click(GtkFlowBox* box) gboolean? {
        @return gtk_flow_box_get_activate_on_single_click(box)
    }

    // Unimplemented: void
    //(*GtkFlowBoxForeachFunc) (GtkFlowBox *box,
    //                          GtkFlowBoxChild *child,
    //                          gpointer user_data);

    @flow_box_selected_foreach(GtkFlowBox* box, GtkFlowBoxForeachFunc func, gpointer data) void {
        @gtk_flow_box_selected_foreach(box,func, data)
    }

    @flow_box_get_selected_children(GtkFlowBox* box) GList*? {
        @return gtk_flow_box_get_selected_children(box)
    }

    @flow_box_select_child(GtkFlowBox* box, GtkFlowBoxChild* child) void {
        @gtk_flow_box_select_child(box, child)
    }

    @flow_box_unselect_child(GtkFlowBox* box, GtkFlowBoxChild* child) void {
        @gtk_flow_box_unselect_child(box, child)
    }

    @flow_box_select_all(GtkFlowBox* box) void {
        @gtk_flow_box_select_all(box)
    }

    @flow_box_unselect_all(GtkFlowBox* box) void {
        @gtk_flow_box_unselect_all(box)
    }

    @flow_box_set_selection_mode(GtkFlowBox* box, GtkSelectionMode mode) void {
        @gtk_flow_box_set_selection_mode(box, mode)
    }

    @flow_box_get_selection_mode(GtkFlowBox* box) GtkSelectionMode? {
        @return gtk_flow_box_get_selection_mode(box)
    }

    // Unimplemented: gboolean
    //(*GtkFlowBoxFilterFunc) (GtkFlowBoxChild *child,
    //                         gpointer user_data);

    @flow_box_set_filter_func(GtkFlowBox* box, GtkFlowBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_flow_box_set_filter_func(box,filter_func,user_data, destroy)
    }

    @flow_box_invalidate_filter(GtkFlowBox* box) void {
        @gtk_flow_box_invalidate_filter(box)
    }

    // Unimplemented: gint
    //(*GtkFlowBoxSortFunc) (GtkFlowBoxChild *child1,
    //                       GtkFlowBoxChild *child2,
    //                       gpointer user_data);

    @flow_box_set_sort_func(GtkFlowBox* box, GtkFlowBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_flow_box_set_sort_func(box,sort_func,user_data,destroy)
    }

    @flow_box_invalidate_sort(GtkFlowBox* box) void {
        @gtk_flow_box_invalidate_sort(box)
    }

    // Unimplemented: GtkWidget *
    //(*GtkFlowBoxCreateWidgetFunc) (gpointer item,
    //                               gpointer user_data);

    @flow_box_bind_model(GtkFlowBox* box, GListModel *model, GtkFlowBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func) void {
        @gtk_flow_box_bind_model(box,model,create_widget_func,user_data, user_data_free_func)
    }

    @flow_box_child_new GtkWidget*? {
        @return gtk_flow_box_child_new()
    }

    @flow_box_child_get_index(GtkFlowBoxChild* child) gint? {
        @return gtk_flow_box_child_get_index(child)
    }

    @flow_box_child_is_selected(GtkFlowBoxChild* child) gboolean? {
        @return gtk_flow_box_child_is_selected(child)
    }

    @flow_box_child_changed(GtkFlowBoxChild* child) void {
        @gtk_flow_box_child_changed(child)
    }

    // ---
    // End of GtkFlowBox

    // GtkStack

    @stack_new GtkWidget*? {
        @return gtk_stack_new()
    }

    @stack_add_named(GtkStack* stack, GtkWidget* child, const gchar* name) void {
        @gtk_stack_add_named(stack,child, name)
    }

    @stack_add_titled(GtkStack* stack, GtkWidget* child, const gchar* name, const gchar* title) void {
        @gtk_stack_add_titled(stack,child,name, title)
    }

    @stack_get_child_by_name(GtkStack* stack, const gchar* name) GtkWidget*? {
        @return gtk_stack_get_child_by_name(stack, name)
    }

    @stack_set_visible_child(GtkStack* stack, GtkWidget* child) void {
        @gtk_stack_set_visible_child(stack, child)
    }

    @stack_get_visible_child(GtkStack* stack) GtkWidget*? {
        @return gtk_stack_get_visible_child(stack)
    }

    @stack_set_visible_child_name(GtkStack* stack, const gchar* name) void {
        @gtk_stack_set_visible_child_name(stack, name)
    }

    #const gchar* stack_get_visible_child_name(GtkStack* stack) {
        @return gtk_stack_get_visible_child_name(stack)
    }

    @stack_set_visible_child_full(GtkStack* stack, const gchar* name, GtkStackTransitionType transition) void {
        @gtk_stack_set_visible_child_full(stack,name, transition)
    }

    @stack_set_homogeneous(GtkStack* stack, gboolean homogeneous) void {
        @gtk_stack_set_homogeneous(stack, homogeneous)
    }

    @stack_get_homogeneous(GtkStack* stack) gboolean? {
        @return gtk_stack_get_homogeneous(stack)
    }

    @stack_set_hhomogeneous(GtkStack* stack, gboolean hhomogeneous) void {
        @gtk_stack_set_hhomogeneous(stack, hhomogeneous)
    }

    @stack_get_hhomogeneous(GtkStack* stack) gboolean? {
        @return gtk_stack_get_hhomogeneous(stack)
    }

    @stack_set_vhomogeneous(GtkStack* stack, gboolean vhomogeneous) void {
        @gtk_stack_set_vhomogeneous(stack, vhomogeneous)
    }

    @stack_get_vhomogeneous(GtkStack* stack) gboolean? {
        @return gtk_stack_get_vhomogeneous(stack)
    }

    @stack_set_transition_duration(GtkStack* stack, guint duration) void {
        @gtk_stack_set_transition_duration(stack, duration)
    }

    @stack_get_transition_duration(GtkStack* stack) guint? {
        @return gtk_stack_get_transition_duration(stack)
    }

    @stack_set_transition_type(GtkStack* stack, GtkStackTransitionType transition) void {
        @gtk_stack_set_transition_type(stack, transition)
    }

    @stack_get_transition_type(GtkStack* stack) GtkStackTransitionType? {
        @return gtk_stack_get_transition_type(stack)
    }

    @stack_get_transition_running(GtkStack* stack) gboolean? {
        @return gtk_stack_get_transition_running(stack)
    }

    @stack_get_interpolate_size(GtkStack* stack) gboolean? {
        @return gtk_stack_get_interpolate_size(stack)
    }

    @stack_set_interpolate_size(GtkStack* stack, gboolean interpolate_size) void {
        @gtk_stack_set_interpolate_size(stack, interpolate_size)
    }

    // ---
    // End of GtkStack

    // GtkStackSwitcher

    @stack_switcher_new GtkWidget*? {
        @return gtk_stack_switcher_new()
    }

    @stack_switcher_set_stack(GtkStackSwitcher* switcher, GtkStack* stack) void {
        @gtk_stack_switcher_set_stack(switcher, stack)
    }

    @stack_switcher_get_stack(GtkStackSwitcher* switcher) GtkStack*? {
        @return gtk_stack_switcher_get_stack(switcher)
    }

    // ---
    // End of GtkStackSwitcher

    // GtkStackSidebar

    @stack_sidebar_new GtkWidget*? {
        @return gtk_stack_sidebar_new()
    }

    @stack_sidebar_set_stack(GtkStackSidebar* sidebar, GtkStack* stack) void {
        @gtk_stack_sidebar_set_stack(sidebar, stack)
    }

    @stack_sidebar_get_stack(GtkStackSidebar* sidebar) GtkStack*? {
        @return gtk_stack_sidebar_get_stack(sidebar)
    }

    // ---
    // End of GtkStackSidebar

    // GtkActionBar

    @action_bar_new GtkWidget*? {
        @return gtk_action_bar_new()
    }

    @action_bar_pack_start(GtkActionBar* action_bar, GtkWidget* child) void {
        @gtk_action_bar_pack_start(action_bar, child)
    }

    @action_bar_pack_end(GtkActionBar* action_bar, GtkWidget* child) void {
        @gtk_action_bar_pack_end(action_bar, child)
    }

    @action_bar_get_center_widget(GtkActionBar* action_bar) GtkWidget*? {
        @return gtk_action_bar_get_center_widget(action_bar)
    }

    @action_bar_set_center_widget(GtkActionBar* action_bar, GtkWidget* center_widget) void {
        @gtk_action_bar_set_center_widget(action_bar, center_widget)
    }

    // ---
    // End of GtkActionBar

    // GtkHeaderBar

    @header_bar_new GtkWidget*? {
        @return gtk_header_bar_new()
    }

    @header_bar_set_title(GtkHeaderBar* bar, const gchar* title) void {
        @gtk_header_bar_set_title(bar, title)
    }

    #const gchar* header_bar_get_title(GtkHeaderBar* bar) {
        @return gtk_header_bar_get_title(bar)
    }

    @header_bar_set_subtitle(GtkHeaderBar* bar, const gchar* subtitle) void {
        @gtk_header_bar_set_subtitle(bar, subtitle)
    }

    #const gchar* header_bar_get_subtitle(GtkHeaderBar* bar) {
        @return gtk_header_bar_get_subtitle(bar)
    }

    @header_bar_set_has_subtitle(GtkHeaderBar* bar, gboolean setting) void {
        @gtk_header_bar_set_has_subtitle(bar, setting)
    }

    @header_bar_get_has_subtitle(GtkHeaderBar* bar) gboolean? {
        @return gtk_header_bar_get_has_subtitle(bar)
    }

    @header_bar_set_custom_title(GtkHeaderBar* bar, GtkWidget* title_widget) void {
        @gtk_header_bar_set_custom_title(bar, title_widget)
    }

    @header_bar_get_custom_title(GtkHeaderBar* bar) GtkWidget*? {
        @return gtk_header_bar_get_custom_title(bar)
    }

    @header_bar_pack_start(GtkHeaderBar* bar, GtkWidget* child) void {
        @gtk_header_bar_pack_start(bar, child)
    }

    @header_bar_pack_end(GtkHeaderBar* bar, GtkWidget* child) void {
        @gtk_header_bar_pack_end(bar, child)
    }

    @header_bar_set_show_close_button(GtkHeaderBar* bar, gboolean setting) void {
        @gtk_header_bar_set_show_close_button(bar, setting)
    }

    @header_bar_get_show_close_button(GtkHeaderBar* bar) gboolean? {
        @return gtk_header_bar_get_show_close_button(bar)
    }

    @header_bar_set_decoration_layout(GtkHeaderBar* bar, const gchar* layout) void {
        @gtk_header_bar_set_decoration_layout(bar, layout)
    }

    #const gchar* header_bar_get_decoration_layout(GtkHeaderBar* bar) {
        @return gtk_header_bar_get_decoration_layout(bar)
    }

    // ---
    // End of GtkHeaderBar

    // GtkOverlay

    @overlay_new GtkWidget*? {
        @return gtk_overlay_new()
    }

    @overlay_add_overlay(GtkOverlay* overlay, GtkWidget* widget) void {
        @gtk_overlay_add_overlay(overlay, widget)
    }

    @overlay_reorder_overlay(GtkOverlay* overlay, GtkWidget* child, int index_) void {
        @gtk_overlay_reorder_overlay(overlay,child, index_)
    }

    @overlay_get_overlay_pass_through(GtkOverlay* overlay, GtkWidget* widget) gboolean? {
        @return gtk_overlay_get_overlay_pass_through(overlay, widget)
    }

    @overlay_set_overlay_pass_through(GtkOverlay* overlay, GtkWidget* widget, gboolean pass_through) void {
        @gtk_overlay_set_overlay_pass_through(overlay,widget, pass_through)
    }

    // ---
    // End of GtkOverlay

    // GtkButtonBox

    @button_box_new(GtkOrientation orientation) GtkWidget*? {
        @return gtk_button_box_new(orientation)
    }

    @button_box_get_layout(GtkButtonBox* widget) GtkButtonBoxStyle? {
        @return gtk_button_box_get_layout(widget)
    }

    @button_box_get_child_secondary(GtkButtonBox* widget, GtkWidget* child) gboolean? {
        @return gtk_button_box_get_child_secondary(widget, child)
    }

    @button_box_get_child_non_homogeneous(GtkButtonBox* widget, GtkWidget* child) gboolean? {
        @return gtk_button_box_get_child_non_homogeneous(widget, child)
    }

    @button_box_set_layout(GtkButtonBox* widget, GtkButtonBoxStyle layout_style) void {
        @gtk_button_box_set_layout(widget, layout_style)
    }

    @button_box_set_child_secondary(GtkButtonBox* widget, GtkWidget* child, gboolean is_secondary) void {
        @gtk_button_box_set_child_secondary(widget,child, is_secondary)
    }

    @button_box_set_child_non_homogeneous(GtkButtonBox* widget, GtkWidget* child, gboolean non_homogeneous) void {
        @gtk_button_box_set_child_non_homogeneous(widget,child, non_homogeneous)
    }

    // ---
    // End of GtkButtonBox

    // GtkPaned

    @paned_new(GtkOrientation orientation) GtkWidget*? {
        @return gtk_paned_new(orientation)
    }

    @paned_add1(GtkPaned* paned, GtkWidget* child) void {
        @gtk_paned_add1(paned, child)
    }

    @paned_add2(GtkPaned* paned, GtkWidget* child) void {
        @gtk_paned_add2(paned, child)
    }

    @paned_pack1(GtkPaned* paned, GtkWidget* child, gboolean resize, gboolean shrink) void {
        @gtk_paned_pack1(paned,child,resize, shrink)
    }

    @paned_pack2(GtkPaned* paned, GtkWidget* child, gboolean resize, gboolean shrink) void {
        @gtk_paned_pack2(paned,child,resize, shrink)
    }

    @paned_get_child1(GtkPaned* paned) GtkWidget*? {
        @return gtk_paned_get_child1(paned)
    }

    @paned_get_child2(GtkPaned* paned) GtkWidget*? {
        @return gtk_paned_get_child2(paned)
    }

    @paned_set_position(GtkPaned* paned, gint position) void {
        @gtk_paned_set_position(paned, position)
    }

    @paned_get_position(GtkPaned* paned) gint? {
        @return gtk_paned_get_position(paned)
    }

    @paned_get_handle_window(GtkPaned* paned) GdkWindow*? {
        @return gtk_paned_get_handle_window(paned)
    }

    @paned_set_wide_handle(GtkPaned* paned, gboolean wide) void {
        @gtk_paned_set_wide_handle(paned, wide)
    }

    @paned_get_wide_handle(GtkPaned* paned) gboolean? {
        @return gtk_paned_get_wide_handle(paned)
    }

    // ---
    // End of GtkPaned

    // GtkLayout

    @layout_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment) GtkWidget*? {
        @return gtk_layout_new(hadjustment, vadjustment)
    }

    @layout_put(GtkLayout* layout, GtkWidget* child_widget, gint x, gint y) void {
        @gtk_layout_put(layout,child_widget,x, y)
    }

    @layout_move(GtkLayout* layout, GtkWidget* child_widget, gint x, gint y) void {
        @gtk_layout_move(layout,child_widget,x, y)
    }

    @layout_set_size(GtkLayout* layout, guint width, guint height) void {
        @gtk_layout_set_size(layout,width, height)
    }

    @layout_get_size(GtkLayout* layout, guint* width, guint* height) void {
        @gtk_layout_get_size(layout,width, height)
    }

    // Deprecated: @gtk_layout_get_hadjustment(GtkLayout *layout)

    // Deprecated: @gtk_layout_get_vadjustment(GtkLayout *layout)

    // Deprecated: @gtk_layout_set_hadjustment(GtkLayout *layout, GtkAdjustment *adjustment)

    // Deprecated: @gtk_layout_set_vadjustment(GtkLayout *layout, GtkAdjustment *adjustment)

    @layout_get_bin_window(GtkLayout* layout) GdkWindow*? {
        @return gtk_layout_get_bin_window(layout)
    }

    // ---
    // End of GtkLayout

    // GtkNotebook

    @notebook_new GtkWidget*? {
        @return gtk_notebook_new()
    }

    @notebook_append_page(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label) gint? {
        @return gtk_notebook_append_page(notebook,child, tab_label)
    }

    @notebook_append_page_menu(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label, GtkWidget* menu_label) gint? {
        @return gtk_notebook_append_page_menu(notebook,child,tab_label, menu_label)
    }

    @notebook_prepend_page(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label) gint? {
        @return gtk_notebook_prepend_page(notebook,child, tab_label)
    }

    @notebook_prepend_page_menu(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label, GtkWidget* menu_label) gint? {
        @return gtk_notebook_prepend_page_menu(notebook,child,tab_label, menu_label)
    }

    @notebook_insert_page(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label, gint position) gint? {
        @return gtk_notebook_insert_page(notebook,child,tab_label, position)
    }

    @notebook_insert_page_menu(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label, GtkWidget* menu_label, gint position) gint? {
        @return gtk_notebook_insert_page_menu(notebook,child,tab_label,menu_label, position)
    }

    @notebook_remove_page(GtkNotebook* notebook, gint page_num) void {
        @gtk_notebook_remove_page(notebook, page_num)
    }

    @notebook_detach_tab(GtkNotebook* notebook, GtkWidget* child) void {
        @gtk_notebook_detach_tab(notebook, child)
    }

    @notebook_page_num(GtkNotebook* notebook, GtkWidget* child) gint? {
        @return gtk_notebook_page_num(notebook, child)
    }

    @notebook_next_page(GtkNotebook* notebook) void {
        @gtk_notebook_next_page(notebook)
    }

    @notebook_prev_page(GtkNotebook* notebook) void {
        @gtk_notebook_prev_page(notebook)
    }

    @notebook_reorder_child(GtkNotebook* notebook, GtkWidget* child, gint position) void {
        @gtk_notebook_reorder_child(notebook,child, position)
    }

    @notebook_set_tab_pos(GtkNotebook* notebook, GtkPositionType pos) void {
        @gtk_notebook_set_tab_pos(notebook, pos)
    }

    @notebook_set_show_tabs(GtkNotebook* notebook, gboolean show_tabs) void {
        @gtk_notebook_set_show_tabs(notebook, show_tabs)
    }

    @notebook_set_show_border(GtkNotebook* notebook, gboolean show_border) void {
        @gtk_notebook_set_show_border(notebook, show_border)
    }

    @notebook_set_scrollable(GtkNotebook* notebook, gboolean scrollable) void {
        @gtk_notebook_set_scrollable(notebook, scrollable)
    }

    @notebook_popup_enable(GtkNotebook* notebook) void {
        @gtk_notebook_popup_enable(notebook)
    }

    @notebook_popup_disable(GtkNotebook* notebook) void {
        @gtk_notebook_popup_disable(notebook)
    }

    @notebook_get_current_page(GtkNotebook* notebook) gint? {
        @return gtk_notebook_get_current_page(notebook)
    }

    @notebook_get_menu_label(GtkNotebook* notebook, GtkWidget* child) GtkWidget*? {
        @return gtk_notebook_get_menu_label(notebook, child)
    }

    @notebook_get_nth_page(GtkNotebook* notebook, gint page_num) GtkWidget*? {
        @return gtk_notebook_get_nth_page(notebook, page_num)
    }

    @notebook_get_n_pages(GtkNotebook* notebook) gint? {
        @return gtk_notebook_get_n_pages(notebook)
    }

    @notebook_get_tab_label(GtkNotebook* notebook, GtkWidget* child) GtkWidget*? {
        @return gtk_notebook_get_tab_label(notebook, child)
    }

    @notebook_set_menu_label(GtkNotebook* notebook, GtkWidget* child, GtkWidget* menu_label) void {
        @gtk_notebook_set_menu_label(notebook,child, menu_label)
    }

    @notebook_set_menu_label_text(GtkNotebook* notebook, GtkWidget* child, const gchar* menu_text) void {
        @gtk_notebook_set_menu_label_text(notebook,child, menu_text)
    }

    @notebook_set_tab_label(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tab_label) void {
        @gtk_notebook_set_tab_label(notebook,child, tab_label)
    }

    @notebook_set_tab_label_text(GtkNotebook* notebook, GtkWidget* child, const gchar* tab_text) void {
        @gtk_notebook_set_tab_label_text(notebook,child, tab_text)
    }

    @notebook_set_tab_reorderable(GtkNotebook* notebook, GtkWidget* child, gboolean reorderable) void {
        @gtk_notebook_set_tab_reorderable(notebook,child, reorderable)
    }

    @notebook_set_tab_detachable(GtkNotebook* notebook, GtkWidget* child, gboolean detachable) void {
        @gtk_notebook_set_tab_detachable(notebook,child, detachable)
    }

    #const gchar* notebook_get_menu_label_text(GtkNotebook* notebook, GtkWidget* child) {
        @return gtk_notebook_get_menu_label_text(notebook, child)
    }

    @notebook_get_scrollable(GtkNotebook* notebook) gboolean? {
        @return gtk_notebook_get_scrollable(notebook)
    }

    @notebook_get_show_border(GtkNotebook* notebook) gboolean? {
        @return gtk_notebook_get_show_border(notebook)
    }

    @notebook_get_show_tabs(GtkNotebook* notebook) gboolean? {
        @return gtk_notebook_get_show_tabs(notebook)
    }

    #const gchar* notebook_get_tab_label_text(GtkNotebook* notebook, GtkWidget* child) {
        @return gtk_notebook_get_tab_label_text(notebook, child)
    }

    @notebook_get_tab_pos(GtkNotebook* notebook) GtkPositionType? {
        @return gtk_notebook_get_tab_pos(notebook)
    }

    @notebook_get_tab_reorderable(GtkNotebook* notebook, GtkWidget* child) gboolean? {
        @return gtk_notebook_get_tab_reorderable(notebook, child)
    }

    @notebook_get_tab_detachable(GtkNotebook* notebook, GtkWidget* child) gboolean? {
        @return gtk_notebook_get_tab_detachable(notebook, child)
    }

    // Deprecated: @notebook_get_tab_hborder(GtkNotebook *notebook)
    // Deprecated: @notebook_get_tab_vborder(GtkNotebook *notebook)

    @notebook_set_current_page(GtkNotebook* notebook, gint page_num) void {
        @gtk_notebook_set_current_page(notebook, page_num)
    }

    @notebook_set_group_name(GtkNotebook* notebook, const gchar* group_name) void {
        @gtk_notebook_set_group_name(notebook, group_name)
    }

    #const gchar* notebook_get_group_name(GtkNotebook* notebook) {
        @return gtk_notebook_get_group_name(notebook)
    }

    @notebook_set_action_widget(GtkNotebook* notebook, GtkWidget* widget, GtkPackType pack_type) void {
        @gtk_notebook_set_action_widget(notebook,widget, pack_type)
    }

    @notebook_get_action_widget(GtkNotebook* notebook, GtkPackType pack_type) GtkWidget*? {
        @return gtk_notebook_get_action_widget(notebook, pack_type)
    }

    // ---
    // End of GtkNotebook

    // GtkExpander

    @expander_new(const gchar* label) GtkWidget*? {
        @return gtk_expander_new(label)
    }

    @expander_new_with_mnemonic(const gchar* label) GtkWidget*? {
        @return gtk_expander_new_with_mnemonic(label)
    }

    @expander_set_expanded(GtkExpander* expander, gboolean expanded) void {
        @gtk_expander_set_expanded(expander, expanded)
    }

    @expander_get_expanded(GtkExpander* expander) gboolean? {
        @return gtk_expander_get_expanded(expander)
    }

    // Deprecated: @expander_set_spacing(GtkExpander *expander,
    //                          gint spacing)

    // Deprecated: @expander_get_spacing(GtkExpander *expander)

    @expander_set_label(GtkExpander* expander, const gchar* label) void {
        @gtk_expander_set_label(expander, label)
    }

    #const gchar* expander_get_label(GtkExpander* expander) {
        @return gtk_expander_get_label(expander)
    }

    @expander_set_use_underline(GtkExpander* expander, gboolean use_underline) void {
        @gtk_expander_set_use_underline(expander, use_underline)
    }

    @expander_get_use_underline(GtkExpander* expander) gboolean? {
        @return gtk_expander_get_use_underline(expander)
    }

    @expander_set_use_markup(GtkExpander* expander, gboolean use_markup) void {
        @gtk_expander_set_use_markup(expander, use_markup)
    }

    @expander_get_use_markup(GtkExpander* expander) gboolean? {
        @return gtk_expander_get_use_markup(expander)
    }

    @expander_set_label_widget(GtkExpander* expander, GtkWidget* label_widget) void {
        @gtk_expander_set_label_widget(expander, label_widget)
    }

    @expander_get_label_widget(GtkExpander* expander) GtkWidget*? {
        @return gtk_expander_get_label_widget(expander)
    }

    @expander_set_label_fill(GtkExpander* expander, gboolean label_fill) void {
        @gtk_expander_set_label_fill(expander, label_fill)
    }

    @expander_get_label_fill(GtkExpander* expander) gboolean? {
        @return gtk_expander_get_label_fill(expander)
    }

    @expander_set_resize_toplevel(GtkExpander* expander, gboolean resize_toplevel) void {
        @gtk_expander_set_resize_toplevel(expander, resize_toplevel)
    }

    @expander_get_resize_toplevel(GtkExpander* expander) gboolean? {
        @return gtk_expander_get_resize_toplevel(expander)
    }

    // ---
    // End of GtkExpander

    // GtkOrientable

    @orientable_get_orientation(GtkOrientable* orientable) GtkOrientation? {
        @return gtk_orientable_get_orientation(orientable)
    }

    @orientable_set_orientation(GtkOrientable* orientable, GtkOrientation orientation) void {
        @gtk_orientable_set_orientation(orientable, orientation)
    }

    // ---
    // End of GtkOrientable

    // GtkAspectFrame

    @aspect_frame_new(const gchar* label, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child) GtkWidget*? {
        @return gtk_aspect_frame_new(label,xalign,yalign,ratio, obey_child)
    }

    @aspect_frame_set(GtkAspectFrame* aspect_frame, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child) void {
        @gtk_aspect_frame_set(aspect_frame,xalign,yalign,ratio, obey_child)
    }

    // ---
    // End of GtkAspectFrame

    // GtkFixed

    @fixed_new GtkWidget*? {
        @return gtk_fixed_new()
    }

    @fixed_put(GtkFixed* fixed, GtkWidget* widget, gint x, gint y) void {
        @gtk_fixed_put(fixed,widget,x, y)
    }

    @fixed_move(GtkFixed* fixed, GtkWidget* widget, gint x, gint y) void {
        @gtk_fixed_move(fixed,widget,x, y)
    }

    // ---
    // End of GtkFixed

    // GtkLabel

    @label_new(const gchar* str) GtkWidget*? {
        @return gtk_label_new(str)
    }

    @label_set_text(GtkLabel* label, const gchar* str) void {
        @gtk_label_set_text(label, str)
    }

    @label_set_attributes(GtkLabel* label, PangoAttrList* attrs) void {
        @gtk_label_set_attributes(label, attrs)
    }

    @label_set_markup(GtkLabel* label, const gchar* str) void {
        @gtk_label_set_markup(label, str)
    }

    @label_set_markup_with_mnemonic(GtkLabel* label, const gchar* str) void {
        @gtk_label_set_markup_with_mnemonic(label, str)
    }

    @label_set_pattern(GtkLabel* label, const gchar* pattern) void {
        @gtk_label_set_pattern(label, pattern)
    }

    @label_set_justify(GtkLabel* label, GtkJustification jtype) void {
        @gtk_label_set_justify(label, jtype)
    }

    @label_set_xalign(GtkLabel* label, gfloat xalign) void {
        @gtk_label_set_xalign(label, xalign)
    }

    @label_set_yalign(GtkLabel* label, gfloat yalign) void {
        @gtk_label_set_yalign(label, yalign)
    }

    @label_set_ellipsize(GtkLabel* label, PangoEllipsizeMode mode) void {
        @gtk_label_set_ellipsize(label, mode)
    }

    @label_set_width_chars(GtkLabel* label, gint n_chars) void {
        @gtk_label_set_width_chars(label, n_chars)
    }

    @label_set_max_width_chars(GtkLabel* label, gint n_chars) void {
        @gtk_label_set_max_width_chars(label, n_chars)
    }

    @label_set_line_wrap(GtkLabel* label, gboolean wrap) void {
        @gtk_label_set_line_wrap(label, wrap)
    }

    @label_set_line_wrap_mode(GtkLabel* label, PangoWrapMode wrap_mode) void {
        @gtk_label_set_line_wrap_mode(label, wrap_mode)
    }

    @label_set_lines(GtkLabel* label, gint lines) void {
        @gtk_label_set_lines(label, lines)
    }

    @label_get_layout_offsets(GtkLabel* label, gint* x, gint* y) void {
        @gtk_label_get_layout_offsets(label,x, y)
    }

    @label_get_mnemonic_keyval(GtkLabel* label) guint? {
        @return gtk_label_get_mnemonic_keyval(label)
    }

    @label_get_selectable(GtkLabel* label) gboolean? {
        @return gtk_label_get_selectable(label)
    }

    #const gchar* label_get_text(GtkLabel* label) {
        @return gtk_label_get_text(label)
    }

    @label_new_with_mnemonic(const gchar* str) GtkWidget*? {
        @return gtk_label_new_with_mnemonic(str)
    }

    @label_select_region(GtkLabel* label, gint start_offset, gint end_offset) void {
        @gtk_label_select_region(label,start_offset, end_offset)
    }

    @label_set_mnemonic_widget(GtkLabel* label, GtkWidget* widget) void {
        @gtk_label_set_mnemonic_widget(label, widget)
    }

    @label_set_selectable(GtkLabel* label, gboolean setting) void {
        @gtk_label_set_selectable(label, setting)
    }

    @label_set_text_with_mnemonic(GtkLabel* label, const gchar* str) void {
        @gtk_label_set_text_with_mnemonic(label, str)
    }

    @label_get_attributes(GtkLabel* label) PangoAttrList*? {
        @return gtk_label_get_attributes(label)
    }

    @label_get_justify(GtkLabel* label) GtkJustification? {
        @return gtk_label_get_justify(label)
    }

    @label_get_xalign(GtkLabel* label) gfloat? {
        @return gtk_label_get_xalign(label)
    }

    @label_get_yalign(GtkLabel* label) gfloat? {
        @return gtk_label_get_yalign(label)
    }

    @label_get_ellipsize(GtkLabel* label) PangoEllipsizeMode? {
        @return gtk_label_get_ellipsize(label)
    }

    @label_get_width_chars(GtkLabel* label) gint? {
        @return gtk_label_get_width_chars(label)
    }

    @label_get_max_width_chars(GtkLabel* label) gint? {
        @return gtk_label_get_max_width_chars(label)
    }

    #const gchar* label_get_label(GtkLabel* label) {
        @return gtk_label_get_label(label)
    }

    @label_get_layout(GtkLabel* label) PangoLayout*? {
        @return gtk_label_get_layout(label)
    }

    @label_get_line_wrap(GtkLabel* label) gboolean? {
        @return gtk_label_get_line_wrap(label)
    }

    @label_get_line_wrap_mode(GtkLabel* label) PangoWrapMode? {
        @return gtk_label_get_line_wrap_mode(label)
    }

    @label_get_lines(GtkLabel* label) gint? {
        @return gtk_label_get_lines(label)
    }

    @label_get_mnemonic_widget(GtkLabel* label) GtkWidget*? {
        @return gtk_label_get_mnemonic_widget(label)
    }

    @label_get_selection_bounds(GtkLabel* label, gint* start, gint* end) gboolean? {
        @return gtk_label_get_selection_bounds(label,start, end)
    }

    @label_get_use_markup(GtkLabel* label) gboolean? {
        @return gtk_label_get_use_markup(label)
    }

    @label_get_use_underline(GtkLabel* label) gboolean? {
        @return gtk_label_get_use_underline(label)
    }

    @label_get_single_line_mode(GtkLabel* label) gboolean? {
        @return gtk_label_get_single_line_mode(label)
    }

    @label_get_angle(GtkLabel* label) gdouble? {
        @return gtk_label_get_angle(label)
    }

    @label_set_label(GtkLabel* label, const gchar* str) void {
        @gtk_label_set_label(label, str)
    }

    @label_set_use_markup(GtkLabel* label, gboolean setting) void {
        @gtk_label_set_use_markup(label, setting)
    }

    @label_set_use_underline(GtkLabel* label, gboolean setting) void {
        @gtk_label_set_use_underline(label, setting)
    }

    @label_set_single_line_mode(GtkLabel* label, gboolean single_line_mode) void {
        @gtk_label_set_single_line_mode(label, single_line_mode)
    }

    @label_set_angle(GtkLabel* label, gdouble angle) void {
        @gtk_label_set_angle(label, angle)
    }

    #const gchar* label_get_current_uri(GtkLabel* label) {
        @return gtk_label_get_current_uri(label)
    }

    @label_set_track_visited_links(GtkLabel* label, gboolean track_links) void {
        @gtk_label_set_track_visited_links(label, track_links)
    }

    @label_get_track_visited_links(GtkLabel* label) gboolean? {
        @return gtk_label_get_track_visited_links(label)
    }

    // ---
    // End of GtkLabel

    // GtkImage

    // Deprecated: @image_get_icon_set(GtkImage *image,
    //                        GtkIconSet **icon_set,
    //                        GtkIconSize *size)

    @image_get_pixbuf(GtkImage* image) GdkPixbuf*? {
        @return gtk_image_get_pixbuf(image)
    }

    // Deprecated: @image_get_stock(GtkImage *image,
    //                     gchar **stock_id,
    //                     GtkIconSize *size)

    @image_get_animation(GtkImage* image) GdkPixbufAnimation*? {
        @return gtk_image_get_animation(image)
    }

    @image_get_icon_name(GtkImage* image, const gchar** icon_name, GtkIconSize* size) void {
        @gtk_image_get_icon_name(image,icon_name, size)
    }

    @image_get_gicon(GtkImage* image, GIcon** gicon, GtkIconSize* size) void {
        @gtk_image_get_gicon(image,gicon, size)
    }

    @image_get_storage_type(GtkImage* image) GtkImageType? {
        @return gtk_image_get_storage_type(image)
    }

    @image_new_from_file(const gchar* filename) GtkWidget*? {
        @return gtk_image_new_from_file(filename)
    }

    // Deprecated: @image_new_from_icon_set(GtkIconSet *icon_set,
    //                             GtkIconSize size)

    @image_new_from_pixbuf(GdkPixbuf* pixbuf) GtkWidget*? {
        @return gtk_image_new_from_pixbuf(pixbuf)
    }

    // Deprecated: @gtk_image_new_from_stock(const gchar *stock_id,
    //                          GtkIconSize size)

    @image_new_from_animation(GdkPixbufAnimation* animation) GtkWidget*? {
        @return gtk_image_new_from_animation(animation)
    }

    @image_new_from_icon_name(const gchar* icon_name, GtkIconSize size) GtkWidget*? {
        @return gtk_image_new_from_icon_name(icon_name, size)
    }

    @image_new_from_gicon(GIcon* icon, GtkIconSize size) GtkWidget*? {
        @return gtk_image_new_from_gicon(icon, size)
    }

    @image_new_from_resource(const gchar* resource_path) GtkWidget*? {
        @return gtk_image_new_from_resource(resource_path)
    }

    @image_new_from_surface(cairo_surface_t* surface) GtkWidget*? {
        @return gtk_image_new_from_surface(surface)
    }

    @image_set_from_file(GtkImage* image, const gchar* filename) void {
        @gtk_image_set_from_file(image, filename)
    }

    // Deprecated: @image_set_from_icon_set(GtkImage *image,
    //                             GtkIconSet *icon_set,
    //                             GtkIconSize size)

    @image_set_from_pixbuf(GtkImage* image, GdkPixbuf* pixbuf) void {
        @gtk_image_set_from_pixbuf(image, pixbuf)
    }

    // Deprecated: @gtk_image_set_from_stock(GtkImage *image,
    //                          const gchar *stock_id,
    //                          GtkIconSize size)

    @image_set_from_animation(GtkImage* image, GdkPixbufAnimation* animation) void {
        @gtk_image_set_from_animation(image, animation)
    }

    @image_set_from_icon_name(GtkImage* image, const gchar* icon_name, GtkIconSize size) void {
        @gtk_image_set_from_icon_name(image,icon_name, size)
    }

    @image_set_from_gicon(GtkImage* image, GIcon* icon, GtkIconSize size) void {
        @gtk_image_set_from_gicon(image,icon, size)
    }

    @image_set_from_resource(GtkImage* image, const gchar* resource_path) void {
        @gtk_image_set_from_resource(image, resource_path)
    }

    @image_set_from_surface(GtkImage* image, cairo_surface_t* surface) void {
        @gtk_image_set_from_surface(image, surface)
    }

    @image_clear(GtkImage* image) void {
        @gtk_image_clear(image)
    }

    @image_new GtkWidget*? {
        @return gtk_image_new()
    }

    @image_set_pixel_size(GtkImage* image, gint pixel_size) void {
        @gtk_image_set_pixel_size(image, pixel_size)
    }

    @image_get_pixel_size(GtkImage* image) gint? {
        @return gtk_image_get_pixel_size(image)
    }

    // ---
    // End of GtkImage

    // GtkSpinner

    @spinner_new GtkWidget*? {
        @return gtk_spinner_new()
    }

    @spinner_start(GtkSpinner* spinner) void {
        @gtk_spinner_start(spinner)
    }

    @spinner_stop(GtkSpinner* spinner) void {
        @gtk_spinner_stop(spinner)
    }

    // ---
    // End of GtkSpinner

    // GtkInfoBar

    @info_bar_new GtkWidget*? {
        @return gtk_info_bar_new()
    }

    #template <typename... ID>
    @info_bar_new_with_buttons(const gchar* first_button_text, ID... ids) GtkWidget*? {
        @return (gtk_info_bar_new_with_buttons(first_button_text,ids), ...)
    }

    @info_bar_add_action_widget(GtkInfoBar* info_bar, GtkWidget* child, gint response_id) void {
        @gtk_info_bar_add_action_widget(info_bar,child, response_id)
    }

    @info_bar_add_button(GtkInfoBar* info_bar, const gchar* button_text, gint response_id) GtkWidget*? {
        @return gtk_info_bar_add_button(info_bar,button_text, response_id)
    }

    #template <typename... ID>
    @info_bar_add_buttons(GtkInfoBar* info_bar, const gchar* first_button_text, ID... ids) void {
        @(gtk_info_bar_add_buttons(info_bar,first_button_text,ids), ...)
    }

    @info_bar_set_response_sensitive(GtkInfoBar* info_bar, gint response_id, gboolean setting) void {
        @gtk_info_bar_set_response_sensitive(info_bar,response_id, setting)
    }

    @info_bar_set_default_response(GtkInfoBar* info_bar, gint response_id) void {
        @gtk_info_bar_set_default_response(info_bar, response_id)
    }

    @info_bar_response(GtkInfoBar* info_bar, gint response_id) void {
        @gtk_info_bar_response(info_bar, response_id)
    }

    @info_bar_set_message_type(GtkInfoBar* info_bar, GtkMessageType message_type) void {
        @gtk_info_bar_set_message_type(info_bar, message_type)
    }

    @info_bar_get_message_type(GtkInfoBar* info_bar) GtkMessageType? {
        @return gtk_info_bar_get_message_type(info_bar)
    }

    @info_bar_get_action_area(GtkInfoBar* info_bar) GtkWidget*? {
        @return gtk_info_bar_get_action_area(info_bar)
    }

    @info_bar_get_content_area(GtkInfoBar* info_bar) GtkWidget*? {
        @return gtk_info_bar_get_content_area(info_bar)
    }

    @info_bar_get_show_close_button(GtkInfoBar* info_bar) gboolean? {
        @return gtk_info_bar_get_show_close_button(info_bar)
    }

    @info_bar_set_show_close_button(GtkInfoBar* info_bar, gboolean setting) void {
        @gtk_info_bar_set_show_close_button(info_bar, setting)
    }

    @info_bar_get_revealed(GtkInfoBar* info_bar) gboolean? {
        @return gtk_info_bar_get_revealed(info_bar)
    }

    @info_bar_set_revealed(GtkInfoBar* info_bar, gboolean revealed) void {
        @gtk_info_bar_set_revealed(info_bar, revealed)
    }

    // ---
    // End of GtkInfoBar

    // GtkProgressBar

    @progress_bar_new GtkWidget*? {
        @return gtk_progress_bar_new()
    }

    @progress_bar_pulse(GtkProgressBar* pbar) void {
        @gtk_progress_bar_pulse(pbar)
    }

    @progress_bar_set_fraction(GtkProgressBar* pbar, gdouble fraction) void {
        @gtk_progress_bar_set_fraction(pbar, fraction)
    }

    @progress_bar_get_fraction(GtkProgressBar* pbar) gdouble? {
        @return gtk_progress_bar_get_fraction(pbar)
    }

    @progress_bar_set_inverted(GtkProgressBar* pbar, gboolean inverted) void {
        @gtk_progress_bar_set_inverted(pbar, inverted)
    }

    @progress_bar_get_inverted(GtkProgressBar* pbar) gboolean? {
        @return gtk_progress_bar_get_inverted(pbar)
    }

    @progress_bar_set_show_text(GtkProgressBar* pbar, gboolean show_text) void {
        @gtk_progress_bar_set_show_text(pbar, show_text)
    }

    @progress_bar_get_show_text(GtkProgressBar* pbar) gboolean? {
        @return gtk_progress_bar_get_show_text(pbar)
    }

    @progress_bar_set_text(GtkProgressBar* pbar, const gchar* text) void {
        @gtk_progress_bar_set_text(pbar, text)
    }

    #const gchar* progress_bar_get_text(GtkProgressBar* pbar) {
        @return gtk_progress_bar_get_text(pbar)
    }

    @progress_bar_set_ellipsize(GtkProgressBar* pbar, PangoEllipsizeMode mode) void {
        @gtk_progress_bar_set_ellipsize(pbar, mode)
    }

    @progress_bar_get_ellipsize(GtkProgressBar* pbar) PangoEllipsizeMode? {
        @return gtk_progress_bar_get_ellipsize(pbar)
    }

    @progress_bar_set_pulse_step(GtkProgressBar* pbar, gdouble fraction) void {
        @gtk_progress_bar_set_pulse_step(pbar, fraction)
    }

    @progress_bar_get_pulse_step(GtkProgressBar* pbar) gdouble? {
        @return gtk_progress_bar_get_pulse_step(pbar)
    }

    // ---
    // End of GtkProgressBar

    // GtkLevelBar

    @level_bar_new GtkWidget*? {
        @return gtk_level_bar_new()
    }

    @level_bar_new_for_interval(gdouble min_value, gdouble max_value) GtkWidget*? {
        @return gtk_level_bar_new_for_interval(min_value, max_value)
    }

    @level_bar_set_mode(GtkLevelBar* self, GtkLevelBarMode mode) void {
        @gtk_level_bar_set_mode(self, mode)
    }

    @level_bar_get_mode(GtkLevelBar* self) GtkLevelBarMode? {
        @return gtk_level_bar_get_mode(self)
    }

    @level_bar_set_value(GtkLevelBar* self, gdouble value) void {
        @gtk_level_bar_set_value(self, value)
    }

    @level_bar_get_value(GtkLevelBar* self) gdouble? {
        @return gtk_level_bar_get_value(self)
    }

    @level_bar_set_min_value(GtkLevelBar* self, gdouble value) void {
        @gtk_level_bar_set_min_value(self, value)
    }

    @level_bar_get_min_value(GtkLevelBar* self) gdouble? {
        @return gtk_level_bar_get_min_value(self)
    }

    @level_bar_set_max_value(GtkLevelBar* self, gdouble value) void {
        @gtk_level_bar_set_max_value(self, value)
    }

    @level_bar_get_max_value(GtkLevelBar* self) gdouble? {
        @return gtk_level_bar_get_max_value(self)
    }

    @level_bar_set_inverted(GtkLevelBar* self, gdouble inverted) void {
        @gtk_level_bar_set_inverted(self, inverted)
    }

    @level_bar_get_inverted(GtkLevelBar* self) gboolean? {
        @return gtk_level_bar_get_inverted(self)
    }

    @level_bar_add_offset_value(GtkLevelBar* self, const gchar* name, gdouble value) void {
        @gtk_level_bar_add_offset_value(self,name, value)
    }

    @level_bar_remove_offset_value(GtkLevelBar* self, const gchar* name) void {
        @gtk_level_bar_remove_offset_value(self, name)
    }

    @level_bar_get_offset_value(GtkLevelBar* self, const gchar* name, gdouble* value) gboolean? {
        @return gtk_level_bar_get_offset_value(self,name, value)
    }

    // ---
    // End of GtkLevelBar

    // GtkStatusbar

    @statusbar_new GtkWidget*? {
        @return gtk_statusbar_new()
    }

    @statusbar_get_context_id(GtkStatusbar* statusbar, const gchar* context_description) guint? {
        @return gtk_statusbar_get_context_id(statusbar, context_description)
    }

    @statusbar_push(GtkStatusbar* statusbar, guint context_id, const gchar* text) guint? {
        @return gtk_statusbar_push(statusbar,context_id, text)
    }

    @statusbar_pop(GtkStatusbar* statusbar, guint context_id) void {
        @gtk_statusbar_pop(statusbar, context_id)
    }

    @statusbar_remove(GtkStatusbar* statusbar, guint context_id, guint message_id) void {
        @gtk_statusbar_remove(statusbar,context_id, message_id)
    }

    @statusbar_remove_all(GtkStatusbar* statusbar, guint context_id) void {
        @gtk_statusbar_remove_all(statusbar, context_id)
    }

    @statusbar_get_message_area(GtkStatusbar* statusbar) GtkWidget*? {
        @return gtk_statusbar_get_message_area(statusbar)
    }

    // ---
    // End of GtkStatusbar

    // GtkAccelLabel

    @accel_label_new(const gchar* str) GtkWidget*? {
        @return gtk_accel_label_new(str)
    }

    @accel_label_set_accel_closure(GtkAccelLabel* accel_label, GClosure* accel_closure) void {
        @gtk_accel_label_set_accel_closure(accel_label, accel_closure)
    }

    @accel_label_get_accel_widget(GtkAccelLabel* accel_label) GtkWidget*? {
        @return gtk_accel_label_get_accel_widget(accel_label)
    }

    @accel_label_set_accel_widget(GtkAccelLabel* accel_label, GtkWidget* accel_widget) void {
        @gtk_accel_label_set_accel_widget(accel_label, accel_widget)
    }

    @accel_label_get_accel_width(GtkAccelLabel* accel_label) guint? {
        @return gtk_accel_label_get_accel_width(accel_label)
    }

    @accel_label_set_accel(GtkAccelLabel* accel_label, guint accelerator_key, GdkModifierType accelerator_mods) void {
        @gtk_accel_label_set_accel(accel_label,accelerator_key, accelerator_mods)
    }

    @accel_label_get_accel(GtkAccelLabel* accel_label, guint* accelerator_key, GdkModifierType* accelerator_mods) void {
        @gtk_accel_label_get_accel(accel_label,accelerator_key, accelerator_mods)
    }

    @accel_label_refetch(GtkAccelLabel* accel_label) gboolean? {
        @return gtk_accel_label_refetch(accel_label)
    }

    // ---
    // End of GtkAccelLabel

    // GtkButton

    @button_new GtkWidget*? {
        @return gtk_button_new()
    }

    @button_new_with_label(const gchar* label) GtkWidget*? {
        @return gtk_button_new_with_label(label)
    }

    @button_new_with_mnemonic(const gchar* label) GtkWidget*? {
        @return gtk_button_new_with_mnemonic(label)
    }

    @button_new_from_icon_name(const gchar* icon_name, GtkIconSize size) GtkWidget*? {
        @return gtk_button_new_from_icon_name(icon_name, size)
    }

    // Deprecated: @button_new_from_stock(const gchar *stock_id)

    // Deprecated: @button_pressed(GtkButton *button)

    // Deprecated: @button_released(GtkButton *button)

    @button_clicked(GtkButton* button) void {
        @gtk_button_clicked(button)
    }

    // Deprecated: @button_enter(GtkButton *button)

    // Deprecated: @button_leave(GtkButton *button)

    @button_set_relief(GtkButton* button, GtkReliefStyle relief) void {
        @gtk_button_set_relief(button, relief)
    }

    @button_get_relief(GtkButton* button) GtkReliefStyle? {
        @return gtk_button_get_relief(button)
    }

    #const gchar* button_get_label(GtkButton* button) {
        @return gtk_button_get_label(button)
    }

    @button_set_label(GtkButton* button, const gchar* label) void {
        @gtk_button_set_label(button, label)
    }

    // Deprecated: @button_get_use_stock(GtkButton *button)

    // Deprecated: @button_set_use_stock(GtkButton *button,
    //                          gboolean use_stock)

    @button_get_use_underline(GtkButton* button) gboolean? {
        @return gtk_button_get_use_underline(button)
    }

    @button_set_use_underline(GtkButton* button, gboolean use_underline) void {
        @gtk_button_set_use_underline(button, use_underline)
    }

    // Deprecated: @button_set_focus_on_click(GtkButton *button,
    //                               gboolean focus_on_click)

    // Deprecated: @button_get_focus_on_click(GtkButton *button)

    // Deprecated: @button_set_alignment(GtkButton *button,
    //                          gfloat xalign,
    //                          gfloat yalign)

    // Deprecated: @button_get_alignment(GtkButton *button,
    //                          gfloat *xalign,
    //                          gfloat *yalign)

    @button_set_image(GtkButton* button, GtkWidget* image) void {
        @gtk_button_set_image(button, image)
    }

    @button_get_image(GtkButton* button) GtkWidget*? {
        @return gtk_button_get_image(button)
    }

    @button_set_image_position(GtkButton* button, GtkPositionType position) void {
        @gtk_button_set_image_position(button, position)
    }

    @button_get_image_position(GtkButton* button) GtkPositionType? {
        @return gtk_button_get_image_position(button)
    }

    @button_set_always_show_image(GtkButton* button, gboolean always_show) void {
        @gtk_button_set_always_show_image(button, always_show)
    }

    @button_get_always_show_image(GtkButton* button) gboolean? {
        @return gtk_button_get_always_show_image(button)
    }

    @button_get_event_window(GtkButton* button) GdkWindow*? {
        @return gtk_button_get_event_window(button)
    }

    // ---
    // End of GtkButton

    // GtkCheckButton

    @check_button_new GtkWidget*? {
        @return gtk_check_button_new()
    }

    @check_button_new_with_label(const gchar* label) GtkWidget*? {
        @return gtk_check_button_new_with_label(label)
    }

    @check_button_new_with_mnemonic(const gchar* label) GtkWidget*? {
        @return gtk_check_button_new_with_mnemonic(label)
    }

    // ---
    // End of GtkCheckButton

    // GtkRadioButton

    @radio_button_new(GSList* group) GtkWidget*? {
        @return gtk_radio_button_new(group)
    }

    @radio_button_new_from_widget(GtkRadioButton* radio_group_member) GtkWidget*? {
        @return gtk_radio_button_new_from_widget(radio_group_member)
    }

    @radio_button_new_with_label(GSList* group, const gchar* label) GtkWidget*? {
        @return gtk_radio_button_new_with_label(group, label)
    }

    @radio_button_new_with_label_from_widget(GtkRadioButton* radio_group_member, const gchar* label) GtkWidget*? {
        @return gtk_radio_button_new_with_label_from_widget(radio_group_member, label)
    }

    @radio_button_new_with_mnemonic(GSList* group, const gchar* label) GtkWidget*? {
        @return gtk_radio_button_new_with_mnemonic(group, label)
    }

    @radio_button_new_with_mnemonic_from_widget(GtkRadioButton* radio_group_member, const gchar* label) GtkWidget*? {
        @return gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member, label)
    }

    @radio_button_set_group(GtkRadioButton* radio_button, GSList* group) void {
        @gtk_radio_button_set_group(radio_button, group)
    }

    @radio_button_get_group(GtkRadioButton* radio_button) GSList*? {
        @return gtk_radio_button_get_group(radio_button)
    }

    @radio_button_join_group(GtkRadioButton* radio_button, GtkRadioButton* group_source) void {
        @gtk_radio_button_join_group(radio_button, group_source)
    }

    // ---
    // End of GtkRadioButton

    // GtkToggleButton

    @toggle_button_new GtkWidget*? {
        @return gtk_toggle_button_new()
    }

    @toggle_button_new_with_label(const gchar* label) GtkWidget*? {
        @return gtk_toggle_button_new_with_label(label)
    }

    @toggle_button_new_with_mnemonic(const gchar* label) GtkWidget*? {
        @return gtk_toggle_button_new_with_mnemonic(label)
    }

    @toggle_button_set_mode(GtkToggleButton* toggle_button, gboolean draw_indicator) void {
        @gtk_toggle_button_set_mode(toggle_button, draw_indicator)
    }

    @toggle_button_get_mode(GtkToggleButton* toggle_button) gboolean? {
        @return gtk_toggle_button_get_mode(toggle_button)
    }

    @toggle_button_toggled(GtkToggleButton* toggle_button) void {
        @gtk_toggle_button_toggled(toggle_button)
    }

    @toggle_button_get_active(GtkToggleButton* toggle_button) gboolean? {
        @return gtk_toggle_button_get_active(toggle_button)
    }

    @toggle_button_set_active(GtkToggleButton* toggle_button, gboolean is_active) void {
        @gtk_toggle_button_set_active(toggle_button, is_active)
    }

    @toggle_button_get_inconsistent(GtkToggleButton* toggle_button) gboolean? {
        @return gtk_toggle_button_get_inconsistent(toggle_button)
    }

    @toggle_button_set_inconsistent(GtkToggleButton* toggle_button, gboolean setting) void {
        @gtk_toggle_button_set_inconsistent(toggle_button, setting)
    }

    // ---
    // End of GtkToggleButton

    // GtkLinkButton

    @link_button_new(const gchar* uri) GtkWidget*? {
        @return gtk_link_button_new(uri)
    }

    @link_button_new_with_label(const gchar* uri, const gchar* label) GtkWidget*? {
        @return gtk_link_button_new_with_label(uri, label)
    }

    #const gchar* link_button_get_uri(GtkLinkButton* link_button) {
        @return gtk_link_button_get_uri(link_button)
    }

    @link_button_set_uri(GtkLinkButton* link_button, const gchar* uri) void {
        @gtk_link_button_set_uri(link_button, uri)
    }

    @link_button_get_visited(GtkLinkButton* link_button) gboolean? {
        @return gtk_link_button_get_visited(link_button)
    }

    @link_button_set_visited(GtkLinkButton* link_button, gboolean visited) void {
        @gtk_link_button_set_visited(link_button, visited)
    }

    // ---
    // End of GtkLinkButton

    // GtkMenuButton

    @menu_button_new GtkWidget*? {
        @return gtk_menu_button_new()
    }

    @menu_button_set_popup(GtkMenuButton* menu_button, GtkWidget* menu) void {
        @gtk_menu_button_set_popup(menu_button, menu)
    }

    @menu_button_get_popup(GtkMenuButton* menu_button) GtkMenu*? {
        @return gtk_menu_button_get_popup(menu_button)
    }

    @menu_button_set_popover(GtkMenuButton* menu_button, GtkWidget* popover) void {
        @gtk_menu_button_set_popover(menu_button, popover)
    }

    @menu_button_get_popover(GtkMenuButton* menu_button) GtkPopover*? {
        @return gtk_menu_button_get_popover(menu_button)
    }

    @menu_button_set_menu_model(GtkMenuButton* menu_button, GMenuModel* menu_model) void {
        @gtk_menu_button_set_menu_model(menu_button, menu_model)
    }

    @menu_button_get_menu_model(GtkMenuButton* menu_button) GMenuModel*? {
        @return gtk_menu_button_get_menu_model(menu_button)
    }

    @menu_button_set_use_popover(GtkMenuButton* menu_button, gboolean use_popover) void {
        @gtk_menu_button_set_use_popover(menu_button, use_popover)
    }

    @menu_button_get_use_popover(GtkMenuButton* menu_button) gboolean? {
        @return gtk_menu_button_get_use_popover(menu_button)
    }

    @menu_button_set_direction(GtkMenuButton* menu_button, GtkArrowType direction) void {
        @gtk_menu_button_set_direction(menu_button, direction)
    }

    @menu_button_get_direction(GtkMenuButton* menu_button) GtkArrowType? {
        @return gtk_menu_button_get_direction(menu_button)
    }

    @menu_button_set_align_widget(GtkMenuButton* menu_button, GtkWidget* align_widget) void {
        @gtk_menu_button_set_align_widget(menu_button, align_widget)
    }

    @menu_button_get_align_widget(GtkMenuButton* menu_button) GtkWidget*? {
        @return gtk_menu_button_get_align_widget(menu_button)
    }

    // ---
    // End of GtkMenuButton

    // GtkSwitch

    @switch_new GtkWidget*? {
        @return gtk_switch_new()
    }

    @switch_set_active(GtkSwitch* sw, gboolean is_active) void {
        @gtk_switch_set_active(sw, is_active)
    }

    @switch_get_active(GtkSwitch* sw) gboolean? {
        @return gtk_switch_get_active(sw)
    }

    @switch_set_state(GtkSwitch* sw, gboolean state) void {
        @gtk_switch_set_state(sw, state)
    }

    @switch_get_state(GtkSwitch* sw) gboolean? {
        @return gtk_switch_get_state(sw)
    }

    // ---
    // End of GtkSwitch

    // GtkScaleButton

    @scale_button_new(GtkIconSize size, gdouble min, gdouble max, gdouble step, const gchar** icons) GtkWidget*? {
        @return gtk_scale_button_new(size,min,max,step, icons)
    }

    @scale_button_set_adjustment(GtkScaleButton* button, GtkAdjustment* adjustment) void {
        @gtk_scale_button_set_adjustment(button, adjustment)
    }

    @scale_button_set_icons(GtkScaleButton* button, const gchar** icons) void {
        @gtk_scale_button_set_icons(button, icons)
    }

    @scale_button_set_value(GtkScaleButton* button, gdouble value) void {
        @gtk_scale_button_set_value(button, value)
    }

    @scale_button_get_adjustment(GtkScaleButton* button) GtkAdjustment*? {
        @return gtk_scale_button_get_adjustment(button)
    }

    @scale_button_get_value(GtkScaleButton* button) gdouble? {
        @return gtk_scale_button_get_value(button)
    }

    @scale_button_get_popup(GtkScaleButton* button) GtkWidget*? {
        @return gtk_scale_button_get_popup(button)
    }

    @scale_button_get_plus_button(GtkScaleButton* button) GtkWidget*? {
        @return gtk_scale_button_get_plus_button(button)
    }

    @scale_button_get_minus_button(GtkScaleButton* button) GtkWidget*? {
        @return gtk_scale_button_get_minus_button(button)
    }

    // ---
    // End of GtkScaleButton

    // GtkVolumeButton

    @volume_button_new GtkWidget*? {
        @return gtk_volume_button_new()
    }

    // ---
    // End of GtkVolumeButton

    // GtkLockButton

    @lock_button_new(GPermission* permission) GtkWidget*? {
        @return gtk_lock_button_new(permission)
    }

    @lock_button_get_permission(GtkLockButton* button) GPermission*? {
        @return gtk_lock_button_get_permission(button)
    }

    @lock_button_set_permission(GtkLockButton* button, GPermission* permission) void {
        @gtk_lock_button_set_permission(button, permission)
    }

    // ---
    // End of GtkLockButton

    // GtkModelButton

    @model_button_new GtkWidget*? {
        @return gtk_model_button_new()
    }

    // ---
    // End of GtkModelButton

    // GtkEntry

    @entry_new GtkWidget*? {
        @return gtk_entry_new()
    }

    @entry_new_with_buffer(GtkEntryBuffer* buffer) GtkWidget*? {
        @return gtk_entry_new_with_buffer(buffer)
    }

    @entry_get_buffer(GtkEntry* entry) GtkEntryBuffer*? {
        @return gtk_entry_get_buffer(entry)
    }

    @entry_set_buffer(GtkEntry* entry, GtkEntryBuffer* buffer) void {
        @gtk_entry_set_buffer(entry, buffer)
    }

    @entry_set_text(GtkEntry* entry, const gchar* text) void {
        @gtk_entry_set_text(entry, text)
    }

    #const gchar * entry_get_text(GtkEntry* entry) {
        @return gtk_entry_get_text(entry)
    }

    @entry_get_text_length(GtkEntry* entry) guint16? {
        @return gtk_entry_get_text_length(entry)
    }

    @entry_get_text_area(GtkEntry* entry, GdkRectangle* text_area) void {
        @gtk_entry_get_text_area(entry, text_area)
    }

    @entry_set_visibility(GtkEntry* entry, gboolean visible) void {
        @gtk_entry_set_visibility(entry, visible)
    }

    @entry_set_invisible_char(GtkEntry* entry, gunichar ch) void {
        @gtk_entry_set_invisible_char(entry, ch)
    }

    @entry_unset_invisible_char(GtkEntry* entry) void {
        @gtk_entry_unset_invisible_char(entry)
    }

    @entry_set_max_length(GtkEntry* entry, gint max) void {
        @gtk_entry_set_max_length(entry, max)
    }

    @entry_get_activates_default(GtkEntry* entry) gboolean? {
        @return gtk_entry_get_activates_default(entry)
    }

    @entry_get_has_frame(GtkEntry* entry) gboolean? {
        @return gtk_entry_get_has_frame(entry)
    }

    // Deprecated: @entry_get_inner_border(GtkEntry* entry)

    @entry_get_width_chars(GtkEntry* entry) gint? {
        @return gtk_entry_get_width_chars(entry)
    }

    @entry_get_max_width_chars(GtkEntry* entry) gint? {
        @return gtk_entry_get_max_width_chars(entry)
    }

    @entry_set_activates_default(GtkEntry* entry, gboolean setting) void {
        @gtk_entry_set_activates_default(entry, setting)
    }

    @entry_set_has_frame(GtkEntry* entry, gboolean setting) void {
        @gtk_entry_set_has_frame(entry, setting)
    }

    // Deprecated: @entry_set_inner_border(GtkEntry* entry,
    //                            const GtkBorder* border)

    @entry_set_width_chars(GtkEntry* entry, gint n_chars) void {
        @gtk_entry_set_width_chars(entry, n_chars)
    }

    @entry_set_max_width_chars(GtkEntry* entry, gint n_chars) void {
        @gtk_entry_set_max_width_chars(entry, n_chars)
    }

    @entry_get_invisible_char(GtkEntry* entry) gunichar? {
        @return gtk_entry_get_invisible_char(entry)
    }

    @entry_set_alignment(GtkEntry* entry, gfloat xalign) void {
        @gtk_entry_set_alignment(entry, xalign)
    }

    @entry_get_alignment(GtkEntry* entry) gfloat? {
        @return gtk_entry_get_alignment(entry)
    }

    @entry_set_placeholder_text(GtkEntry* entry, const gchar* text) void {
        @gtk_entry_set_placeholder_text(entry, text)
    }

    #const gchar* entry_get_placeholder_text(GtkEntry* entry) {
        @return gtk_entry_get_placeholder_text(entry)
    }

    @entry_set_overwrite_mode(GtkEntry* entry, gboolean overwrite) void {
        @gtk_entry_set_overwrite_mode(entry, overwrite)
    }

    @entry_get_overwrite_mode(GtkEntry* entry) gboolean? {
        @return gtk_entry_get_overwrite_mode(entry)
    }

    @entry_get_layout(GtkEntry* entry) PangoLayout*? {
        @return gtk_entry_get_layout(entry)
    }

    @entry_get_layout_offsets(GtkEntry* entry, gint* x, gint* y) void {
        @gtk_entry_get_layout_offsets(entry,x, y)
    }

    @entry_layout_index_to_text_index(GtkEntry* entry, gint layout_index) gint? {
        @return gtk_entry_layout_index_to_text_index(entry, layout_index)
    }

    @entry_text_index_to_layout_index(GtkEntry* entry, gint text_index) gint? {
        @return gtk_entry_text_index_to_layout_index(entry, text_index)
    }

    @entry_set_attributes(GtkEntry* entry, PangoAttrList* attrs) void {
        @gtk_entry_set_attributes(entry, attrs)
    }

    @entry_get_attributes(GtkEntry* entry) PangoAttrList*? {
        @return gtk_entry_get_attributes(entry)
    }

    @entry_get_max_length(GtkEntry* entry) gint? {
        @return gtk_entry_get_max_length(entry)
    }

    @entry_get_visibility(GtkEntry* entry) gboolean? {
        @return gtk_entry_get_visibility(entry)
    }

    @entry_set_completion(GtkEntry* entry, GtkEntryCompletion* completion) void {
        @gtk_entry_set_completion(entry, completion)
    }

    @entry_get_completion(GtkEntry* entry) GtkEntryCompletion*? {
        @return gtk_entry_get_completion(entry)
    }

    @entry_set_cursor_hadjustment(GtkEntry* entry, GtkAdjustment* adjustment) void {
        @gtk_entry_set_cursor_hadjustment(entry, adjustment)
    }

    @entry_get_cursor_hadjustment(GtkEntry* entry) GtkAdjustment*? {
        @return gtk_entry_get_cursor_hadjustment(entry)
    }

    @entry_set_progress_fraction(GtkEntry* entry, gdouble fraction) void {
        @gtk_entry_set_progress_fraction(entry, fraction)
    }

    @entry_get_progress_fraction(GtkEntry* entry) gdouble? {
        @return gtk_entry_get_progress_fraction(entry)
    }

    @entry_set_progress_pulse_step(GtkEntry* entry, gdouble fraction) void {
        @gtk_entry_set_progress_pulse_step(entry, fraction)
    }

    @entry_get_progress_pulse_step(GtkEntry* entry) gdouble? {
        @return gtk_entry_get_progress_pulse_step(entry)
    }

    @entry_progress_pulse(GtkEntry* entry) void {
        @gtk_entry_progress_pulse(entry)
    }

    @entry_im_context_filter_keypress(GtkEntry* entry, GdkEventKey* event) gboolean? {
        @return gtk_entry_im_context_filter_keypress(entry, event)
    }

    @entry_reset_im_context(GtkEntry* entry) void {
        @gtk_entry_reset_im_context(entry)
    }

    @entry_get_tabs(GtkEntry* entry) PangoTabArray*? {
        @return gtk_entry_get_tabs(entry)
    }

    @entry_set_tabs(GtkEntry* entry, PangoTabArray* tabs) void {
        @gtk_entry_set_tabs(entry, tabs)
    }

    @entry_set_icon_from_pixbuf(GtkEntry* entry, GtkEntryIconPosition icon_pos, GdkPixbuf* pixbuf) void {
        @gtk_entry_set_icon_from_pixbuf(entry,icon_pos, pixbuf)
    }

    // Deprecated: @entry_set_icon_from_stock(GtkEntry* entry,
    //                               GtkEntryIconPosition icon_pos,
    //                               const gchar* stock_id)

    @entry_set_icon_from_icon_name(GtkEntry* entry, GtkEntryIconPosition icon_pos, const gchar* icon_name) void {
        @gtk_entry_set_icon_from_icon_name(entry,icon_pos, icon_name)
    }

    @entry_set_icon_from_gicon(GtkEntry* entry, GtkEntryIconPosition icon_pos, GIcon* icon) void {
        @gtk_entry_set_icon_from_gicon(entry,icon_pos, icon)
    }

    @entry_get_icon_storage_type(GtkEntry* entry, GtkEntryIconPosition icon_pos) GtkImageType? {
        @return gtk_entry_get_icon_storage_type(entry,icon_pos)
    }

    @entry_get_icon_pixbuf(GtkEntry* entry, GtkEntryIconPosition icon_pos) GdkPixbuf*? {
        @return gtk_entry_get_icon_pixbuf(entry, icon_pos)
    }

    // Deprecated: @entry_get_icon_stock(GtkEntry* entry,
    //                          GtkEntryIconPosition icon_pos)

    #const gchar* entry_get_icon_name(GtkEntry* entry, GtkEntryIconPosition icon_pos) {
        @return gtk_entry_get_icon_name(entry, icon_pos)
    }

    @entry_get_icon_gicon(GtkEntry* entry, GtkEntryIconPosition icon_pos) GIcon*? {
        @return gtk_entry_get_icon_gicon(entry, icon_pos)
    }

    @entry_set_icon_activatable(GtkEntry* entry, GtkEntryIconPosition icon_pos, gboolean activatable) void {
        @gtk_entry_set_icon_activatable(entry,icon_pos, activatable)
    }

    @entry_get_icon_activatable(GtkEntry* entry, GtkEntryIconPosition icon_pos) gboolean? {
        @return gtk_entry_get_icon_activatable(entry, icon_pos)
    }

    @entry_set_icon_sensitive(GtkEntry* entry, GtkEntryIconPosition icon_pos, gboolean sensitive) void {
        @gtk_entry_set_icon_sensitive(entry,icon_pos, sensitive)
    }

    @entry_get_icon_sensitive(GtkEntry* entry, GtkEntryIconPosition icon_pos) gboolean? {
        @return gtk_entry_get_icon_sensitive(entry, icon_pos)
    }

    @entry_get_icon_at_pos(GtkEntry* entry, gint x, gint y) gint? {
        @return gtk_entry_get_icon_at_pos(entry,x, y)
    }

    @entry_set_icon_tooltip_text(GtkEntry* entry, GtkEntryIconPosition icon_pos, const gchar* tooltip) void {
        @gtk_entry_set_icon_tooltip_text(entry,icon_pos, tooltip)
    }

    @entry_get_icon_tooltip_text(GtkEntry* entry, GtkEntryIconPosition icon_pos) gchar*? {
        @return gtk_entry_get_icon_tooltip_text(entry, icon_pos)
    }

    @entry_set_icon_tooltip_markup(GtkEntry* entry, GtkEntryIconPosition icon_pos, const gchar* tooltip) void {
        @gtk_entry_set_icon_tooltip_markup(entry,icon_pos, tooltip)
    }

    @entry_get_icon_tooltip_markup(GtkEntry* entry, GtkEntryIconPosition icon_pos) gchar*? {
        @return gtk_entry_get_icon_tooltip_markup(entry, icon_pos)
    }

    @entry_set_icon_drag_source(GtkEntry* entry, GtkEntryIconPosition icon_pos, GtkTargetList* target_list, GdkDragAction actions) void {
        @gtk_entry_set_icon_drag_source(entry,icon_pos,target_list, actions)
    }

    @entry_get_current_icon_drag_source(GtkEntry* entry) gint? {
        @return gtk_entry_get_current_icon_drag_source(entry)
    }

    @entry_get_icon_area(GtkEntry* entry, GtkEntryIconPosition icon_pos, GdkRectangle* icon_area) void {
        @gtk_entry_get_icon_area(entry,icon_pos, icon_area)
    }

    @entry_set_input_purpose(GtkEntry* entry, GtkInputPurpose purpose) void {
        @gtk_entry_set_input_purpose(entry, purpose)
    }

    @entry_get_input_purpose(GtkEntry* entry) GtkInputPurpose? {
        @return gtk_entry_get_input_purpose(entry)
    }

    @entry_set_input_hints(GtkEntry* entry, GtkInputHints hints) void {
        @gtk_entry_set_input_hints(entry, hints)
    }

    @entry_get_input_hints(GtkEntry* entry) GtkInputHints? {
        @return gtk_entry_get_input_hints(entry)
    }

    @entry_grab_focus_without_selecting(GtkEntry* entry) void {
        @gtk_entry_grab_focus_without_selecting(entry)
    }

    // ---
    // End of GtkEntry

    // GtkEntryBuffer

    @entry_buffer_new(const gchar* initial_chars, gint n_initial_chars) GtkEntryBuffer*? {
        @return gtk_entry_buffer_new(initial_chars, n_initial_chars)
    }

    #const gchar* entry_buffer_get_text(GtkEntryBuffer* buffer) {
        @return gtk_entry_buffer_get_text(buffer)
    }


    @entry_buffer_set_text(GtkEntryBuffer* buffer, const gchar* chars, gint n_chars) void {
        @gtk_entry_buffer_set_text(buffer,chars, n_chars)
    }

    @entry_buffer_get_bytes(GtkEntryBuffer* buffer) gsize? {
        @return gtk_entry_buffer_get_bytes(buffer)
    }

    @entry_buffer_get_length(GtkEntryBuffer* buffer) guint? {
        @return gtk_entry_buffer_get_length(buffer)
    }

    @entry_buffer_get_max_length(GtkEntryBuffer* buffer) gint? {
        @return gtk_entry_buffer_get_max_length(buffer)
    }

    @entry_buffer_set_max_length(GtkEntryBuffer* buffer, gint max_length) void {
        @gtk_entry_buffer_set_max_length(buffer, max_length)
    }

    @entry_buffer_insert_text(GtkEntryBuffer* buffer, guint position, const gchar* chars, gint n_chars) guint? {
        @return gtk_entry_buffer_insert_text(buffer,position,chars, n_chars)
    }

    @entry_buffer_delete_text(GtkEntryBuffer* buffer, guint position, gint n_chars) guint? {
        @return gtk_entry_buffer_delete_text(buffer,position, n_chars)
    }

    @entry_buffer_emit_deleted_text(GtkEntryBuffer* buffer, guint position, guint n_chars) void {
        @gtk_entry_buffer_emit_deleted_text(buffer,position, n_chars)
    }

    @entry_buffer_emit_inserted_text(GtkEntryBuffer* buffer, guint position, const gchar* chars, guint n_chars) void {
        @gtk_entry_buffer_emit_inserted_text(buffer,position,chars, n_chars)
    }

    // ---
    // End of GtkEntryBuffer

    // GtkEntryCompletion

    // Unimplemented: gboolean
    //(*GtkEntryCompletionMatchFunc) (GtkEntryCompletion *completion,
    //                                const gchar *key,
    //                                GtkTreeIter *iter,
    //                                gpointer user_data)

    @entry_completion_new GtkEntryCompletion*? {
        @return gtk_entry_completion_new()
    }

    @entry_completion_new_with_area(GtkCellArea* area) GtkEntryCompletion*? {
        @return gtk_entry_completion_new_with_area(area)
    }

    @entry_completion_get_entry(GtkEntryCompletion* completion) GtkWidget*? {
        @return gtk_entry_completion_get_entry(completion)
    }

    @entry_completion_set_model(GtkEntryCompletion* completion, GtkTreeModel* model) void {
        @gtk_entry_completion_set_model(completion, model)
    }

    @entry_completion_get_model(GtkEntryCompletion* completion) GtkTreeModel*? {
        @return gtk_entry_completion_get_model(completion)
    }

    @entry_completion_set_match_func(GtkEntryCompletion* completion, GtkEntryCompletionMatchFunc func, gpointer func_data, GDestroyNotify func_notify) void {
        @gtk_entry_completion_set_match_func(completion,func,func_data, func_notify)
    }

    @entry_completion_set_minimum_key_length(GtkEntryCompletion* completion, gint length) void {
        @gtk_entry_completion_set_minimum_key_length(completion, length)
    }

    @entry_completion_get_minimum_key_length(GtkEntryCompletion* completion) gint? {
        @return gtk_entry_completion_get_minimum_key_length(completion)
    }

    @entry_completion_compute_prefix(GtkEntryCompletion* completion, const char* key) gchar*? {
        @return gtk_entry_completion_compute_prefix(completion, key)
    }

    @entry_completion_complete(GtkEntryCompletion* completion) void {
        @gtk_entry_completion_complete(completion)
    }

    #const gchar* entry_completion_get_completion_prefix(GtkEntryCompletion* completion) {
        @return gtk_entry_completion_get_completion_prefix(completion)
    }

    @entry_completion_insert_prefix(GtkEntryCompletion* completion) void {
        @gtk_entry_completion_insert_prefix(completion)
    }

    @entry_completion_insert_action_text(GtkEntryCompletion* completion, gint index_, const gchar* text) void {
        @gtk_entry_completion_insert_action_text(completion,index_, text)
    }

    @entry_completion_insert_action_markup(GtkEntryCompletion* completion, gint index_, const gchar* markup) void {
        @gtk_entry_completion_insert_action_markup(completion,index_, markup)
    }

    @entry_completion_delete_action(GtkEntryCompletion* completion, gint index_) void {
        @gtk_entry_completion_delete_action(completion, index_)
    }

    @entry_completion_set_text_column(GtkEntryCompletion* completion, gint column) void {
        @gtk_entry_completion_set_text_column(completion, column)
    }

    @entry_completion_get_text_column(GtkEntryCompletion* completion) gint? {
        @return gtk_entry_completion_get_text_column(completion)
    }

    @entry_completion_set_inline_completion(GtkEntryCompletion* completion, gboolean inline_completion) void {
        @gtk_entry_completion_set_inline_completion(completion, inline_completion)
    }

    @entry_completion_get_inline_completion(GtkEntryCompletion* completion) gboolean? {
        @return gtk_entry_completion_get_inline_completion(completion)
    }

    @entry_completion_set_inline_selection(GtkEntryCompletion* completion, gboolean inline_selection) void {
        @gtk_entry_completion_set_inline_selection(completion, inline_selection)
    }

    @entry_completion_get_inline_selection(GtkEntryCompletion* completion) gboolean? {
        @return gtk_entry_completion_get_inline_selection(completion)
    }

    @entry_completion_set_popup_completion(GtkEntryCompletion* completion, gboolean popup_completion) void {
        @gtk_entry_completion_set_popup_completion(completion, popup_completion)
    }

    @entry_completion_get_popup_completion(GtkEntryCompletion* completion) gboolean? {
        @return gtk_entry_completion_get_popup_completion(completion)
    }

    @entry_completion_set_popup_set_width(GtkEntryCompletion* completion, gboolean popup_set_width) void {
        @gtk_entry_completion_set_popup_set_width(completion, popup_set_width)
    }

    @entry_completion_get_popup_set_width(GtkEntryCompletion* completion) gboolean? {
        @return gtk_entry_completion_get_popup_set_width(completion)
    }

    @entry_completion_set_popup_single_match(GtkEntryCompletion* completion, gboolean popup_single_match) void {
        @gtk_entry_completion_set_popup_single_match(completion, popup_single_match)
    }

    @entry_completion_get_popup_single_match(GtkEntryCompletion* completion) gboolean? {
        @return gtk_entry_completion_get_popup_single_match(completion)
    }

    // ---
    // End of GtkEntryCompletion

    // GtkScale

    @scale_new(GtkOrientation orientation, GtkAdjustment* adjustment) GtkWidget*? {
        @return gtk_scale_new(orientation, adjustment)
    }

    @scale_new_with_range(GtkOrientation orientation, gdouble min, gdouble max, gdouble step) GtkWidget*? {
        @return gtk_scale_new_with_range(orientation,min,max, step)
    }

    @scale_set_digits(GtkScale* scale, gint digits) void {
        @gtk_scale_set_digits(scale, digits)
    }

    @scale_set_draw_value(GtkScale* scale, gboolean draw_value) void {
        @gtk_scale_set_draw_value(scale, draw_value)
    }

    @scale_set_has_origin(GtkScale* scale, gboolean has_origin) void {
        @gtk_scale_set_has_origin(scale, has_origin)
    }

    @scale_set_value_pos(GtkScale* scale, GtkPositionType pos) void {
        @gtk_scale_set_value_pos(scale, pos)
    }

    @scale_get_digits(GtkScale* scale) gint? {
        @return gtk_scale_get_digits(scale)
    }

    @scale_get_draw_value(GtkScale* scale) gboolean? {
        @return gtk_scale_get_draw_value(scale)
    }

    @scale_get_has_origin(GtkScale* scale) gboolean? {
        @return gtk_scale_get_has_origin(scale)
    }

    @scale_get_value_pos(GtkScale* scale) GtkPositionType? {
        @return gtk_scale_get_value_pos(scale)
    }

    @scale_get_layout(GtkScale* scale) PangoLayout*? {
        @return gtk_scale_get_layout(scale)
    }

    @scale_get_layout_offsets(GtkScale* scale, gint* x, gint* y) void {
        @gtk_scale_get_layout_offsets(scale,x, y)
    }

    @scale_add_mark(GtkScale* scale, gdouble value, GtkPositionType position, const gchar* markup) void {
        @gtk_scale_add_mark(scale,value,position, markup)
    }

    @scale_clear_marks(GtkScale* scale) void {
        @gtk_scale_clear_marks(scale)
    }

    // ---
    // End of GtkScale

    // GtkSpinButton

    @spin_button_configure(GtkSpinButton* spin_button, GtkAdjustment* adjustment, gdouble climb_rate, guint digits) void {
        @gtk_spin_button_configure(spin_button,adjustment,climb_rate, digits)
    }

    @spin_button_new(GtkAdjustment* adjustment, gdouble climb_rate, guint digits) GtkWidget*? {
        @return gtk_spin_button_new(adjustment,climb_rate, digits)
    }

    @spin_button_new_with_range(gdouble min, gdouble max, gdouble step) GtkWidget*? {
        @return gtk_spin_button_new_with_range(min,max, step)
    }

    @spin_button_set_adjustment(GtkSpinButton* spin_button, GtkAdjustment* adjustment) void {
        @gtk_spin_button_set_adjustment(spin_button, adjustment)
    }

    @spin_button_get_adjustment(GtkSpinButton* spin_button) GtkAdjustment*? {
        @return gtk_spin_button_get_adjustment(spin_button)
    }

    @spin_button_set_digits(GtkSpinButton* spin_button, guint digits) void {
        @gtk_spin_button_set_digits(spin_button, digits)
    }

    @spin_button_set_increments(GtkSpinButton* spin_button, gdouble sep, gdouble page) void {
        @gtk_spin_button_set_increments(spin_button,sep, page)
    }

    @spin_button_set_range(GtkSpinButton* spin_button, gdouble min, gdouble max) void {
        @gtk_spin_button_set_range(spin_button,min, max)
    }

    @spin_button_get_value_as_int(GtkSpinButton* spin_button) gint? {
        @return gtk_spin_button_get_value_as_int(spin_button)
    }

    @spin_button_set_value(GtkSpinButton* spin_button, gdouble value) void {
        @gtk_spin_button_set_value(spin_button, value)
    }

    @spin_button_set_update_policy(GtkSpinButton* spin_button, GtkSpinButtonUpdatePolicy policy) void {
        @gtk_spin_button_set_update_policy(spin_button, policy)
    }

    @spin_button_set_numeric(GtkSpinButton* spin_button, gboolean numeric) void {
        @gtk_spin_button_set_numeric(spin_button, numeric)
    }

    @spin_button_spin(GtkSpinButton* spin_button, GtkSpinType direction, gdouble increment) void {
        @gtk_spin_button_spin(spin_button,direction, increment)
    }

    @spin_button_set_wrap(GtkSpinButton* spin_button, gdouble wrap) void {
        @gtk_spin_button_set_wrap(spin_button, wrap)
    }

    @spin_button_set_snap_to_ticks(GtkSpinButton* spin_button, gboolean snap_to_ticks) void {
        @gtk_spin_button_set_snap_to_ticks(spin_button, snap_to_ticks)
    }

    @spin_button_update(GtkSpinButton* spin_button) void {
        @gtk_spin_button_update(spin_button)
    }

    @spin_button_get_digits(GtkSpinButton* spin_button) guint? {
        @return gtk_spin_button_get_digits(spin_button)
    }

    @spin_button_get_increments(GtkSpinButton* spin_button, gdouble* step, gdouble* page) void {
        @gtk_spin_button_get_increments(spin_button,step, page)
    }

    @spin_button_get_numeric(GtkSpinButton* spin_button) gdouble? {
        @return gtk_spin_button_get_numeric(spin_button)
    }

    @spin_button_get_range(GtkSpinButton* spin_button, gdouble* min, gdouble* max) void {
        @gtk_spin_button_get_range(spin_button,min, max)
    }

    @spin_button_get_snap_to_ticks(GtkSpinButton* spin_button) gboolean? {
        @return gtk_spin_button_get_snap_to_ticks(spin_button)
    }

    @spin_button_get_update_policy(GtkSpinButton* spin_button) GtkSpinButtonUpdatePolicy? {
        @return gtk_spin_button_get_update_policy(spin_button)
    }

    @spin_button_get_value(GtkSpinButton* spin_button) gdouble? {
        @return gtk_spin_button_get_value(spin_button)
    }

    @spin_button_get_wrap(GtkSpinButton* spin_button) gboolean? {
        @return gtk_spin_button_get_wrap(spin_button)
    }

    // ---
    // End of GtkSpinButton

    // GtkSearchEntry

    @search_entry_new GtkWidget*? {
        @return gtk_search_entry_new()
    }

    @search_entry_handle_event(GtkSearchEntry* entry, GdkEvent* event) gboolean? {
        @return gtk_search_entry_handle_event(entry, event)
    }

    // ---
    // End of GtkSearchEntry

    // GtkSearchBar

    @search_bar_new GtkWidget*? {
        @return gtk_search_bar_new()
    }

    @search_bar_connect_entry(GtkSearchBar* bar, GtkEntry* entry) void {
        @gtk_search_bar_connect_entry(bar, entry)
    }

    @search_bar_get_search_mode(GtkSearchBar* bar) gboolean? {
        @return gtk_search_bar_get_search_mode(bar)
    }

    @search_bar_set_search_mode(GtkSearchBar* bar, gboolean search_mode) void {
        @gtk_search_bar_set_search_mode(bar, search_mode)
    }

    @search_bar_get_show_close_button(GtkSearchBar* bar) gboolean? {
        @return gtk_search_bar_get_show_close_button(bar)
    }

    @search_bar_set_show_close_button(GtkSearchBar* bar, gboolean visible) void {
        @gtk_search_bar_set_show_close_button(bar, visible)
    }

    @search_bar_handle_event(GtkSearchBar* bar, GdkEvent* event) gboolean? {
        @return gtk_search_bar_handle_event(bar, event)
    }

    // ---
    // End of GtkSearchBar

    // GtkEditable

    @editable_select_region(GtkEditable* editable, gint start_pos, gint end_pos) void {
        @gtk_editable_select_region(editable,start_pos, end_pos)
    }

    @editable_get_selection_bounds(GtkEditable* editable, gint* start_pos, gint* end_pos) gboolean? {
        @return gtk_editable_get_selection_bounds(editable,start_pos, end_pos)
    }

    @editable_insert_text(GtkEditable* editable, const gchar* new_text, gint new_text_length, gint* position) void {
        @gtk_editable_insert_text(editable,new_text,new_text_length, position)
    }

    @editable_delete_text(GtkEditable* editable, gint start_pos, gint end_pos) void {
        @gtk_editable_delete_text(editable,start_pos, end_pos)
    }

    @editable_get_chars(GtkEditable* editable, gint start_pos, gint end_pos) gchar*? {
        @return gtk_editable_get_chars(editable,start_pos, end_pos)
    }

    @editable_cut_clipboard(GtkEditable* editable) void {
        @return gtk_editable_cut_clipboard(editable)
    }

    @editable_copy_clipboard(GtkEditable* editable) void {
        @return gtk_editable_copy_clipboard(editable)
    }

    @editable_delete_selection(GtkEditable* editable) void {
        @gtk_editable_delete_selection(editable)
    }

    @editable_set_position(GtkEditable* editable, gint position) void {
        @gtk_editable_set_position(editable, position)
    }

    @editable_get_position(GtkEditable* editable) gint? {
        @return gtk_editable_get_position(editable)
    }

    @editable_set_editable(GtkEditable* editable, gboolean is_editable) void {
        @gtk_editable_set_editable(editable, is_editable)
    }

    @editable_get_editable(GtkEditable* editable) gboolean? {
        @return gtk_editable_get_editable(editable)
    }

    // ---
    // End of GtkEditable

    // TODO: Will be implemented soon (PRs are welcome):
    //  * GtkTextIter
    //  * GtkTextMark
    //  * GtkTextBuffer
    //  * GtkTextTag
    //  * GtkTextTagTable
    //  * GtkTextView

    // GtkTreeModel

    // Unimplemented: gboolean
    //(*GtkTreeModelForeachFunc) (GtkTreeModel* model,
    //                            GtkTreePath* path,
    //                            GtkTreeIter* iter,
    //                            gpointer data)

    @tree_path_new GtkTreePath*? {
        @return gtk_tree_path_new()
    }

    @tree_path_new_from_string(const gchar *path) GtkTreePath*? {
        @return gtk_tree_path_new_from_string(path)
    }

    #template <typename... ListOf>
    @tree_path_new_from_indices(gint first_index, ListOf... integers) GtkTreePath*? {
        @return (gtk_tree_path_new_from_indices(first_index,integers), ...)
    }

    @tree_path_new_from_indicesv(gint* indices, gsize length) GtkTreePath*? {
        @return gtk_tree_path_new_from_indicesv(indices, length)
    }

    @tree_path_to_string(GtkTreePath* path) gchar*? {
        @return gtk_tree_path_to_string(path)
    }

    @tree_path_new_first GtkTreePath*? {
        @return gtk_tree_path_new_first()
    }

    @tree_path_append_index(GtkTreePath* path, gint index_) void {
        @gtk_tree_path_append_index(path, index_)
    }

    @tree_path_prepend_index(GtkTreePath* path, gint index_) void {
        @gtk_tree_path_prepend_index(path, index_)
    }

    @tree_path_get_depth(GtkTreePath* path) gint? {
        @return gtk_tree_path_get_depth(path)
    }

    @tree_path_get_indices(GtkTreePath* path) gint*? {
        @return gtk_tree_path_get_indices(path)
    }

    @tree_path_get_indices_with_depth(GtkTreePath* path, gint *depth) gint*? {
        @return gtk_tree_path_get_indices_with_depth(path, depth)
    }

    @tree_path_free(GtkTreePath* path) void {
        @gtk_tree_path_free(path)
    }

    @tree_path_copy(const GtkTreePath* path) GtkTreePath*? {
        @return gtk_tree_path_copy(path)
    }

    @tree_path_compare(const GtkTreePath* a, const GtkTreePath* b) gint? {
        @return gtk_tree_path_compare(a, b)
    }

    @tree_path_next(GtkTreePath* path) void {
        @gtk_tree_path_next(path)
    }

    @tree_path_prev(GtkTreePath* path) gboolean? {
        @return gtk_tree_path_prev(path)
    }

    @tree_path_up(GtkTreePath* path) gboolean? {
        @return gtk_tree_path_up(path)
    }

    @tree_path_down(GtkTreePath* path) void {
        @gtk_tree_path_down(path)
    }

    @tree_path_is_ancestor(GtkTreePath* path, GtkTreePath* descendant) gboolean? {
        @return gtk_tree_path_is_ancestor(path, descendant)
    }

    @tree_path_is_descendant(GtkTreePath* path, GtkTreePath* ancestor) gboolean? {
        @return gtk_tree_path_is_descendant(path, ancestor)
    }

    @tree_row_reference_new(GtkTreeModel* model, GtkTreePath* path) GtkTreeRowReference*? {
        @return gtk_tree_row_reference_new(model, path)
    }

    @tree_row_reference_new_proxy(GObject* proxy, GtkTreeModel* model, GtkTreePath* path) GtkTreeRowReference*? {
        @return gtk_tree_row_reference_new_proxy(proxy,model, path)
    }

    @tree_row_reference_get_model(GtkTreeRowReference* reference) GtkTreeModel*? {
        @return gtk_tree_row_reference_get_model(reference)
    }

    @tree_row_reference_get_path(GtkTreeRowReference* reference) GtkTreePath*? {
        @return gtk_tree_row_reference_get_path(reference)
    }

    @tree_row_reference_valid(GtkTreeRowReference* reference) gboolean? {
        @return gtk_tree_row_reference_valid(reference)
    }

    @tree_row_reference_free(GtkTreeRowReference* reference) void {
        @gtk_tree_row_reference_free(reference)
    }

    @tree_row_reference_copy(GtkTreeRowReference* reference) GtkTreeRowReference*? {
        @return gtk_tree_row_reference_copy(reference)
    }

    @tree_row_reference_inserted(GObject* proxy, GtkTreePath* path) void {
        @gtk_tree_row_reference_inserted(proxy, path)
    }

    @tree_row_reference_deleted(GObject* proxy, GtkTreePath* path) void {
        @gtk_tree_row_reference_deleted(proxy, path)
    }

    @tree_row_reference_reordered(GObject* proxy, GtkTreePath* path, GtkTreeIter* iter, gint* new_order) void {
        @gtk_tree_row_reference_reordered(proxy,path,iter, new_order)
    }

    @tree_iter_copy(GtkTreeIter* iter) GtkTreeIter*? {
        @return gtk_tree_iter_copy(iter)
    }

    @tree_iter_free(GtkTreeIter* iter) void {
        @gtk_tree_iter_free(iter)
    }

    @tree_model_get_flags(GtkTreeModel* tree_model) GtkTreeModelFlags? {
        @return gtk_tree_model_get_flags(tree_model)
    }

    @tree_model_get_n_columns(GtkTreeModel* tree_model) gint? {
        @return gtk_tree_model_get_n_columns(tree_model)
    }

    @tree_model_get_column_type(GtkTreeModel* tree_model, gint index_) GType? {
        @return gtk_tree_model_get_column_type(tree_model, index_)
    }

    @tree_model_get_iter(GtkTreeModel* tree_model, GtkTreeIter* iter, GtkTreePath* path) gboolean? {
        @return gtk_tree_model_get_iter(tree_model,iter, path)
    }

    @tree_model_get_iter_from_string(GtkTreeModel* tree_model, GtkTreeIter* iter, const gchar* path_str) gboolean? {
        @return gtk_tree_model_get_iter_from_string(tree_model,iter, path_str)
    }

    @tree_model_get_iter_first(GtkTreeModel* tree_model, GtkTreeIter* iter) gboolean? {
        @return gtk_tree_model_get_iter_first(tree_model, iter)
    }

    @tree_model_get_path(GtkTreeModel* model, GtkTreeIter* iter) GtkTreePath*? {
        @return gtk_tree_model_get_path(model, iter)
    }

    @tree_model_get_value(GtkTreeModel* tree_model, GtkTreeIter* iter, gint column, GValue* value) void {
        @gtk_tree_model_get_value(tree_model,iter,column, value)
    }

    @tree_model_iter_next(GtkTreeModel* tree_model, GtkTreeIter* iter) gboolean? {
        @return gtk_tree_model_iter_next(tree_model, iter)
    }

    @tree_model_iter_previous(GtkTreeModel* tree_model, GtkTreeIter* iter) gboolean? {
        @return gtk_tree_model_iter_previous(tree_model, iter)
    }

    @tree_model_iter_children(GtkTreeModel* tree_model, GtkTreeIter* iter, GtkTreeIter* parent) gboolean? {
        @return gtk_tree_model_iter_children(tree_model,iter, parent)
    }

    @tree_model_iter_has_child(GtkTreeModel* tree_model, GtkTreeIter* iter) gboolean? {
        @return gtk_tree_model_iter_has_child(tree_model, iter)
    }

    @tree_model_iter_n_children(GtkTreeModel* tree_model, GtkTreeIter* iter) gint? {
        @return gtk_tree_model_iter_n_children(tree_model, iter)
    }

    @tree_model_iter_nth_child(GtkTreeModel* tree_model, GtkTreeIter* iter, GtkTreeIter* parent, gint n) gboolean? {
        @return gtk_tree_model_iter_nth_child(tree_model,iter,parent, n)
    }

    @tree_model_iter_parent(GtkTreeModel* tree_model, GtkTreeIter* iter, GtkTreeIter* child) gboolean? {
        @return gtk_tree_model_iter_parent(tree_model,iter, child)
    }

    @tree_model_get_string_from_iter(GtkTreeModel* tree_model, GtkTreeIter* iter) gchar*? {
        @return gtk_tree_model_get_string_from_iter(tree_model, iter)
    }

    @tree_model_ref_node(GtkTreeModel* tree_model, GtkTreeIter* iter) void {
        @gtk_tree_model_ref_node(tree_model, iter)
    }

    @tree_model_unref_node(GtkTreeModel* tree_model, GtkTreeIter* iter) void {
        @gtk_tree_model_unref_node(tree_model, iter)
    }

    #template <typename... Pairs>
    @tree_model_get(GtkTreeModel* tree_model, GtkTreeIter* iter, Pairs... column) void {
        @(gtk_tree_model_get(tree_model,iter,column), ...)
    }

    @tree_model_get_valist(GtkTreeModel* tree_model, GtkTreeIter* iter, va_list var_args) void {
        @gtk_tree_model_get_valist(tree_model,iter, var_args)
    }

    @tree_model_foreach(GtkTreeModel* model, GtkTreeModelForeachFunc func, gpointer user_data) void {
        @gtk_tree_model_foreach(model,func, user_data)
    }

    @tree_model_row_changed(GtkTreeModel* tree_model, GtkTreePath* path, GtkTreeIter* iter) void {
        @gtk_tree_model_row_changed(tree_model,path, iter)
    }

    @tree_model_row_inserted(GtkTreeModel* tree_model, GtkTreePath* path, GtkTreeIter* iter) void {
        @gtk_tree_model_row_inserted(tree_model,path, iter)
    }

    @tree_model_row_has_child_toggled(GtkTreeModel* tree_model, GtkTreePath* path, GtkTreeIter* iter) void {
        @gtk_tree_model_row_has_child_toggled(tree_model,path, iter)
    }

    @tree_model_row_deleted(GtkTreeModel* tree_model, GtkTreePath* path) void {
        @gtk_tree_model_row_deleted(tree_model, path)
    }

    @tree_model_rows_reordered(GtkTreeModel* tree_model, GtkTreePath* path, GtkTreeIter* iter, gint* new_order) void {
        @gtk_tree_model_rows_reordered(tree_model,path,iter, new_order)
    }

    @tree_model_rows_reordered_with_length(GtkTreeModel* tree_model, GtkTreePath* path, GtkTreeIter* iter, gint* new_order, gint length) void {
        @gtk_tree_model_rows_reordered_with_length(tree_model,path,iter,new_order, length)
    }

    // ---
    // End of GtkTreeModel

    // GtkTreeSelection

    // Unimplemented: gboolean
    //(*GtkTreeSelectionFunc) (GtkTreeSelection* selection,
    //                         GtkTreeModel* model,
    //                         GtkTreePath* path,
    //                         gboolean path_currently_selected,
    //                         gpointer data)

    // Unimplemented: void
    //(*GtkTreeSelectionForeachFunc) (GtkTreeModel* model,
    //                                GtkTreePath* path,
    //                                GtkTreeIter* iter,
    //                                gpointer data);

    @tree_selection_set_mode(GtkTreeSelection* selection, GtkSelectionMode type) void {
        @gtk_tree_selection_set_mode(selection, type)
    }

    @tree_selection_get_mode(GtkTreeSelection* selection) GtkSelectionMode? {
        @return gtk_tree_selection_get_mode(selection)
    }

    @tree_selection_set_select_function(GtkTreeSelection* selection, GtkTreeSelectionFunc func, gpointer data, GDestroyNotify destroy) void {
        @gtk_tree_selection_set_select_function(selection,func,data, destroy)
    }

    @tree_selection_get_select_function(GtkTreeSelection* selection) GtkTreeSelectionFunc? {
        @return gtk_tree_selection_get_select_function(selection)
    }

    @tree_selection_get_user_data(GtkTreeSelection* selection) gpointer? {
        @return gtk_tree_selection_get_user_data(selection)
    }

    @tree_selection_get_tree_view(GtkTreeSelection* selection) GtkTreeView*? {
        @return gtk_tree_selection_get_tree_view(selection)
    }

    @tree_selection_get_selected(GtkTreeSelection* selection, GtkTreeModel** model, GtkTreeIter* iter) gboolean? {
        @return gtk_tree_selection_get_selected(selection,model, iter)
    }

    @tree_selection_selected_foreach(GtkTreeSelection* selection, GtkTreeSelectionForeachFunc func, gpointer data) void {
        @gtk_tree_selection_selected_foreach(selection,func, data)
    }

    @tree_selection_get_selected_rows(GtkTreeSelection* selection, GtkTreeModel** model) GList*? {
        @return gtk_tree_selection_get_selected_rows(selection, model)
    }

    @tree_selection_count_selected_rows(GtkTreeSelection* selection) gint? {
        @return gtk_tree_selection_count_selected_rows(selection)
    }

    @tree_selection_select_path(GtkTreeSelection* selection, GtkTreePath* path) void {
        @gtk_tree_selection_select_path(selection, path)
    }

    @tree_selection_unselect_path(GtkTreeSelection* selection, GtkTreePath* path) void {
        @gtk_tree_selection_unselect_path(selection, path)
    }

    @tree_selection_path_is_selected(GtkTreeSelection* selection, GtkTreePath* path) gboolean? {
        @return gtk_tree_selection_path_is_selected(selection, path)
    }

    @tree_selection_select_iter(GtkTreeSelection* selection, GtkTreeIter* iter) void {
        @gtk_tree_selection_select_iter(selection, iter)
    }

    @tree_selection_unselect_iter(GtkTreeSelection* selection, GtkTreeIter* iter) void {
        @gtk_tree_selection_unselect_iter(selection, iter)
    }

    @tree_selection_iter_is_selected(GtkTreeSelection* selection, GtkTreeIter* iter) gboolean? {
        @return gtk_tree_selection_iter_is_selected(selection, iter)
    }

    @tree_selection_select_all(GtkTreeSelection* selection) void {
        @gtk_tree_selection_select_all(selection)
    }

    @tree_selection_unselect_all(GtkTreeSelection* selection) void {
        @gtk_tree_selection_unselect_all(selection)
    }

    @tree_selection_select_range(GtkTreeSelection* selection, GtkTreePath* start_path, GtkTreePath* end_path) void {
        @return gtk_tree_selection_select_range(selection,start_path, end_path)
    }

    @tree_selection_unselect_range(GtkTreeSelection* selection, GtkTreePath* start_path, GtkTreePath* end_path) void {
        @gtk_tree_selection_unselect_range(selection,start_path, end_path)
    }

    // ---
    // End of GtkTreeSelection

    // GtkTreeViewColumn

    // Unimplemented: void
    //(*GtkTreeCellDataFunc) (GtkTreeViewColumn *tree_column,
    //                        GtkCellRenderer *cell,
    //                        GtkTreeModel *tree_model,
    //                        GtkTreeIter *iter,
    //                        gpointer data);

    @tree_view_column_new GtkTreeViewColumn*? {
        @return gtk_tree_view_column_new()
    }

    @tree_view_column_new_with_area(GtkCellArea* area) GtkTreeViewColumn*? {
        @return gtk_tree_view_column_new_with_area(area)
    }


    #template <typename... Attrs>
    @tree_view_column_new_with_attributes(const gchar* title, GtkCellRenderer* cell, Attrs... list) GtkTreeViewColumn*? {
        @return (gtk_tree_view_column_new_with_attributes(title,cell,list), ...)
    }

    @tree_view_column_pack_start(GtkTreeViewColumn* tree_column, GtkCellRenderer* cell, gboolean expand) void {
        @gtk_tree_view_column_pack_start(tree_column,cell, expand)
    }

    @tree_view_column_pack_end(GtkTreeViewColumn* tree_column, GtkCellRenderer* cell, gboolean expand) void {
        @gtk_tree_view_column_pack_end(tree_column,cell, expand)
    }

    @tree_view_column_clear(GtkTreeViewColumn* tree_column) void {
        @gtk_tree_view_column_clear(tree_column)
    }

    @tree_view_column_add_attribute(GtkTreeViewColumn* tree_column, GtkCellRenderer* cell_renderer, const gchar* attribute, gint column) void {
        @gtk_tree_view_column_add_attribute(tree_column,cell_renderer,attribute, column)
    }

    #template <typename... Attrs>
    @tree_view_column_set_attributes(GtkTreeViewColumn* tree_column, GtkCellRenderer* cell_renderer, Attrs... list) void {
        @(gtk_tree_view_column_set_attributes(tree_column,cell_renderer,list), ...)
    }

    @tree_view_column_set_cell_data_func(GtkTreeViewColumn* tree_column, GtkCellRenderer* cell_renderer, GtkTreeCellDataFunc func, gpointer func_data, GDestroyNotify destroy) void {
        @gtk_tree_view_column_set_cell_data_func(tree_column,cell_renderer,func,func_data, destroy)
    }

    @tree_view_column_clear_attributes(GtkTreeViewColumn* tree_column, GtkCellRenderer* cell_renderer) void {
        @gtk_tree_view_column_clear_attributes(tree_column, cell_renderer)
    }

    @tree_view_column_set_spacing(GtkTreeViewColumn* tree_column, gint spacing) void {
        @gtk_tree_view_column_set_spacing(tree_column, spacing)
    }

    @tree_view_column_get_spacing(GtkTreeViewColumn* tree_column) gint? {
        @return gtk_tree_view_column_get_spacing(tree_column)
    }

    @tree_view_column_set_visible(GtkTreeViewColumn* tree_column, gboolean visible) void {
        @gtk_tree_view_column_set_visible(tree_column, visible)
    }

    @tree_view_column_get_visible(GtkTreeViewColumn* tree_column) gboolean? {
        @return gtk_tree_view_column_get_visible(tree_column)
    }

    @tree_view_column_set_resizable(GtkTreeViewColumn* tree_column, gboolean resizable) void {
        @gtk_tree_view_column_set_resizable(tree_column, resizable)
    }

    @tree_view_column_get_resizable(GtkTreeViewColumn* tree_column) gboolean? {
        @return gtk_tree_view_column_get_resizable(tree_column)
    }

    @tree_view_column_set_sizing(GtkTreeViewColumn* tree_column, GtkTreeViewColumnSizing type) void {
        @gtk_tree_view_column_set_sizing(tree_column, type)
    }

    @tree_view_column_get_sizing(GtkTreeViewColumn* tree_column) GtkTreeViewColumnSizing? {
        @return gtk_tree_view_column_get_sizing(tree_column)
    }

    @tree_view_column_get_width(GtkTreeViewColumn* tree_column) gint? {
        @return gtk_tree_view_column_get_width(tree_column)
    }

    @tree_view_column_get_fixed_width(GtkTreeViewColumn* tree_column) gint? {
        @return gtk_tree_view_column_get_fixed_width(tree_column)
    }

    @tree_view_column_set_fixed_width(GtkTreeViewColumn* tree_column, gint fixed_width) void {
        @gtk_tree_view_column_set_fixed_width(tree_column, fixed_width)
    }

    @tree_view_column_set_min_width(GtkTreeViewColumn* tree_column, gint min_width) void {
        @gtk_tree_view_column_set_min_width(tree_column, min_width)
    }

    @tree_view_column_get_min_width(GtkTreeViewColumn* tree_column) gint? {
        @return gtk_tree_view_column_get_min_width(tree_column)
    }

    @tree_view_column_set_max_width(GtkTreeViewColumn* tree_column, gint max_width) void {
        @gtk_tree_view_column_set_max_width(tree_column, max_width)
    }

    @tree_view_column_get_max_width(GtkTreeViewColumn* tree_column) gint? {
        @return gtk_tree_view_column_get_max_width(tree_column)
    }

    @tree_view_column_clicked(GtkTreeViewColumn* tree_column) void {
        @gtk_tree_view_column_clicked(tree_column)
    }

    @tree_view_column_set_title(GtkTreeViewColumn* tree_column, const gchar* title) void {
        @gtk_tree_view_column_set_title(tree_column, title)
    }

    #const gchar* tree_view_column_get_title(GtkTreeViewColumn* tree_column) {
        @return gtk_tree_view_column_get_title(tree_column)
    }

    @tree_view_column_set_expand(GtkTreeViewColumn* tree_column, gboolean expand) void {
        @gtk_tree_view_column_set_expand(tree_column, expand)
    }

    @tree_view_column_get_expand(GtkTreeViewColumn* tree_column) gboolean? {
        @return gtk_tree_view_column_get_expand(tree_column)
    }

    @tree_view_column_set_clickable(GtkTreeViewColumn* tree_column, gboolean clickable) void {
        @gtk_tree_view_column_set_clickable(tree_column, clickable)
    }

    @tree_view_column_get_clickable(GtkTreeViewColumn* tree_column) gboolean? {
        @return gtk_tree_view_column_get_clickable(tree_column)
    }

    @tree_view_column_set_widget(GtkTreeViewColumn* tree_column, GtkWidget* widget) void {
        @gtk_tree_view_column_set_widget(tree_column, widget)
    }

    @tree_view_column_get_widget(GtkTreeViewColumn* tree_column) GtkWidget*? {
        @return gtk_tree_view_column_get_widget(tree_column)
    }

    @tree_view_column_get_button(GtkTreeViewColumn* tree_column) GtkWidget*? {
        @return gtk_tree_view_column_get_button(tree_column)
    }

    @tree_view_column_set_alignment(GtkTreeViewColumn* tree_column, gfloat xalign) void {
        @gtk_tree_view_column_set_alignment(tree_column, xalign)
    }

    @tree_view_column_get_alignment(GtkTreeViewColumn* tree_column) gfloat? {
        @return gtk_tree_view_column_get_alignment(tree_column)
    }

    @tree_view_column_set_reorderable(GtkTreeViewColumn* tree_column, gboolean reorderable) void {
        @gtk_tree_view_column_set_reorderable(tree_column, reorderable)
    }

    @tree_view_column_get_reorderable(GtkTreeViewColumn* tree_column) gboolean? {
        @return gtk_tree_view_column_get_reorderable(tree_column)
    }

    @tree_view_column_set_sort_column_id(GtkTreeViewColumn* tree_column, gint sort_column_id) void {
        @gtk_tree_view_column_set_sort_column_id(tree_column, sort_column_id)
    }

    @tree_view_column_get_sort_column_id(GtkTreeViewColumn* tree_column) gint? {
        @return gtk_tree_view_column_get_sort_column_id(tree_column)
    }

    @tree_view_column_set_sort_indicator(GtkTreeViewColumn* tree_column, gboolean setting) void {
        @gtk_tree_view_column_set_sort_indicator(tree_column, setting)
    }

    @tree_view_column_get_sort_indicator(GtkTreeViewColumn* tree_column) gboolean? {
        @return gtk_tree_view_column_get_sort_indicator(tree_column)
    }

    @tree_view_column_set_sort_order(GtkTreeViewColumn* tree_column, GtkSortType order) void {
        @gtk_tree_view_column_set_sort_order(tree_column, order)
    }

    @tree_view_column_get_sort_order(GtkTreeViewColumn* tree_column) GtkSortType? {
        @return gtk_tree_view_column_get_sort_order(tree_column)
    }

    @tree_view_column_cell_set_cell_data(GtkTreeViewColumn* tree_column, GtkTreeModel* tree_model, GtkTreeIter* iter, gboolean is_expander, gboolean is_expanded) void {
        @gtk_tree_view_column_cell_set_cell_data(tree_column,tree_model,iter,is_expander, is_expanded)
    }

    @tree_view_column_cell_get_size(GtkTreeViewColumn* tree_column, const GdkRectangle* cell_area, gint* x_offset, gint* y_offset, gint* width, gint* height) void {
        @gtk_tree_view_column_cell_get_size(tree_column,cell_area,x_offset,y_offset,width, height)
    }

    @tree_view_column_cell_get_position(GtkTreeViewColumn* tree_column, GtkCellRenderer* cell_renderer, gint* x_offset, gint* width) gboolean? {
        @return gtk_tree_view_column_cell_get_position(tree_column,cell_renderer,x_offset, width)
    }

    @tree_view_column_cell_is_visible(GtkTreeViewColumn* tree_column) gboolean? {
        @return gtk_tree_view_column_cell_is_visible(tree_column)
    }

    @tree_view_column_focus_cell(GtkTreeViewColumn* tree_column, GtkCellRenderer* cell) void {
        @gtk_tree_view_column_focus_cell(tree_column, cell)
    }

    @tree_view_column_queue_resize(GtkTreeViewColumn* tree_column) void {
        @gtk_tree_view_column_queue_resize(tree_column)
    }

    @tree_view_column_get_tree_view(GtkTreeViewColumn* tree_column) GtkWidget*? {
        @return gtk_tree_view_column_get_tree_view(tree_column)
    }

    @tree_view_column_get_x_offset(GtkTreeViewColumn* tree_column) gint? {
        @return gtk_tree_view_column_get_x_offset(tree_column)
    }

    // ---
    // End of GtkTreeViewColumn

    // GtkTreeView

    // Unimplemented: void
    //(*GtkTreeViewMappingFunc) (GtkTreeView *tree_view,
    //                           GtkTreePath *path,
    //                           gpointer user_data);

    // Unimplemented: void
    //(*GtkTreeViewMappingFunc) (GtkTreeView *tree_view,
    //                           GtkTreePath *path,
    //                           gpointer user_data);

    // Unimplemented: gboolean
    //(*GtkTreeViewSearchEqualFunc) (GtkTreeModel *model,
    //                               gint column,
    //                               const gchar *key,
    //                               GtkTreeIter *iter,
    //                               gpointer search_data);

    @tree_view_new GtkWidget*? {
        @return gtk_tree_view_new()
    }

    @tree_view_get_level_indentation(GtkTreeView* tree_view) gint? {
        @return gtk_tree_view_get_level_indentation(tree_view)
    }

    @tree_view_get_show_expanders(GtkTreeView* tree_view) gboolean? {
        @return gtk_tree_view_get_show_expanders(tree_view)
    }

    @tree_view_set_level_indentation(GtkTreeView* tree_view, gint indentation) void {
        @gtk_tree_view_set_level_indentation(tree_view, indentation)
    }

    @tree_view_set_show_expanders(GtkTreeView* tree_view, gboolean enabled) void {
        @gtk_tree_view_set_show_expanders(tree_view, enabled)
    }

    @tree_view_new_with_model(GtkTreeModel* model) GtkWidget*? {
        @return gtk_tree_view_new_with_model(model)
    }

    @tree_view_get_model(GtkTreeView* tree_view) GtkTreeModel*? {
        @return gtk_tree_view_get_model(tree_view)
    }

    @tree_view_set_model(GtkTreeView* tree_view, GtkTreeModel* model) void {
        @gtk_tree_view_set_model(tree_view, model)
    }

    @tree_view_get_selection(GtkTreeView* tree_view) GtkTreeSelection*? {
        @return gtk_tree_view_get_selection(tree_view)
    }

    // Deprecated: @tree_view_get_hadjustment(GtkTreeView* tree_view)

    // Deprecated: @tree_view_set_hadjustment(GtkTreeView* tree_view,
    //                               GtkAdjustment* adjustment)

    // Deprecated: @tree_view_get_vadjustment(GtkTreeView* tree_view)

    // Deprecated: @tree_view_set_vadjustment(GtkTreeView* tree_view,
    //                               GtkAdjustment* adjustment)

    @tree_view_get_headers_visible(GtkTreeView* tree_view) gboolean? {
        @return gtk_tree_view_get_headers_visible(tree_view)
    }

    @tree_view_set_headers_visible(GtkTreeView* tree_view, gboolean headers_visible) void {
        @gtk_tree_view_set_headers_visible(tree_view, headers_visible)
    }

    @tree_view_columns_autosize(GtkTreeView* tree_view) void {
        @gtk_tree_view_columns_autosize(tree_view)
    }

    @tree_view_get_headers_clickable(GtkTreeView* tree_view) gboolean? {
        @return gtk_tree_view_get_headers_clickable(tree_view)
    }

    @tree_view_set_headers_clickable(GtkTreeView* tree_view, gboolean setting) void {
        @gtk_tree_view_set_headers_clickable(tree_view, setting)
    }

    // Deprecated: @tree_view_set_rules_hint(GtkTreeView* tree_view,
    //                              gboolean setting)

    // Deprecated: @tree_view_get_rules_hint(GtkTreeView* tree_view)

    @tree_view_set_activate_on_single_click(GtkTreeView* tree_view, gboolean single) void {
        @gtk_tree_view_set_activate_on_single_click(tree_view, single)
    }

    @tree_view_get_activate_on_single_click(GtkTreeView* tree_view) gboolean? {
        @return gtk_tree_view_get_activate_on_single_click(tree_view)
    }

    @tree_view_append_column(GtkTreeView* tree_view, GtkTreeViewColumn* column) gint? {
        @return gtk_tree_view_append_column(tree_view, column)
    }

    @tree_view_remove_column(GtkTreeView* tree_view, GtkTreeViewColumn* column) gint? {
        @return gtk_tree_view_remove_column(tree_view, column)
    }

    @tree_view_insert_column(GtkTreeView* tree_view, GtkTreeViewColumn* column, gint position) gint? {
        @return gtk_tree_view_insert_column(tree_view,column, position)
    }

    #template <typename... Attrs>
    @tree_view_insert_column_with_attributes(GtkTreeView* tree_view, gint position, const gchar* title, GtkCellRenderer* cell, Attrs... list) gint? {
        @return (gtk_tree_view_insert_column_with_attributes(tree_view,position,title,cell,list), ...)
    }

    @tree_view_insert_column_with_data_func(GtkTreeView* tree_view, gint position, const gchar* title, GtkCellRenderer* cell, GtkTreeCellDataFunc func, gpointer data, GDestroyNotify dnotify) gint? {
        @return gtk_tree_view_insert_column_with_data_func(tree_view,position,title,cell,func,data, dnotify)
    }

    @tree_view_get_n_columns(GtkTreeView* tree_view) guint? {
        @return gtk_tree_view_get_n_columns(tree_view)
    }

    @tree_view_get_column(GtkTreeView* tree_view, gint n) GtkTreeViewColumn*? {
        @return gtk_tree_view_get_column(tree_view, n)
    }

    @tree_view_get_columns(GtkTreeView* tree_view) GList*? {
        @return gtk_tree_view_get_columns(tree_view)
    }

    @tree_view_move_column_after(GtkTreeView* tree_view, GtkTreeViewColumn* column, GtkTreeViewColumn* base_column) void {
        @gtk_tree_view_move_column_after(tree_view,column, base_column)
    }

    @tree_view_set_expander_column(GtkTreeView* tree_view, GtkTreeViewColumn* column) void {
        @gtk_tree_view_set_expander_column(tree_view, column)
    }

    @tree_view_get_expander_column(GtkTreeView* tree_view) GtkTreeViewColumn*? {
        @return gtk_tree_view_get_expander_column(tree_view)
    }

    @tree_view_set_column_drag_function(GtkTreeView* tree_view, GtkTreeViewColumnDropFunc func, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_tree_view_set_column_drag_function(tree_view,func,user_data, destroy)
    }

    @tree_view_scroll_to_point(GtkTreeView* tree_view, gint tree_x, gint tree_y) void {
        @gtk_tree_view_scroll_to_point(tree_view,tree_x, tree_y)
    }

    @tree_view_scroll_to_cell(GtkTreeView* tree_view, GtkTreePath* path, GtkTreeViewColumn* column, gboolean use_align, gfloat row_align, gfloat col_align) void {
        @gtk_tree_view_scroll_to_cell(tree_view,path,column,use_align,row_align, col_align)
    }

    @tree_view_set_cursor(GtkTreeView* tree_view, GtkTreePath* path, GtkTreeViewColumn* focus_column, gboolean start_editing) void {
        @gtk_tree_view_set_cursor(tree_view,path,focus_column, start_editing)
    }

    @tree_view_set_cursor_on_cell(GtkTreeView* tree_view, GtkTreePath* path, GtkTreeViewColumn* focus_column, GtkCellRenderer* focus_cell, gboolean start_editing) void {
        @gtk_tree_view_set_cursor_on_cell(tree_view,path,focus_column,focus_cell, start_editing)
    }

    @tree_view_get_cursor(GtkTreeView* tree_view, GtkTreePath** path, GtkTreeViewColumn** focus_column) void {
        @gtk_tree_view_get_cursor(tree_view,path, focus_column)
    }

    @tree_view_row_activated(GtkTreeView* tree_view, GtkTreePath* path, GtkTreeViewColumn* column) void {
        @gtk_tree_view_row_activated(tree_view,path, column)
    }

    @tree_view_expand_all(GtkTreeView* tree_view) void {
        @gtk_tree_view_expand_all(tree_view)
    }

    @tree_view_collapse_all(GtkTreeView* tree_view) void {
        @gtk_tree_view_collapse_all(tree_view)
    }

    @tree_view_expand_to_path(GtkTreeView* tree_view, GtkTreePath* path) void {
        @gtk_tree_view_expand_to_path(tree_view, path)
    }

    @tree_view_expand_row(GtkTreeView* tree_view, GtkTreePath* path, gboolean open_all) gboolean? {
        @gtk_tree_view_expand_row(tree_view,path, open_all)
    }

    @tree_view_collapse_row(GtkTreeView* tree_view, GtkTreePath* path) gboolean? {
        @return gtk_tree_view_collapse_row(tree_view, path)
    }

    @tree_view_map_expanded_rows(GtkTreeView* tree_view, GtkTreeViewMappingFunc func, gpointer data) void {
        @gtk_tree_view_map_expanded_rows(tree_view,func, data)
    }

    @tree_view_row_expanded(GtkTreeView* tree_view, GtkTreePath* path) gboolean? {
        @return gtk_tree_view_row_expanded(tree_view, path)
    }

    @tree_view_set_reorderable(GtkTreeView* tree_view, gboolean reorderable) void {
        @gtk_tree_view_set_reorderable(tree_view, reorderable)
    }

    @tree_view_get_reorderable(GtkTreeView* tree_view) gboolean? {
        @return gtk_tree_view_get_reorderable(tree_view)
    }

    @tree_view_get_path_at_pos(GtkTreeView* tree_view, gint x, gint y, GtkTreePath** path, GtkTreeViewColumn** column, gint* cell_x, gint* cell_y) gboolean? {
        @return gtk_tree_view_get_path_at_pos(tree_view,x,y,path,column,cell_x, cell_y)
    }

    @tree_view_is_blank_at_pos(GtkTreeView* tree_view, gint x, gint y, GtkTreePath** path, GtkTreeViewColumn** column, gint* cell_x, gint* cell_y) gboolean? {
        @return gtk_tree_view_is_blank_at_pos(tree_view,x,y,path,column,cell_x, cell_y)
    }

    @tree_view_get_cell_area(GtkTreeView* tree_view, GtkTreePath* path, GtkTreeViewColumn* column, GdkRectangle* rect) void {
        @gtk_tree_view_get_cell_area(tree_view,path,column, rect)
    }

    @tree_view_get_background_area(GtkTreeView* tree_view, GtkTreePath* path, GtkTreeViewColumn* column, GdkRectangle* rect) void {
        @gtk_tree_view_get_background_area(tree_view,path,column, rect)
    }

    @tree_view_get_visible_rect(GtkTreeView* tree_view, GdkRectangle* visible_rect) void {
        @gtk_tree_view_get_visible_rect(tree_view, visible_rect)
    }

    @tree_view_get_visible_range(GtkTreeView* tree_view, GtkTreePath** start_path, GtkTreePath** end_path) gboolean? {
        @return gtk_tree_view_get_visible_range(tree_view,start_path, end_path)
    }

    @tree_view_get_bin_window(GtkTreeView* tree_view) GdkWindow*? {
        @gtk_tree_view_get_bin_window(tree_view)
    }

    @tree_view_convert_bin_window_to_tree_coords(GtkTreeView* tree_view, gint bx, gint by, gint* tx, gint* ty) void {
        @gtk_tree_view_convert_bin_window_to_tree_coords(tree_view,bx,by,tx, ty)
    }

    @tree_view_convert_bin_window_to_widget_coords(GtkTreeView* tree_view, gint bx, gint by, gint* wx, gint* wy) void {
        @gtk_tree_view_convert_bin_window_to_widget_coords(tree_view,bx,by,wx, wy)
    }

    @tree_view_convert_tree_to_bin_window_coords(GtkTreeView* tree_view, gint tx, gint ty, gint* bx, gint* by) void {
        @gtk_tree_view_convert_tree_to_bin_window_coords(tree_view,tx,ty,bx, by)
    }

    @tree_view_convert_tree_to_widget_coords(GtkTreeView* tree_view, gint tx, gint ty, gint* wx, gint* wy) void {
        @gtk_tree_view_convert_tree_to_widget_coords(tree_view,tx,ty,wx, wy)
    }

    @tree_view_convert_widget_to_bin_window_coords(GtkTreeView* tree_view, gint wx, gint wy, gint* bx, gint* by) void {
        @gtk_tree_view_convert_widget_to_bin_window_coords(tree_view,wx,wy,bx, by)
    }

    @tree_view_convert_widget_to_tree_coords(GtkTreeView* tree_view, gint wx, gint wy, gint* tx, gint* ty) void {
        @gtk_tree_view_convert_widget_to_tree_coords(tree_view,wx,wy,tx, ty)
    }

    @tree_view_enable_model_drag_dest(GtkTreeView* tree_view, const GtkTargetEntry* targets, gint n_targets, GdkDragAction actions) void {
        @gtk_tree_view_enable_model_drag_dest(tree_view,targets,n_targets, actions)
    }

    @tree_view_enable_model_drag_source(GtkTreeView* tree_view, GdkModifierType start_button_mask, const GtkTargetEntry* targets, gint n_targets, GdkDragAction actions) void {
        @gtk_tree_view_enable_model_drag_source(tree_view,start_button_mask,targets,n_targets,actions)
    }

    @tree_view_unset_rows_drag_source(GtkTreeView* tree_view) void {
        @gtk_tree_view_unset_rows_drag_source(tree_view)
    }

    @tree_view_unset_rows_drag_dest(GtkTreeView* tree_view) void {
        @gtk_tree_view_unset_rows_drag_dest(tree_view)
    }

    @tree_view_set_drag_dest_row(GtkTreeView* tree_view, GtkTreePath* path, GtkTreeViewDropPosition pos) void {
        @gtk_tree_view_set_drag_dest_row(tree_view,path, pos)
    }

    @tree_view_get_drag_dest_row(GtkTreeView* tree_view, GtkTreePath** path, GtkTreeViewDropPosition* pos) void {
        @gtk_tree_view_get_drag_dest_row(tree_view,path, pos)
    }

    @tree_view_get_dest_row_at_pos(GtkTreeView* tree_view, gint drag_x, gint drag_y, GtkTreePath** path, GtkTreeViewDropPosition* pos) gboolean? {
        @return gtk_tree_view_get_dest_row_at_pos(tree_view,drag_x,drag_y,path, pos)
    }

    @tree_view_create_row_drag_icon(GtkTreeView* tree_view, GtkTreePath* path) cairo_surface_t*? {
        @return gtk_tree_view_create_row_drag_icon(tree_view, path)
    }

    @tree_view_set_enable_search(GtkTreeView* tree_view, gboolean enable_search) void {
        @gtk_tree_view_set_enable_search(tree_view, enable_search)
    }

    @tree_view_get_enable_search(GtkTreeView* tree_view) gboolean? {
        @return gtk_tree_view_get_enable_search(tree_view)
    }

    @tree_view_get_search_column(GtkTreeView* tree_view) gint? {
        @return gtk_tree_view_get_search_column(tree_view)
    }

    @tree_view_set_search_column(GtkTreeView* tree_view, gint column) void {
        @gtk_tree_view_set_search_column(tree_view, column)
    }

    @tree_view_get_search_equal_func(GtkTreeView* tree_view) GtkTreeViewSearchEqualFunc? {
        @return gtk_tree_view_get_search_equal_func(tree_view)
    }

    @tree_view_set_search_equal_func(GtkTreeView* tree_view, GtkTreeViewSearchEqualFunc search_equal_func, gpointer search_user_data, GDestroyNotify search_destroy) void {
        @gtk_tree_view_set_search_equal_func(tree_view,search_equal_func,search_user_data, search_destroy)
    }

    @tree_view_get_search_entry(GtkTreeView* tree_view) GtkEntry*? {
        @return gtk_tree_view_get_search_entry(tree_view)
    }

    @tree_view_set_search_entry(GtkTreeView* tree_view, GtkEntry* entry) void {
        @gtk_tree_view_set_search_entry(tree_view, entry)
    }

    // Unimplemented: void
    //(*GtkTreeViewSearchPositionFunc) (GtkTreeView *tree_view,
    //                                  GtkWidget *search_dialog,
    //                                  gpointer user_data);

    @tree_view_get_search_position_func(GtkTreeView* tree_view) GtkTreeViewSearchPositionFunc? {
        @return gtk_tree_view_get_search_position_func(tree_view)
    }

    @tree_view_set_search_position_func(GtkTreeView* tree_view, GtkTreeViewSearchPositionFunc func, gpointer data, GDestroyNotify destroy) void {
        @gtk_tree_view_set_search_position_func(tree_view,func,data, destroy)
    }

    @tree_view_get_fixed_height_mode(GtkTreeView* tree_view) gboolean? {
        @return gtk_tree_view_get_fixed_height_mode(tree_view)
    }

    @tree_view_set_fixed_height_mode(GtkTreeView* tree_view, gboolean enable) void {
        @gtk_tree_view_set_fixed_height_mode(tree_view, enable)
    }

    @tree_view_get_hover_selection(GtkTreeView* tree_view) gboolean? {
        @return gtk_tree_view_get_hover_selection(tree_view)
    }

    @tree_view_set_hover_selection(GtkTreeView* tree_view, gboolean hover) void {
        @gtk_tree_view_set_hover_selection(tree_view, hover)
    }

    @tree_view_get_hover_expand(GtkTreeView* tree_view) gboolean? {
        @return gtk_tree_view_get_hover_expand(tree_view)
    }

    @tree_view_set_hover_expand(GtkTreeView* tree_view, gboolean expand) void {
        @gtk_tree_view_set_hover_expand(tree_view, expand)
    }

    // Unimplemented: void
    //(*GtkTreeDestroyCountFunc) (GtkTreeView *tree_view,
    //                            GtkTreePath *path,
    //                            gint children,
    //                            gpointer user_data);

    // Deprecated: @tree_view_set_destroy_count_func(GtkTreeView* tree_view,
    //                                      GtkTreeDestroyCountFunc func,
    //                                      gpointer data,
    //                                      GDestroyNotify destroy)

    // Unimplemented: gboolean
    //(*GtkTreeViewRowSeparatorFunc) (GtkTreeModel *model,
    //                                GtkTreeIter *iter,
    //                                gpointer data);

    @tree_view_get_row_separator_func(GtkTreeView* tree_view) GtkTreeViewRowSeparatorFunc? {
        @return gtk_tree_view_get_row_separator_func(tree_view)
    }

    @tree_view_set_row_separator_func(GtkTreeView* tree_view, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy) void {
        @gtk_tree_view_set_row_separator_func(tree_view,func,data, destroy)
    }

    @tree_view_get_rubber_banding(GtkTreeView* tree_view) gboolean? {
        @return gtk_tree_view_get_rubber_banding(tree_view)
    }

    @tree_view_set_rubber_banding(GtkTreeView* tree_view, gboolean enable) void {
        @gtk_tree_view_set_rubber_banding(tree_view, enable)
    }

    @tree_view_is_rubber_banding_active(GtkTreeView* tree_view) gboolean? {
        @return gtk_tree_view_is_rubber_banding_active(tree_view)
    }

    @tree_view_get_enable_tree_lines(GtkTreeView* tree_view) gboolean? {
        @return gtk_tree_view_get_enable_tree_lines(tree_view)
    }

    @tree_view_set_enable_tree_lines(GtkTreeView* tree_view, gboolean enabled) void {
        @gtk_tree_view_set_enable_tree_lines(tree_view, enabled)
    }

    @tree_view_get_grid_lines(GtkTreeView* tree_view) GtkTreeViewGridLines? {
        @return gtk_tree_view_get_grid_lines(tree_view)
    }

    @tree_view_set_grid_lines(GtkTreeView* tree_view, GtkTreeViewGridLines grid_lines) void {
        @gtk_tree_view_set_grid_lines(tree_view, grid_lines)
    }

    @tree_view_set_tooltip_row(GtkTreeView* tree_view, GtkTooltip* tooltip, GtkTreePath* path) void {
        @gtk_tree_view_set_tooltip_row(tree_view,tooltip, path)
    }

    @tree_view_set_tooltip_cell(GtkTreeView* tree_view, GtkTooltip* tooltip, GtkTreePath* path, GtkTreeViewColumn* column, GtkCellRenderer* cell) void {
        @gtk_tree_view_set_tooltip_cell(tree_view,tooltip,path,column, cell)
    }

    @tree_view_get_tooltip_context(GtkTreeView* tree_view, gint* x, gint* y, gboolean keyboard_tip, GtkTreeModel** model, GtkTreePath** path, GtkTreeIter* iter) gboolean? {
        @return gtk_tree_view_get_tooltip_context(tree_view,x,y,keyboard_tip,model,path, iter)
    }

    @tree_view_get_tooltip_column(GtkTreeView* tree_view) gint? {
        @return gtk_tree_view_get_tooltip_column(tree_view)
    }

    @tree_view_set_tooltip_column(GtkTreeView* tree_view, gint column) void {
        @gtk_tree_view_set_tooltip_column(tree_view, column)
    }

    // ---
    // End of GtkTreeView

    // GtkTreeDragSource (GtkTreeView drag-and-drop)

    @tree_drag_source_drag_data_delete(GtkTreeDragSource* drag_source, GtkTreePath* path) gboolean? {
        @return gtk_tree_drag_source_drag_data_delete(drag_source, path)
    }

    @tree_drag_source_drag_data_get(GtkTreeDragSource* drag_source, GtkTreePath* path, GtkSelectionData* selection_data) gboolean? {
        @return gtk_tree_drag_source_drag_data_get(drag_source,path, selection_data)
    }

    @tree_drag_source_row_draggable(GtkTreeDragSource* drag_source, GtkTreePath* path) gboolean? {
        @return gtk_tree_drag_source_row_draggable(drag_source, path)
    }

    @tree_drag_dest_drag_data_received(GtkTreeDragDest* drag_dest, GtkTreePath* dest, GtkSelectionData* selection_data) gboolean? {
        @return gtk_tree_drag_dest_drag_data_received(drag_dest,dest, selection_data)
    }

    @tree_drag_dest_row_drop_possible(GtkTreeDragDest* drag_dest, GtkTreePath* dest_path, GtkSelectionData* selection_data) gboolean? {
        @return gtk_tree_drag_dest_row_drop_possible(drag_dest,dest_path, selection_data)
    }

    @tree_set_row_drag_data(GtkSelectionData* selection_data, GtkTreeModel* tree_model, GtkTreePath* path) gboolean? {
        @return gtk_tree_set_row_drag_data(selection_data,tree_model, path)
    }

    @tree_get_row_drag_data(GtkSelectionData* selection_data, GtkTreeModel** tree_model, GtkTreePath** path) gboolean? {
        @return gtk_tree_get_row_drag_data(selection_data,tree_model, path)
    }

    // ---
    // End of GtkTreeDragSource (GtkTreeView drag-and-drop)

    // GtkCellView

    @cell_view_new GtkWidget*? {
        @return gtk_cell_view_new()
    }

    @cell_view_new_with_context(GtkCellArea* area, GtkCellAreaContext* context) GtkWidget*? {
        @return gtk_cell_view_new_with_context(area, context)
    }

    @cell_view_new_with_text(const gchar* text) GtkWidget*? {
        @return gtk_cell_view_new_with_text(text)
    }

    @cell_view_new_with_markup(const gchar* markup) GtkWidget*? {
        @return gtk_cell_view_new_with_markup(markup)
    }

    @cell_view_new_with_pixbuf(GdkPixbuf* pixbuf) GtkWidget*? {
        @return gtk_cell_view_new_with_pixbuf(pixbuf)
    }

    @cell_view_set_model(GtkCellView* cell_view, GtkTreeModel* model) void {
        @gtk_cell_view_set_model(cell_view, model)
    }

    @cell_view_get_model(GtkCellView* cell_view) GtkTreeModel*? {
        @return gtk_cell_view_get_model(cell_view)
    }

    @cell_view_set_displayed_row(GtkCellView* cell_view, GtkTreePath* path) void {
        @gtk_cell_view_set_displayed_row(cell_view, path)
    }

    @cell_view_get_displayed_row(GtkCellView* cell_view) GtkTreePath*? {
        @return gtk_cell_view_get_displayed_row(cell_view)
    }

    // Deprecated: @cell_view_get_size_of_row(GtkCellView* cell_view,
    //                               GtkTreePath* path,
    //                               GtkRequisition* requisition)

    // Deprecated: @cell_view_set_background_color(GtkCellView* cell_view,
    //                                    const GdkColor* color);

    @cell_view_set_background_rgba(GtkCellView* cell_view, const GdkRGBA* rgba) void {
        @gtk_cell_view_set_background_rgba(cell_view, rgba)
    }

    @cell_view_set_draw_sensitive(GtkCellView* cell_view, gboolean draw_sensitive) void {
        @gtk_cell_view_set_draw_sensitive(cell_view, draw_sensitive)
    }

    @cell_view_get_draw_sensitive(GtkCellView* cell_view) gboolean? {
        @return gtk_cell_view_get_draw_sensitive(cell_view)
    }

    @cell_view_set_fit_model(GtkCellView* cell_view, gboolean fit_model) void {
        @gtk_cell_view_set_fit_model(cell_view, fit_model)
    }

    @cell_view_get_fit_model(GtkCellView* cell_view) gboolean? {
        @return gtk_cell_view_get_fit_model(cell_view)
    }

    // ---
    // End of GtkCellView

    // GtkIconView

    // Unimplemented: void
    //(*GtkIconViewForeachFunc) (GtkIconView *icon_view,
    //                           GtkTreePath *path,
    //                           gpointer data);

    @icon_view_new GtkWidget*? {
        @return gtk_icon_view_new()
    }

    @icon_view_new_with_area(GtkCellArea* area) GtkWidget*? {
        @return gtk_icon_view_new_with_area(area)
    }

    @icon_view_new_with_model(GtkTreeModel* model) GtkWidget*? {
        @return gtk_icon_view_new_with_model(model)
    }

    @icon_view_set_model(GtkIconView* icon_view, GtkTreeModel* model) void {
        @gtk_icon_view_set_model(icon_view, model)
    }

    @icon_view_get_model(GtkIconView* icon_view) GtkTreeModel*? {
        @return gtk_icon_view_get_model(icon_view)
    }

    @icon_view_set_text_column(GtkIconView* icon_view, gint column) void {
        @gtk_icon_view_set_text_column(icon_view, column)
    }

    @icon_view_get_text_column(GtkIconView* icon_view) gint? {
        @return gtk_icon_view_get_text_column(icon_view)
    }

    @icon_view_set_markup_column(GtkIconView* icon_view, gint column) void {
        @gtk_icon_view_set_markup_column(icon_view, column)
    }

    @icon_view_get_markup_column(GtkIconView* icon_view) gint? {
        @return gtk_icon_view_get_markup_column(icon_view)
    }

    @icon_view_set_pixbuf_column(GtkIconView* icon_view, gint column) void {
        @gtk_icon_view_set_pixbuf_column(icon_view, column)
    }

    @icon_view_get_pixbuf_column(GtkIconView* icon_view) gint? {
        @return gtk_icon_view_get_pixbuf_column(icon_view)
    }

    @icon_view_get_path_at_pos(GtkIconView* icon_view, gint x, gint y) GtkTreePath*? {
        @return gtk_icon_view_get_path_at_pos(icon_view,x, y)
    }

    @icon_view_get_item_at_pos(GtkIconView* icon_view, gint x, gint y, GtkTreePath** path, GtkCellRenderer** cell) gboolean? {
        @return gtk_icon_view_get_item_at_pos(icon_view,x,y,path, cell)
    }

    @icon_view_convert_widget_to_bin_window_coords(GtkIconView* icon_view, gint wx, gint wy, gint* bx, gint* by) void {
        @gtk_icon_view_convert_widget_to_bin_window_coords(icon_view,wx,wy,bx, by)
    }

    @icon_view_set_cursor(GtkIconView* icon_view, GtkTreePath* path, GtkCellRenderer* cell, gboolean start_editing) void {
        @gtk_icon_view_set_cursor(icon_view,path,cell, start_editing)
    }

    @icon_view_get_cursor(GtkIconView* icon_view, GtkTreePath** path, GtkCellRenderer** cell) gboolean? {
        @return gtk_icon_view_get_cursor(icon_view,path, cell)
    }

    @icon_view_selected_foreach(GtkIconView* icon_view, GtkIconViewForeachFunc func, gpointer data) void {
        @gtk_icon_view_selected_foreach(icon_view,func, data)
    }

    @icon_view_set_selection_mode(GtkIconView* icon_view, GtkSelectionMode mode) void {
        @gtk_icon_view_set_selection_mode(icon_view, mode)
    }

    @icon_view_get_selection_mode(GtkIconView* icon_view) GtkSelectionMode? {
        @return gtk_icon_view_get_selection_mode(icon_view)
    }

    @icon_view_set_item_orientation(GtkIconView* icon_view, GtkOrientation orientation) void {
        @gtk_icon_view_set_item_orientation(icon_view, orientation)
    }

    @icon_view_get_item_orientation(GtkIconView* icon_view) GtkOrientation? {
        @return gtk_icon_view_get_item_orientation(icon_view)
    }

    @icon_view_set_columns(GtkIconView* icon_view, gint columns) void {
        @gtk_icon_view_set_columns(icon_view, columns)
    }

    @icon_view_get_columns(GtkIconView* icon_view) gint? {
        @return gtk_icon_view_get_columns(icon_view)
    }

    @icon_view_set_item_width(GtkIconView* icon_view, gint item_width) void {
        @gtk_icon_view_set_item_width(icon_view, item_width)
    }

    @icon_view_get_item_width(GtkIconView* icon_view) gint? {
        @return gtk_icon_view_get_item_width(icon_view)
    }

    @icon_view_set_spacing(GtkIconView* icon_view, gint spacing) void {
        @gtk_icon_view_set_spacing(icon_view, spacing)
    }

    @icon_view_get_spacing(GtkIconView* icon_view) gint? {
        @return gtk_icon_view_get_spacing(icon_view)
    }

    @icon_view_set_row_spacing(GtkIconView* icon_view, gint row_spacing) void {
        @gtk_icon_view_set_row_spacing(icon_view, row_spacing)
    }

    @icon_view_get_row_spacing(GtkIconView* icon_view) gint? {
        @return gtk_icon_view_get_row_spacing(icon_view)
    }

    @icon_view_set_column_spacing(GtkIconView* icon_view, gint column_spacing) void {
        @gtk_icon_view_set_column_spacing(icon_view, column_spacing)
    }

    @icon_view_get_column_spacing(GtkIconView* icon_view) gint? {
        @return gtk_icon_view_get_column_spacing(icon_view)
    }

    @icon_view_set_margin(GtkIconView* icon_view, gint margin) void {
        @gtk_icon_view_set_margin(icon_view, margin)
    }

    @icon_view_get_margin(GtkIconView* icon_view) gint? {
        @return gtk_icon_view_get_margin(icon_view)
    }

    @icon_view_set_item_padding(GtkIconView* icon_view, gint item_padding) void {
        @gtk_icon_view_set_item_padding(icon_view, item_padding)
    }

    @icon_view_get_item_padding(GtkIconView* icon_view) gint? {
        @return gtk_icon_view_get_item_padding(icon_view)
    }

    @icon_view_set_activate_on_single_click(GtkIconView* icon_view, gboolean single) void {
        @gtk_icon_view_set_activate_on_single_click(icon_view, single)
    }

    @icon_view_get_activate_on_single_click(GtkIconView* icon_view) gboolean? {
        @return gtk_icon_view_get_activate_on_single_click(icon_view)
    }

    @icon_view_get_cell_rect(GtkIconView* icon_view, GtkTreePath* path, GtkCellRenderer* cell, GdkRectangle* rect) gboolean? {
        @return gtk_icon_view_get_cell_rect(icon_view,path,cell, rect)
    }

    @icon_view_select_path(GtkIconView* icon_view, GtkTreePath* path) void {
        @gtk_icon_view_select_path(icon_view, path)
    }

    @icon_view_unselect_path(GtkIconView* icon_view, GtkTreePath* path) void {
        @gtk_icon_view_unselect_path(icon_view, path)
    }

    @icon_view_path_is_selected(GtkIconView* icon_view, GtkTreePath* path) gboolean? {
        @return gtk_icon_view_path_is_selected(icon_view, path)
    }

    @icon_view_get_selected_items(GtkIconView* icon_view) GList*? {
        @return gtk_icon_view_get_selected_items(icon_view)
    }

    @icon_view_select_all(GtkIconView* icon_view) void {
        @gtk_icon_view_select_all(icon_view)
    }

    @icon_view_unselect_all(GtkIconView* icon_view) void {
        @gtk_icon_view_unselect_all(icon_view)
    }

    @icon_view_item_activated(GtkIconView* icon_view, GtkTreePath* path) void {
        @gtk_icon_view_item_activated(icon_view, path)
    }

    @icon_view_scroll_to_path(GtkIconView* icon_view, GtkTreePath* path, gboolean use_align, gfloat row_align, gfloat col_align) void {
        @gtk_icon_view_scroll_to_path(icon_view,path,use_align,row_align, col_align)
    }

    @icon_view_get_visible_range(GtkIconView* icon_view, GtkTreePath** start_path, GtkTreePath** end_path) gboolean? {
        @return gtk_icon_view_get_visible_range(icon_view,start_path, end_path)
    }

    @icon_view_set_tooltip_item(GtkIconView* icon_view, GtkTooltip* tooltip, GtkTreePath* path) void {
        @gtk_icon_view_set_tooltip_item(icon_view,tooltip, path)
    }

    @icon_view_set_tooltip_cell(GtkIconView* icon_view, GtkTooltip* tooltip, GtkTreePath* path, GtkCellRenderer* cell) void {
        @gtk_icon_view_set_tooltip_cell(icon_view,tooltip,path, cell)
    }

    @icon_view_get_tooltip_context(GtkIconView* icon_view, gint* x, gint* y, gboolean keyboard_tip, GtkTreeModel** model, GtkTreePath** path, GtkTreeIter* iter) gboolean? {
        @return gtk_icon_view_get_tooltip_context(icon_view,x,y,keyboard_tip,model,path, iter)
    }

    @icon_view_set_tooltip_column(GtkIconView* icon_view, gint column) void {
        @gtk_icon_view_set_tooltip_column(icon_view, column)
    }

    @icon_view_get_tooltip_column(GtkIconView* icon_view) gint? {
        @return gtk_icon_view_get_tooltip_column(icon_view)
    }

    @icon_view_get_item_row(GtkIconView* icon_view, GtkTreePath* path) gint? {
        @return gtk_icon_view_get_item_row(icon_view, path)
    }

    @icon_view_get_item_column(GtkIconView* icon_view, GtkTreePath* path) gint? {
        @return gtk_icon_view_get_item_column(icon_view, path)
    }

    @icon_view_enable_model_drag_source(GtkIconView* icon_view, GdkModifierType start_button_mask, const GtkTargetEntry* targets, gint n_targets, GdkDragAction actions) void {
        @gtk_icon_view_enable_model_drag_source(icon_view,start_button_mask,targets,n_targets, actions)
    }

    @icon_view_enable_model_drag_dest(GtkIconView* icon_view, const GtkTargetEntry* targets, gint n_targets, GdkDragAction actions) void {
        @gtk_icon_view_enable_model_drag_dest(icon_view,targets,n_targets, actions)
    }

    @icon_view_unset_model_drag_source(GtkIconView* icon_view) void {
        @gtk_icon_view_unset_model_drag_source(icon_view)
    }

    @icon_view_unset_model_drag_dest(GtkIconView* icon_view) void {
        @gtk_icon_view_unset_model_drag_dest(icon_view)
    }

    @icon_view_set_reorderable(GtkIconView* icon_view, gboolean reorderable) void {
        @gtk_icon_view_set_reorderable(icon_view, reorderable)
    }

    @icon_view_get_reorderable(GtkIconView* icon_view) gboolean? {
        @return gtk_icon_view_get_reorderable(icon_view)
    }

    @icon_view_set_drag_dest_item(GtkIconView* icon_view, GtkTreePath* path, GtkIconViewDropPosition pos) void {
        @gtk_icon_view_set_drag_dest_item(icon_view,path, pos)
    }

    @icon_view_get_drag_dest_item(GtkIconView* icon_view, GtkTreePath** path, GtkIconViewDropPosition* pos) void {
        @gtk_icon_view_get_drag_dest_item(icon_view,path, pos)
    }

    @icon_view_get_dest_item_at_pos(GtkIconView* icon_view, gint drag_x, gint drag_y, GtkTreePath** path, GtkIconViewDropPosition* pos) gboolean? {
        @return gtk_icon_view_get_dest_item_at_pos(icon_view,drag_x,drag_y,path, pos)
    }

    @icon_view_create_drag_icon(GtkIconView* icon_view, GtkTreePath* path) cairo_surface_t*? {
        @return gtk_icon_view_create_drag_icon(icon_view, path)
    }

    // ---
    // End of GtkIconView

    // GtkTreeSortable

    // Unimplemented: gint
    //(*GtkTreeIterCompareFunc) (GtkTreeModel *model,
    //                           GtkTreeIter *a,
    //                           GtkTreeIter *b,
    //                           gpointer user_data);

    @tree_sortable_sort_column_changed(GtkTreeSortable* sortable) void {
        @gtk_tree_sortable_sort_column_changed(sortable)
    }

    @tree_sortable_get_sort_column_id(GtkTreeSortable* sortable, gint* sort_column_id, GtkSortType* order) gboolean? {
        @return gtk_tree_sortable_get_sort_column_id(sortable,sort_column_id, order)
    }

    @tree_sortable_set_sort_column_id(GtkTreeSortable* sortable, gint sort_column_id, GtkSortType order) void {
        @gtk_tree_sortable_set_sort_column_id(sortable,sort_column_id, order)
    }

    @tree_sortable_set_sort_func(GtkTreeSortable* sortable, gint sort_column_id, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_tree_sortable_set_sort_func(sortable,sort_column_id,sort_func,user_data, destroy)
    }

    @tree_sortable_set_default_sort_func(GtkTreeSortable* sortable, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_tree_sortable_set_default_sort_func(sortable,sort_func,user_data, destroy)
    }

    @tree_sortable_has_default_sort_func(GtkTreeSortable* sortable) gboolean? {
         @return gtk_tree_sortable_has_default_sort_func(sortable)
    }

    // ---
    // End of GtkTreeSortable

    // GtkTreeModelSort

    @tree_model_sort_new_with_model(GtkTreeModel* child_model) GtkTreeModel*? {
        @return gtk_tree_model_sort_new_with_model(child_model)
    }

    @tree_model_sort_get_model(GtkTreeModelSort* tree_model) GtkTreeModel*? {
        @return gtk_tree_model_sort_get_model(tree_model)
    }

    @tree_model_sort_convert_child_path_to_path(GtkTreeModelSort* tree_model_sort, GtkTreePath* child_path) GtkTreePath*? {
        @return gtk_tree_model_sort_convert_child_path_to_path(tree_model_sort, child_path)
    }

    @tree_model_sort_convert_child_iter_to_iter(GtkTreeModelSort* tree_model_sort, GtkTreeIter* sort_iter, GtkTreeIter* child_iter) gboolean? {
        @return gtk_tree_model_sort_convert_child_iter_to_iter(tree_model_sort,sort_iter, child_iter)
    }

    @tree_model_sort_convert_path_to_child_path(GtkTreeModelSort* tree_model_sort, GtkTreePath* sorted_path) GtkTreePath*? {
        @return gtk_tree_model_sort_convert_path_to_child_path(tree_model_sort, sorted_path)
    }

    @tree_model_sort_convert_iter_to_child_iter(GtkTreeModelSort* tree_model_sort, GtkTreeIter* child_iter, GtkTreeIter* sorted_iter) void {
        @gtk_tree_model_sort_convert_iter_to_child_iter(tree_model_sort,child_iter, sorted_iter)
    }

    @tree_model_sort_reset_default_sort_func(GtkTreeModelSort* tree_model_sort) void {
        @gtk_tree_model_sort_reset_default_sort_func(tree_model_sort)
    }

    @tree_model_sort_clear_cache(GtkTreeModelSort* tree_model_sort) void {
        @gtk_tree_model_sort_clear_cache(tree_model_sort)
    }

    @tree_model_sort_iter_is_valid(GtkTreeModelSort* tree_model_sort, GtkTreeIter* iter) gboolean? {
        @return gtk_tree_model_sort_iter_is_valid(tree_model_sort, iter)
    }

    // ---
    // End of GtkTreeModelSort

    // GtkTreeModelFilter

    // Unimplemented: gboolean
    //(*GtkTreeModelFilterVisibleFunc) (GtkTreeModel *model,
    //                                  GtkTreeIter *iter,
    //                                  gpointer data);

    // Unimplemented: void
    //(*GtkTreeModelFilterModifyFunc) (GtkTreeModel *model,
    //                                 GtkTreeIter *iter,
    //                                 GValue *value,
    //                                 gint column,
    //                                 gpointer data);

    @tree_model_filter_new(GtkTreeModel* child_model, GtkTreePath* root) GtkTreeModel*? {
        @return gtk_tree_model_filter_new(child_model, root)
    }

    @tree_model_filter_set_visible_func(GtkTreeModelFilter* filter, GtkTreeModelFilterVisibleFunc func, gpointer data, GDestroyNotify destroy) void {
        @gtk_tree_model_filter_set_visible_func(filter,func,data, destroy)
    }

    @tree_model_filter_set_modify_func(GtkTreeModelFilter* filter, gint n_columns, GType* types, GtkTreeModelFilterModifyFunc func, gpointer data, GDestroyNotify destroy) void {
        @gtk_tree_model_filter_set_modify_func(filter,n_columns,types,func,data, destroy)
    }

    @tree_model_filter_set_visible_column(GtkTreeModelFilter* filter, gint column) void {
        @gtk_tree_model_filter_set_visible_column(filter, column)
    }

    @tree_model_filter_get_model(GtkTreeModelFilter* filter) GtkTreeModel*? {
        @return gtk_tree_model_filter_get_model(filter)
    }

    @tree_model_filter_convert_child_iter_to_iter(GtkTreeModelFilter* filter, GtkTreeIter* filter_iter, GtkTreeIter* child_iter) gboolean? {
        @return gtk_tree_model_filter_convert_child_iter_to_iter(filter,filter_iter, child_iter)
    }

    @tree_model_filter_convert_iter_to_child_iter(GtkTreeModelFilter* filter, GtkTreeIter* child_iter, GtkTreeIter* filter_iter) void {
        @gtk_tree_model_filter_convert_iter_to_child_iter(filter,child_iter, filter_iter)
    }

    @tree_model_filter_convert_child_path_to_path(GtkTreeModelFilter* filter, GtkTreePath* child_path) GtkTreePath*? {
        @return gtk_tree_model_filter_convert_child_path_to_path(filter, child_path)
    }

    @tree_model_filter_convert_path_to_child_path(GtkTreeModelFilter* filter, GtkTreePath* filter_path) GtkTreePath*? {
        @return gtk_tree_model_filter_convert_path_to_child_path(filter, filter_path)
    }

    @tree_model_filter_refilter(GtkTreeModelFilter* filter) void {
        @gtk_tree_model_filter_refilter(filter)
    }

    @tree_model_filter_clear_cache(GtkTreeModelFilter* filter) void {
        @gtk_tree_model_filter_clear_cache(filter)
    }

    // ---
    // End of GtkTreeModelFilter

    // GtkCellLayout

    // Unimplemented: void
    //(*GtkCellLayoutDataFunc) (GtkCellLayout *cell_layout,
    //                          GtkCellRenderer *cell,
    //                          GtkTreeModel *tree_model,
    //                          GtkTreeIter *iter,
    //                          gpointer data);

    @cell_layout_pack_start(GtkCellLayout* cell_layout, GtkCellRenderer* cell, gboolean expand) void {
        @gtk_cell_layout_pack_start(cell_layout,cell, expand)
    }

    @cell_layout_pack_end(GtkCellLayout* cell_layout, GtkCellRenderer* cell, gboolean expand) void {
        @gtk_cell_layout_pack_end(cell_layout,cell, expand)
    }

    @cell_layout_get_area(GtkCellLayout* cell_layout) GtkCellArea*? {
        @return gtk_cell_layout_get_area(cell_layout)
    }

    @cell_layout_get_cells(GtkCellLayout* cell_layout) GList*? {
        @return gtk_cell_layout_get_cells(cell_layout)
    }

    @cell_layout_reorder(GtkCellLayout* cell_layout, GtkCellRenderer* cell, gint position) void {
        @gtk_cell_layout_reorder(cell_layout,cell, position)
    }

    @cell_layout_clear(GtkCellLayout* cell_layout) void {
        @gtk_cell_layout_clear(cell_layout)
    }

    #template <typename... Attrs>
    @cell_layout_set_attributes(GtkCellLayout* cell_layout, GtkCellRenderer* cell, Attrs... list) void {
        @(gtk_cell_layout_set_attributes(cell_layout,cell,list), ...)
    }

    @cell_layout_add_attribute(GtkCellLayout* cell_layout, GtkCellRenderer* cell, const gchar* attribute, gint column) void {
        @gtk_cell_layout_add_attribute(cell_layout,cell,attribute, column)
    }

    @cell_layout_set_cell_data_func(GtkCellLayout* cell_layout, GtkCellRenderer* cell, GtkCellLayoutDataFunc func, gpointer func_data, GDestroyNotify destroy) void {
        @gtk_cell_layout_set_cell_data_func(cell_layout,cell,func,func_data, destroy)
    }

    @cell_layout_clear_attributes(GtkCellLayout* cell_layout, GtkCellRenderer* cell) void {
        @gtk_cell_layout_clear_attributes(cell_layout, cell)
    }

    // ---
    // End of GtkCellLayout

    // GtkCellArea

    // Unimplemented: gboolean
    //(*GtkCellCallback) (GtkCellRenderer *renderer,
    //                    gpointer data);

    // Unimplemented: gboolean
    //(*GtkCellAllocCallback) (GtkCellRenderer *renderer,
    //                         const GdkRectangle *cell_area,
    //                         const GdkRectangle *cell_background,
    //                         gpointer data);

    @cell_area_add(GtkCellArea* area, GtkCellRenderer* renderer) void {
        @gtk_cell_area_add(area, renderer)
    }

    @cell_area_remove(GtkCellArea* area, GtkCellRenderer* renderer) void {
        @gtk_cell_area_remove(area, renderer)
    }

    @cell_area_has_renderer(GtkCellArea* area, GtkCellRenderer* renderer) gboolean? {
        @return gtk_cell_area_has_renderer(area, renderer)
    }

    @cell_area_foreach(GtkCellArea* area, GtkCellCallback callback, gpointer callback_data) void {
        @gtk_cell_area_foreach(area,callback, callback_data)
    }

    @cell_area_foreach_alloc(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, const GdkRectangle* cell_area, const GdkRectangle* background_area, GtkCellAllocCallback callback, gpointer callback_data) void {
        @gtk_cell_area_foreach_alloc(area,context,widget,cell_area,background_area,callback, callback_data)
    }

    @cell_area_event(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, GdkEvent* event, const GdkRectangle* cell_area, GtkCellRendererState flags) gint? {
        @return gtk_cell_area_event(area,context,widget,event,cell_area, flags)
    }

    @cell_area_render(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, cairo_t* cr, const GdkRectangle* background_area, const GdkRectangle* cell_area, GtkCellRendererState flags, gboolean paint_focus) void {
        @gtk_cell_area_render(area,context,widget,cr,background_area,cell_area,flags, paint_focus)
    }

    @cell_area_get_cell_allocation(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, GtkCellRenderer* renderer, const GdkRectangle* cell_area, GdkRectangle* allocation) void {
        @gtk_cell_area_get_cell_allocation(area,context,widget,renderer,cell_area, allocation)
    }

    @cell_area_get_cell_at_position(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, const GdkRectangle* cell_area, gint x, gint y, GdkRectangle* alloc_area) GtkCellRenderer*? {
        @return gtk_cell_area_get_cell_at_position(area,context,widget,cell_area,x,y, alloc_area)
    }

    @cell_area_create_context(GtkCellArea* area) GtkCellAreaContext*? {
        @return gtk_cell_area_create_context(area)
    }

    @cell_area_copy_context(GtkCellArea* area, GtkCellAreaContext* context) GtkCellAreaContext*? {
        @return gtk_cell_area_copy_context(area, context)
    }

    @cell_area_get_request_mode(GtkCellArea* area) GtkSizeRequestMode? {
        @return gtk_cell_area_get_request_mode(area)
    }

    @cell_area_get_preferred_width(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, gint* minimum_width, gint* natural_width) void {
        @gtk_cell_area_get_preferred_width(area,context,widget,minimum_width, natural_width)
    }

    @cell_area_get_preferred_height_for_width(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, gint width, gint* minimum_height, gint* natural_height) void {
        @gtk_cell_area_get_preferred_height_for_width(area,context,widget,width,minimum_height, natural_height)
    }

    @cell_area_get_preferred_height(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, gint* minimum_height, gint* natural_height) void {
        @gtk_cell_area_get_preferred_height(area,context,widget,minimum_height, natural_height)
    }

    @cell_area_get_preferred_width_for_height(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, gint height, gint* minimum_width, gint* natural_width) void {
        @gtk_cell_area_get_preferred_width_for_height(area,context,widget,height,minimum_width, natural_width)
    }

    #const gchar* cell_area_get_current_path_string(GtkCellArea* area) {
        @return gtk_cell_area_get_current_path_string(area)
    }

    @cell_area_apply_attributes(GtkCellArea* area, GtkTreeModel* tree_model, GtkTreeIter* iter, gboolean is_expander, gboolean is_expanded) void {
        @gtk_cell_area_apply_attributes(area,tree_model,iter,is_expander, is_expanded)
    }

    @cell_area_attribute_connect(GtkCellArea* area, GtkCellRenderer* renderer, const gchar* attribute, gint column) void {
        @gtk_cell_area_attribute_connect(area,renderer,attribute, column)
    }

    @cell_area_attribute_disconnect(GtkCellArea* area, GtkCellRenderer* renderer, const gchar* attribute) void {
        @gtk_cell_area_attribute_disconnect(area,renderer, attribute)
    }

    @cell_area_attribute_get_column(GtkCellArea* area, GtkCellRenderer* renderer, const gchar* attribute) gint? {
        @return gtk_cell_area_attribute_get_column(area,renderer, attribute)
    }

    @cell_area_class_install_cell_property(GtkCellAreaClass* aclass, guint property_id, GParamSpec* pspec) void {
        @gtk_cell_area_class_install_cell_property(aclass,property_id, pspec)
    }

    @cell_area_class_find_cell_property(GtkCellAreaClass* aclass, const gchar* property_name) GParamSpec*? {
        @return gtk_cell_area_class_find_cell_property(aclass, property_name)
    }

    @cell_area_class_list_cell_properties(GtkCellAreaClass* aclass, guint* n_properties) GParamSpec**? {
        @return gtk_cell_area_class_list_cell_properties(aclass, n_properties)
    }

    #template <typename... Property>
    @cell_area_add_with_properties(GtkCellArea* area, GtkCellRenderer* renderer, const gchar* first_prop_name, Property... list) void {
        @(gtk_cell_area_add_with_properties(area,renderer,first_prop_name,list), ...)
    }

    #template <typename... Property>
    @cell_area_cell_set(GtkCellArea* area, GtkCellRenderer* renderer, const gchar* first_prop_name, Property... list) void {
        @(gtk_cell_area_cell_set(area,renderer,first_prop_name,list), ...)
    }

    #template <typename... Property>
    @cell_area_cell_get(GtkCellArea* area, GtkCellRenderer* renderer, const gchar* first_prop_name, Property... list) void {
        @(gtk_cell_area_cell_get(area,renderer,first_prop_name,list), ...)
    }

    @cell_area_cell_set_valist(GtkCellArea* area, GtkCellRenderer* renderer, const gchar* first_property_name, va_list var_args) void {
        @gtk_cell_area_cell_set_valist(area,renderer,first_property_name, var_args)
    }

    @cell_area_cell_get_valist(GtkCellArea* area, GtkCellRenderer* renderer, const gchar* first_property_name, va_list var_args) void {
        @gtk_cell_area_cell_get_valist(area,renderer,first_property_name, var_args)
    }

    @cell_area_cell_set_property(GtkCellArea* area, GtkCellRenderer* renderer, const gchar* property_name, const GValue* value) void {
        @gtk_cell_area_cell_set_property(area,renderer,property_name, value)
    }

    @cell_area_cell_get_property(GtkCellArea* area, GtkCellRenderer* renderer, const gchar* property_name, GValue* value) void {
        @gtk_cell_area_cell_get_property(area,renderer,property_name, value)
    }

    @cell_area_is_activatable(GtkCellArea* area) gboolean? {
        @return gtk_cell_area_is_activatable(area)
    }

    @cell_area_activate(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, const GdkRectangle* cell_area, GtkCellRendererState flags, gboolean edit_only) gboolean? {
        @return gtk_cell_area_activate(area,context,widget,cell_area,flags, edit_only)
    }

    @cell_area_focus(GtkCellArea* area, GtkDirectionType direction) gboolean? {
        @return gtk_cell_area_focus(area, direction)
    }

    @cell_area_set_focus_cell(GtkCellArea* area, GtkCellRenderer* renderer) void {
        @gtk_cell_area_set_focus_cell(area, renderer)
    }

    @cell_area_get_focus_cell(GtkCellArea* area) GtkCellRenderer*? {
        @return gtk_cell_area_get_focus_cell(area)
    }

    @cell_area_add_focus_sibling(GtkCellArea* area, GtkCellRenderer* renderer, GtkCellRenderer* sibling) void {
        @gtk_cell_area_add_focus_sibling(area,renderer, sibling)
    }

    @cell_area_remove_focus_sibling(GtkCellArea* area, GtkCellRenderer* renderer, GtkCellRenderer* sibling) void {
        @gtk_cell_area_remove_focus_sibling(area,renderer, sibling)
    }

    @cell_area_is_focus_sibling(GtkCellArea* area, GtkCellRenderer* renderer, GtkCellRenderer* sibling) gboolean? {
        @return gtk_cell_area_is_focus_sibling(area,renderer, sibling)
    }

    #const GList* cell_area_get_focus_siblings(GtkCellArea* area, GtkCellRenderer* renderer) {
        @return gtk_cell_area_get_focus_siblings(area, renderer)
    }

    @cell_area_get_focus_from_sibling(GtkCellArea* area, GtkCellRenderer* renderer) GtkCellRenderer*? {
        @return gtk_cell_area_get_focus_from_sibling(area, renderer)
    }

    @cell_area_get_edited_cell(GtkCellArea* area) GtkCellRenderer*? {
        @return gtk_cell_area_get_edited_cell(area)
    }

    @cell_area_get_edit_widget(GtkCellArea* area) GtkCellEditable*? {
        @return gtk_cell_area_get_edit_widget(area)
    }

    @cell_area_activate_cell(GtkCellArea* area, GtkWidget* widget, GtkCellRenderer* renderer, GdkEvent* event, const GdkRectangle* cell_area, GtkCellRendererState flags) gboolean? {
        @return gtk_cell_area_activate_cell(area,widget,renderer,event,cell_area, flags)
    }

    @cell_area_stop_editing(GtkCellArea* area, gboolean canceled) void {
        @gtk_cell_area_stop_editing(area, canceled)
    }

    @cell_area_inner_cell_area(GtkCellArea* area, GtkWidget* widget, const GdkRectangle* cell_area, GdkRectangle* inner_area) void {
        @gtk_cell_area_inner_cell_area(area,widget,cell_area, inner_area)
    }

    @cell_area_request_renderer(GtkCellArea* area, GtkCellRenderer* renderer, GtkOrientation orientation, GtkWidget* widget, gint for_size, gint* minimum_size, gint* natural_size) void {
        @gtk_cell_area_request_renderer(area,renderer,orientation,widget,for_size,minimum_size, natural_size)
    }

    // ---
    // End of GtkCellArea

    // GtkCellAreaBox

    @cell_area_box_new GtkCellArea*? {
        @return gtk_cell_area_box_new()
    }

    @cell_area_box_pack_start(GtkCellAreaBox* box, GtkCellRenderer* renderer, gboolean expand, gboolean align, gboolean fixed) void {
        @gtk_cell_area_box_pack_start(box,renderer,expand,align, fixed)
    }

    @cell_area_box_pack_end(GtkCellAreaBox* box, GtkCellRenderer* renderer, gboolean expand, gboolean align, gboolean fixed) void {
        @gtk_cell_area_box_pack_end(box,renderer,expand,align, fixed)
    }

    @cell_area_box_get_spacing(GtkCellAreaBox* box) gint? {
        @return gtk_cell_area_box_get_spacing(box)
    }

    @cell_area_box_set_spacing(GtkCellAreaBox* box, gint spacing) void {
        @gtk_cell_area_box_set_spacing(box, spacing)
    }

    // ---
    // End of GtkCellAreaBox

    // GtkCellAreaContext

    @cell_area_context_get_area(GtkCellAreaContext* context) GtkCellArea*? {
        @return gtk_cell_area_context_get_area(context)
    }

    @cell_area_context_allocate(GtkCellAreaContext* context, gint width, gint height) void {
        @gtk_cell_area_context_allocate(context,width, height)
    }

    @cell_area_context_reset(GtkCellAreaContext* context) void {
        @gtk_cell_area_context_reset(context)
    }

    @cell_area_context_get_preferred_width(GtkCellAreaContext* context, gint* minimum_width, gint* natural_width) void {
        @gtk_cell_area_context_get_preferred_width(context,minimum_width, natural_width)
    }

    @cell_area_context_get_preferred_height(GtkCellAreaContext* context, gint* minimum_height, gint* natural_height) void {
        @gtk_cell_area_context_get_preferred_height(context,minimum_height, natural_height)
    }

    @cell_area_context_get_preferred_height_for_width(GtkCellAreaContext* context, gint width, gint* minimum_height, gint* natural_height) void {
        @gtk_cell_area_context_get_preferred_height_for_width(context,width,minimum_height, natural_height)
    }

    @cell_area_context_get_preferred_width_for_height(GtkCellAreaContext* context, gint height, gint* minimum_width, gint* natural_width) void {
        @gtk_cell_area_context_get_preferred_width_for_height(context,height,minimum_width, natural_width)
    }

    @cell_area_context_get_allocation(GtkCellAreaContext* context, gint* width, gint* height) void {
        @gtk_cell_area_context_get_allocation(context,width, height)
    }

    @cell_area_context_push_preferred_width(GtkCellAreaContext* context, gint minimum_width, gint natural_width) void {
        @gtk_cell_area_context_push_preferred_width(context,minimum_width, natural_width)
    }

    @cell_area_context_push_preferred_height(GtkCellAreaContext* context, gint minimum_height, gint natural_height) void {
        @gtk_cell_area_context_push_preferred_height(context,minimum_height, natural_height)
    }

    // ---
    // End of GtkCellAreaContext

    // GtkCellRenderer

    @cell_renderer_class_set_accessible_type(GtkCellRendererClass* renderer_class, GType type) void {
        @gtk_cell_renderer_class_set_accessible_type(renderer_class, type)
    }

    @cell_renderer_get_aligned_area(GtkCellRenderer* cell, GtkWidget* widget, GtkCellRendererState flags, const GdkRectangle* cell_area, GdkRectangle* aligned_area) void {
        @gtk_cell_renderer_get_aligned_area(cell,widget,flags,cell_area, aligned_area)
    }

    // Deprecated: @cell_renderer_get_size(GtkCellRenderer *cell,
    //                            GtkWidget* widget,
    //                            const GdkRectangle* cell_area,
    //                            gint* x_offset,
    //                            gint* y_offset,
    //                            gint* width,
    //                            gint* height)

    @cell_renderer_render(GtkCellRenderer* cell, cairo_t* cr, GtkWidget* widget, const GdkRectangle* background_area, const GdkRectangle* cell_area, GtkCellRendererState flags) void {
        @gtk_cell_renderer_render(cell,cr,widget,background_area,cell_area, flags)
    }

    @cell_renderer_activate(GtkCellRenderer* cell, GdkEvent* event, GtkWidget* widget, const gchar* path, const GdkRectangle* background_area, const GdkRectangle* cell_area, GtkCellRendererState flags) gboolean? {
        @return gtk_cell_renderer_activate(cell,event,widget,path,background_area,cell_area, flags)
    }

    @cell_renderer_start_editing(GtkCellRenderer* cell, GdkEvent* event, GtkWidget* widget, const gchar* path, const GdkRectangle* background_area, const GdkRectangle* cell_area, GtkCellRendererState flags) GtkCellEditable*? {
        @return gtk_cell_renderer_start_editing(cell,event,widget,path,background_area,cell_area, flags)
    }

    @cell_renderer_stop_editing(GtkCellRenderer* cell, gboolean canceled) void {
        @gtk_cell_renderer_stop_editing(cell, canceled)
    }

    @cell_renderer_get_fixed_size(GtkCellRenderer* cell, gint* width, gint* height) void {
        @gtk_cell_renderer_get_fixed_size(cell,width, height)
    }

    @cell_renderer_set_fixed_size(GtkCellRenderer* cell, gint width, gint height) void {
        @gtk_cell_renderer_set_fixed_size(cell,width, height)
    }

    @cell_renderer_get_visible(GtkCellRenderer* cell) gboolean? {
        @return gtk_cell_renderer_get_visible(cell)
    }

    @cell_renderer_set_visible(GtkCellRenderer* cell, gboolean visible) void {
        @gtk_cell_renderer_set_visible(cell, visible)
    }

    @cell_renderer_get_sensitive(GtkCellRenderer* cell) gboolean? {
        @return gtk_cell_renderer_get_sensitive(cell)
    }

    @cell_renderer_set_sensitive(GtkCellRenderer* cell, gboolean sensitive) void {
        @gtk_cell_renderer_set_sensitive(cell, sensitive)
    }

    @cell_renderer_get_alignment(GtkCellRenderer* cell, gfloat* xalign, gfloat* yalign) void {
        @gtk_cell_renderer_get_alignment(cell,xalign, yalign)
    }

    @cell_renderer_set_alignment(GtkCellRenderer* cell, gfloat xalign, gfloat yalign) void {
        @gtk_cell_renderer_set_alignment(cell,xalign, yalign)
    }

    @cell_renderer_get_padding(GtkCellRenderer* cell, gint* xpad, gint* ypad) void {
        @gtk_cell_renderer_get_padding(cell,xpad, ypad)
    }

    @cell_renderer_set_padding(GtkCellRenderer* cell, gint xpad, gint ypad) void {
        @gtk_cell_renderer_set_padding(cell,xpad, ypad)
    }

    @cell_renderer_get_state(GtkCellRenderer* cell, GtkWidget* widget, GtkCellRendererState cell_state) GtkStateFlags? {
        @return gtk_cell_renderer_get_state(cell,widget, cell_state)
    }

    @cell_renderer_is_activatable(GtkCellRenderer* cell) gboolean? {
        @return gtk_cell_renderer_is_activatable(cell)
    }

    @cell_renderer_get_preferred_height(GtkCellRenderer* cell, GtkWidget* widget, gint* minimum_size, gint* natural_size) void {
        @gtk_cell_renderer_get_preferred_height(cell,widget,minimum_size, natural_size)
    }

    @cell_renderer_get_preferred_height_for_width(GtkCellRenderer* cell, GtkWidget* widget, gint width, gint* minimum_height, gint* natural_height) void {
        @gtk_cell_renderer_get_preferred_height_for_width(cell,widget,width,minimum_height, natural_height)
    }

    @cell_renderer_get_preferred_size(GtkCellRenderer* cell, GtkWidget* widget, GtkRequisition* minimum_size, GtkRequisition* natural_size) void {
        @gtk_cell_renderer_get_preferred_size(cell,widget,minimum_size, natural_size)
    }

    @cell_renderer_get_preferred_width(GtkCellRenderer* cell, GtkWidget* widget, gint* minimum_size, gint* natural_size) void {
        @gtk_cell_renderer_get_preferred_width(cell,widget,minimum_size, natural_size)
    }

    @cell_renderer_get_preferred_width_for_height(GtkCellRenderer* cell, GtkWidget* widget, gint height, gint* minimum_width, gint* natural_width) void {
        @gtk_cell_renderer_get_preferred_width_for_height(cell,widget,height,minimum_width, natural_width)
    }

    @cell_renderer_get_request_mode(GtkCellRenderer* cell) GtkSizeRequestMode? {
        @return gtk_cell_renderer_get_request_mode(cell)
    }

    // ---
    // End of GtkCellRenderer

    // GtkCellEditable

    @cell_editable_start_editing(GtkCellEditable* cell_editable, GdkEvent* event) void {
        @gtk_cell_editable_start_editing(cell_editable, event)
    }

    @cell_editable_editing_done(GtkCellEditable* cell_editable) void {
        @gtk_cell_editable_editing_done(cell_editable)
    }

    @cell_editable_remove_widget(GtkCellEditable* cell_editable) void {
        @gtk_cell_editable_remove_widget(cell_editable)
    }

    // ---
    // End of GtkCellEditable

    // GtkCellRendererAccel

    @cell_renderer_accel_new GtkCellRenderer*? {
        @return gtk_cell_renderer_accel_new()
    }

    // ---
    // End of GtkCellRendererAccel

    // GtkCellRendererCombo

    @cell_renderer_combo_new GtkCellRenderer*? {
        @return gtk_cell_renderer_combo_new()
    }

    // ---
    // End of GtkCellRendererCombo

    // GtkCellRendererPixbuf

    @cell_renderer_pixbuf_new GtkCellRenderer*? {
        @return gtk_cell_renderer_pixbuf_new()
    }

    // ---
    // End of GtkCellRendererPixbuf

    // GtkCellRendererProgress

    @cell_renderer_progress_new GtkCellRenderer*? {
        @return gtk_cell_renderer_progress_new()
    }

    // ---
    // End of GtkCellRendererProgress

    // GtkCellRendererSpin

    @cell_renderer_spin_new GtkCellRenderer*? {
        @return gtk_cell_renderer_spin_new()
    }

    // ---
    // End of GtkCellRendererSpin

    // GtkCellRendererText

    @cell_renderer_text_new GtkCellRenderer*? {
        @return gtk_cell_renderer_text_new()
    }

    @cell_renderer_text_set_fixed_height_from_font(GtkCellRendererText* renderer, gint number_of_rows) void {
        @gtk_cell_renderer_text_set_fixed_height_from_font(renderer, number_of_rows)
    }

    // ---
    // End of GtkCellRendererText

    // GtkCellRendererToggle

    @cell_renderer_toggle_new GtkCellRenderer*? {
        @return gtk_cell_renderer_toggle_new()
    }

    @cell_renderer_toggle_get_radio(GtkCellRendererToggle* toggle) gboolean? {
        @return gtk_cell_renderer_toggle_get_radio(toggle)
    }

    @cell_renderer_toggle_set_radio(GtkCellRendererToggle* toggle, gboolean radio) void {
        @gtk_cell_renderer_toggle_set_radio(toggle, radio)
    }

    @cell_renderer_toggle_get_active(GtkCellRendererToggle* toggle) gboolean? {
        @return gtk_cell_renderer_toggle_get_active(toggle)
    }

    @cell_renderer_toggle_set_active(GtkCellRendererToggle* toggle, gboolean setting) void {
        @gtk_cell_renderer_toggle_set_active(toggle, setting)
    }

    @cell_renderer_toggle_get_activatable(GtkCellRendererToggle* toggle) gboolean? {
        @return gtk_cell_renderer_toggle_get_activatable(toggle)
    }

    @cell_renderer_toggle_set_activatable(GtkCellRendererToggle* toggle, gboolean setting) void {
        @gtk_cell_renderer_toggle_set_activatable(toggle, setting)
    }

    // ---
    // End of GtkCellRendererToggle

    // GtkCellRendererSpinner

    @cell_renderer_spinner_new GtkCellRenderer*? {
        @return gtk_cell_renderer_spinner_new()
    }

    // ---
    // End of GtkCellRendererSpinner

    // GtkListStore

    #template <typename... Columns>
    @list_store_new(gint n_columns, Columns... types) GtkListStore*? {
        @return (gtk_list_store_new(n_columns,types), ...)
    }

    @list_store_newv(gint n_columns, GType* types) GtkListStore*? {
        @return gtk_list_store_newv(n_columns, types)
    }

    @list_store_set_column_types(GtkListStore* list_store, gint n_columns, GType* types) void {
        @gtk_list_store_set_column_types(list_store,n_columns, types)
    }

    #template <typename... Columns>
    @list_store_set(GtkListStore* list_store, GtkTreeIter* iter, Columns... pairs) void {
        @(gtk_list_store_set(list_store,iter,pairs), ...)
    }

    @list_store_set_valist(GtkListStore* list_store, GtkTreeIter* iter, va_list var_args) void {
        @gtk_list_store_set_valist(list_store,iter, var_args)
    }

    @list_store_set_value(GtkListStore* list_store, GtkTreeIter* iter, gint column, GValue* value) void {
        @gtk_list_store_set_value(list_store,iter,column, value)
    }

    @list_store_set_valuesv(GtkListStore* list_store, GtkTreeIter* iter, gint* columns, GValue* values, gint n_values) void {
        @gtk_list_store_set_valuesv(list_store,iter,columns,values, n_values)
    }

    @list_store_remove(GtkListStore* list_store, GtkTreeIter* iter) gboolean? {
        @return gtk_list_store_remove(list_store, iter)
    }

    @list_store_insert(GtkListStore* list_store, GtkTreeIter* iter, gint position) void {
        @gtk_list_store_insert(list_store,iter, position)
    }

    @list_store_insert_before(GtkListStore* list_store, GtkTreeIter* iter, GtkTreeIter* sibling) void {
        @gtk_list_store_insert_before(list_store,iter, sibling)
    }

    @list_store_insert_after(GtkListStore* list_store, GtkTreeIter* iter, GtkTreeIter* sibling) void {
        @gtk_list_store_insert_after(list_store,iter, sibling)
    }

    #template <typename... Columns>
    @list_store_insert_with_values(GtkListStore* list_store, GtkTreeIter* iter, gint position, Columns... pairs) void {
        @(gtk_list_store_insert_with_values(list_store,iter,position,pairs), ...)
    }

    @list_store_insert_with_valuesv(GtkListStore* list_store, GtkTreeIter* iter, gint position, gint* columns, GValue* values, gint n_values) void {
        @gtk_list_store_insert_with_valuesv(list_store,iter,position,columns,values, n_values)
    }

    @list_store_prepend(GtkListStore* list_store, GtkTreeIter* iter) void {
        @gtk_list_store_prepend(list_store, iter)
    }

    @list_store_append(GtkListStore* list_store, GtkTreeIter* iter) void {
        @gtk_list_store_append(list_store, iter)
    }

    @list_store_clear(GtkListStore* list_store) void {
        @gtk_list_store_clear(list_store)
    }

    @list_store_iter_is_valid(GtkListStore* list_store, GtkTreeIter* iter) gboolean? {
        @return gtk_list_store_iter_is_valid(list_store, iter)
    }

    @list_store_reorder(GtkListStore* store, gint* new_order) void {
        @gtk_list_store_reorder(store, new_order)
    }

    @list_store_swap(GtkListStore* store, GtkTreeIter* a, GtkTreeIter* b) void {
        @gtk_list_store_swap(store,a, b)
    }

    @list_store_move_before(GtkListStore* store, GtkTreeIter* iter, GtkTreeIter* position) void {
        @gtk_list_store_move_before(store,iter, position)
    }

    @list_store_move_after(GtkListStore* store, GtkTreeIter* iter, GtkTreeIter* position) void {
        @gtk_list_store_move_after(store,iter, position)
    }

    // ---
    // End of GtkListStore

    // GtkTreeStore

    #template <typename... Columns>
    @tree_store_new(gint n_columns, Columns... types) GtkTreeStore*? {
        @return (gtk_tree_store_new(n_columns,types), ...)
    }

    @tree_store_newv(gint n_columns, GType* types) GtkTreeStore*? {
        @return gtk_tree_store_newv(n_columns, types)
    }

    @tree_store_set_column_types(GtkTreeStore* tree_store, gint n_columns, GType* types) void {
        @gtk_tree_store_set_column_types(tree_store,n_columns, types)
    }

    @tree_store_set_value(GtkTreeStore* tree_store, GtkTreeIter* iter, gint column, GValue* value) void {
        @gtk_tree_store_set_value(tree_store,iter,column, value)
    }

    #template <typename... Columns>
    @tree_store_set(GtkTreeStore* tree_store, GtkTreeIter* iter, Columns... pairs) void {
        @(gtk_tree_store_set(tree_store,iter,pairs), ...)
    }

    @tree_store_set_valist(GtkTreeStore* tree_store, GtkTreeIter* iter, va_list var_args) void {
        @gtk_tree_store_set_valist(tree_store,iter, var_args)
    }

    @tree_store_set_valuesv(GtkTreeStore* tree_store, GtkTreeIter* iter, gint* columns, GValue* values, gint n_values) void {
        @gtk_tree_store_set_valuesv(tree_store,iter,columns,values, n_values)
    }

    @tree_store_remove(GtkTreeStore* tree_store, GtkTreeIter* iter) gboolean? {
        @return gtk_tree_store_remove(tree_store, iter)
    }

    @tree_store_insert(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent, gint position) void {
        @gtk_tree_store_insert(tree_store,iter,parent, position)
    }

    @tree_store_insert_before(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent, GtkTreeIter* sibling) void {
        @gtk_tree_store_insert_before(tree_store,iter,parent, sibling)
    }

    @tree_store_insert_after(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent, GtkTreeIter* sibling) void {
        @gtk_tree_store_insert_after(tree_store,iter,parent, sibling)
    }

    #template <typename... Columns>
    @tree_store_insert_with_values(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent, gint position, Columns... pairs) void {
        @(gtk_tree_store_insert_with_values(tree_store,iter,parent,position,pairs), ...)
    }

    @tree_store_insert_with_valuesv(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent, gint position, gint* columns, GValue* values, gint n_values) void {
        @gtk_tree_store_insert_with_valuesv(tree_store,iter,parent,position,columns,values, n_values)
    }

    @tree_store_prepend(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent) void {
        @gtk_tree_store_prepend(tree_store,iter, parent)
    }

    @tree_store_append(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent) void {
        @gtk_tree_store_append(tree_store,iter, parent)
    }

    @tree_store_is_ancestor(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* descendant) gboolean? {
        @return gtk_tree_store_is_ancestor(tree_store,iter, descendant)
    }

    @tree_store_iter_depth(GtkTreeStore* tree_store, GtkTreeIter* iter) gint? {
        @return gtk_tree_store_iter_depth(tree_store, iter)
    }

    @tree_store_clear(GtkTreeStore* tree_store) void {
        @gtk_tree_store_clear(tree_store)
    }

    @tree_store_iter_is_valid(GtkTreeStore* tree_store, GtkTreeIter* iter) gboolean? {
        @return gtk_tree_store_iter_is_valid(tree_store, iter)
    }

    @tree_store_reorder(GtkTreeStore* tree_store, GtkTreeIter* parent, gint* new_order) void {
        @gtk_tree_store_reorder(tree_store,parent, new_order)
    }

    @tree_store_swap(GtkTreeStore* tree_store, GtkTreeIter* a, GtkTreeIter* b) void {
        @gtk_tree_store_swap(tree_store,a, b)
    }

    @tree_store_move_before(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* position) void {
        @gtk_tree_store_move_before(tree_store,iter, position)
    }

    @tree_store_move_after(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* position) void {
        @gtk_tree_store_move_after(tree_store,iter, position)
    }

    // ---
    // End of GtkTreeStore

    // GtkComboBox

    @combo_box_new GtkWidget*? {
        @return gtk_combo_box_new()
    }

    @combo_box_new_with_entry GtkWidget*? {
        @return gtk_combo_box_new_with_entry()
    }

    @combo_box_new_with_model(GtkTreeModel* model) GtkWidget*? {
        @return gtk_combo_box_new_with_model(model)
    }

    @combo_box_new_with_model_and_entry(GtkTreeModel* model) GtkWidget*? {
        @return gtk_combo_box_new_with_model_and_entry(model)
    }

    @combo_box_new_with_area(GtkCellArea* area) GtkWidget*? {
        @return gtk_combo_box_new_with_area(area)
    }

    @combo_box_new_with_area_and_entry(GtkCellArea* area) GtkWidget*? {
        @return gtk_combo_box_new_with_area_and_entry(area)
    }

    @combo_box_get_wrap_width(GtkComboBox* combo_box) gint? {
        @return gtk_combo_box_get_wrap_width(combo_box)
    }

    @combo_box_set_wrap_width(GtkComboBox* combo_box, gint width) void {
        @gtk_combo_box_set_wrap_width(combo_box, width)
    }

    @combo_box_get_row_span_column(GtkComboBox* combo_box) gint? {
        @return gtk_combo_box_get_row_span_column(combo_box)
    }

    @combo_box_set_row_span_column(GtkComboBox* combo_box, gint row_span) void {
        @gtk_combo_box_set_row_span_column(combo_box, row_span)
    }

    @combo_box_get_column_span_column(GtkComboBox* combo_box) gint? {
        @return gtk_combo_box_get_column_span_column(combo_box)
    }

    @combo_box_set_column_span_column(GtkComboBox* combo_box, gint column_span) void {
        @gtk_combo_box_set_column_span_column(combo_box, column_span)
    }

    @combo_box_get_active(GtkComboBox* combo_box) gint? {
        @return gtk_combo_box_get_active(combo_box)
    }

    @combo_box_set_active(GtkComboBox* combo_box, gint index_) void {
        @gtk_combo_box_set_active(combo_box, index_)
    }

    @combo_box_get_active_iter(GtkComboBox* combo_box, GtkTreeIter* iter) gboolean? {
        @return gtk_combo_box_get_active_iter(combo_box, iter)
    }

    @combo_box_set_active_iter(GtkComboBox* combo_box, GtkTreeIter* iter) void {
        @gtk_combo_box_set_active_iter(combo_box, iter)
    }

    @combo_box_get_id_column(GtkComboBox* combo_box) gint? {
        @return gtk_combo_box_get_id_column(combo_box)
    }

    @combo_box_set_id_column(GtkComboBox* combo_box, gint id_column) void {
        @gtk_combo_box_set_id_column(combo_box, id_column)
    }

    #const gchar* combo_box_get_active_id(GtkComboBox* combo_box) {
        @return gtk_combo_box_get_active_id(combo_box)
    }

    @combo_box_set_active_id(GtkComboBox *combo_box, const gchar* active_id) gboolean? {
        @return gtk_combo_box_set_active_id(combo_box, active_id)
    }

    @combo_box_get_model(GtkComboBox* combo_box) GtkTreeModel*? {
        @return gtk_combo_box_get_model(combo_box)
    }

    @combo_box_set_model(GtkComboBox* combo_box, GtkTreeModel* model) void {
        @gtk_combo_box_set_model(combo_box, model)
    }

    @combo_box_popup_for_device(GtkComboBox* combo_box, GdkDevice* device) void {
        @gtk_combo_box_popup_for_device(combo_box, device)
    }

    @combo_box_popup(GtkComboBox* combo_box) void {
        @gtk_combo_box_popup(combo_box)
    }

    @combo_box_popdown(GtkComboBox* combo_box) void {
        @gtk_combo_box_popdown(combo_box)
    }

    @combo_box_get_popup_accessible(GtkComboBox* combo_box) AtkObject*? {
        @return gtk_combo_box_get_popup_accessible(combo_box)
    }

    @combo_box_get_row_separator_func(GtkComboBox* combo_box) GtkTreeViewRowSeparatorFunc? {
        @return gtk_combo_box_get_row_separator_func(combo_box)
    }

    @combo_box_set_row_separator_func(GtkComboBox* combo_box, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy) void {
        @gtk_combo_box_set_row_separator_func(combo_box,func,data, destroy)
    }

    // Deprecated: @combo_box_set_add_tearoffs(GtkComboBox* combo_box,
    //                                gboolean add_tearoffs)

    // Deprecated: @combo_box_get_add_tearoffs(GtkComboBox* combo_box)

    // Deprecated: @combo_box_set_title(GtkComboBox* combo_box,
    //                         const gchar* title)

    // Deprecated: @combo_box_get_title(GtkComboBox* combo_box)

    // Deprecated: @combo_box_set_focus_on_click(GtkComboBox* combo,
    //                                  gboolean focus_on_click)

    // Deprecated: @combo_box_get_focus_on_click(GtkComboBox* combo)

    @combo_box_set_button_sensitivity(GtkComboBox* combo_box, GtkSensitivityType sensitivity) void {
        @gtk_combo_box_set_button_sensitivity(combo_box, sensitivity)
    }

    @combo_box_get_button_sensitivity(GtkComboBox* combo_box) GtkSensitivityType? {
        @return gtk_combo_box_get_button_sensitivity(combo_box)
    }

    @combo_box_get_has_entry(GtkComboBox* combo_box) gboolean? {
        @return gtk_combo_box_get_has_entry(combo_box)
    }

    @combo_box_set_entry_text_column(GtkComboBox* combo_box, gint text_column) void {
        @gtk_combo_box_set_entry_text_column(combo_box, text_column)
    }

    @combo_box_get_entry_text_column(GtkComboBox* combo_box) gint? {
        @return gtk_combo_box_get_entry_text_column(combo_box)
    }

    @combo_box_set_popup_fixed_width(GtkComboBox* combo_box, gboolean fixed) void {
        @gtk_combo_box_set_popup_fixed_width(combo_box, fixed)
    }

    @combo_box_get_popup_fixed_width(GtkComboBox* combo_box) gboolean? {
        @return gtk_combo_box_get_popup_fixed_width(combo_box)
    }

    // ---
    // End of GtkComboBox

    // GtkComboBoxText

    @combo_box_text_new GtkWidget*? {
        @return gtk_combo_box_text_new()
    }

    @combo_box_text_new_with_entry GtkWidget*? {
        @return gtk_combo_box_text_new_with_entry()
    }

    @combo_box_text_append(GtkComboBoxText* combo_box, const gchar* id, const gchar* text) void {
        @gtk_combo_box_text_append(combo_box,id, text)
    }

    @combo_box_text_prepend(GtkComboBoxText* combo_box,const gchar* id, const gchar* text) void {
        @gtk_combo_box_text_prepend(combo_box,id, text)
    }

    @combo_box_text_insert(GtkComboBoxText* combo_box, gint position, const gchar* id, const gchar* text) void {
        @gtk_combo_box_text_insert(combo_box,position,id, text)
    }

    @combo_box_text_append_text(GtkComboBoxText* combo_box, const gchar* text) void {
        @gtk_combo_box_text_append_text(combo_box, text)
    }

    @combo_box_text_prepend_text(GtkComboBoxText* combo_box, const gchar* text) void {
        @gtk_combo_box_text_prepend_text(combo_box, text)
    }

    @combo_box_text_insert_text(GtkComboBoxText* combo_box, gint position, const gchar* text) void {
        @gtk_combo_box_text_insert_text(combo_box,position, text)
    }

    @combo_box_text_remove(GtkComboBoxText* combo_box, gint position) void {
        @gtk_combo_box_text_remove(combo_box, position)
    }

    @combo_box_text_remove_all(GtkComboBoxText* combo_box) void {
        @gtk_combo_box_text_remove_all(combo_box)
    }

    @combo_box_text_get_active_text(GtkComboBoxText* combo_box) gchar*? {
        @return gtk_combo_box_text_get_active_text(combo_box)
    }

    // ---
    // End of GtkComboBoxText

    // GtkMenu

    @menu_new GtkWidget*? {
        @return gtk_menu_new()
    }

    @menu_new_from_model(GMenuModel* model) GtkWidget*? {
        @return gtk_menu_new_from_model(model)
    }

    @menu_set_screen(GtkMenu* menu, GdkScreen* screen) void {
        @gtk_menu_set_screen(menu, screen)
    }

    @menu_reorder_child(GtkMenu* menu, GtkWidget* child, gint position) void {
        @gtk_menu_reorder_child(menu,child, position)
    }

    @menu_attach(GtkMenu* menu, GtkWidget* child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach) void {
        @gtk_menu_attach(menu,child,left_attach,right_attach,top_attach, bottom_attach)
    }

    @menu_popup_at_rect(GtkMenu* menu, GdkWindow* rect_window, const GdkRectangle* rect, GdkGravity rect_anchor, GdkGravity menu_anchor, const GdkEvent* trigger_event) void {
        @gtk_menu_popup_at_rect(menu,rect_window,rect,rect_anchor,menu_anchor, trigger_event)
    }

    @menu_popup_at_widget(GtkMenu* menu, GtkWidget* widget, GdkGravity widget_anchor, GdkGravity menu_anchor, const GdkEvent* trigger_event) void {
        @gtk_menu_popup_at_widget(menu,widget,widget_anchor,menu_anchor, trigger_event)
    }

    @menu_popup_at_pointer(GtkMenu* menu, const GdkEvent* trigger_event) void {
        @gtk_menu_popup_at_pointer(menu, trigger_event)
    }

    // Deprecated: @menu_popup_for_device(GtkMenu* menu,
    //                           GdkDevice* device,
    //                           GtkWidget* parent_menu_shell,
    //                           GtkWidget* parent_menu_item,
    //                           GtkMenuPositionFunc func,
    //                           gpointer data,
    //                           GDestroyNotify destroy,
    //                           guint button,
    //                           guint32 activate_time)

    // Deprecated: @menu_popup(GtkMenu* menu,
    //                GtkWidget* parent_menu_shell,
    //                GtkWidget* parent_menu_item,
    //                GtkMenuPositionFunc func,
    //                gpointer data,
    //                guint button,
    //                guint32 activate_time)

    @menu_set_accel_group(GtkMenu* menu, GtkAccelGroup* accel_group) void {
        @gtk_menu_set_accel_group(menu, accel_group)
    }

    @menu_get_accel_group(GtkMenu* menu) GtkAccelGroup*? {
        @return gtk_menu_get_accel_group(menu)
    }

    @menu_set_accel_path(GtkMenu* menu, const gchar* accel_path) void {
        @gtk_menu_set_accel_path(menu, accel_path)
    }

    #const gchar* menu_get_accel_path(GtkMenu* menu) {
        @return gtk_menu_get_accel_path(menu)
    }

    // Deprecated: @menu_set_title(GtkMenu* menu,
    //                    const gchar* title)

    // Deprecated: @menu_get_title(GtkMenu* menu)

    @menu_set_monitor(GtkMenu* menu, gint monitor_num) void {
        @gtk_menu_set_monitor(menu, monitor_num)
    }

    @menu_get_monitor(GtkMenu* menu) gint? {
        @return gtk_menu_get_monitor(menu)
    }

    @menu_place_on_monitor(GtkMenu* menu, GdkMonitor* monitor) void {
        @gtk_menu_place_on_monitor(menu, monitor)
    }

    // Deprecated: @menu_get_tearoff_state(GtkMenu* menu)

    @menu_set_reserve_toggle_size(GtkMenu* menu, gboolean reserve_toggle_size) void {
        @gtk_menu_set_reserve_toggle_size(menu, reserve_toggle_size)
    }

    @menu_get_reserve_toggle_size(GtkMenu* menu) gboolean? {
        @return gtk_menu_get_reserve_toggle_size(menu)
    }

    @menu_popdown(GtkMenu* menu) void {
        @gtk_menu_popdown(menu)
    }

    @menu_reposition(GtkMenu* menu) void {
        @gtk_menu_reposition(menu)
    }

    @menu_get_active(GtkMenu* menu) GtkWidget*? {
        @return gtk_menu_get_active(menu)
    }

    @menu_set_active(GtkMenu* menu, guint index) void {
        @gtk_menu_set_active(menu, index)
    }

    // Deprecated: @menu_set_tearoff_state(GtkMenu* menu,
    //                            gboolean torn_off)

    @menu_attach_to_widget(GtkMenu* menu, GtkWidget* attach_widget, GtkMenuDetachFunc detacher) void {
        @gtk_menu_attach_to_widget(menu,attach_widget, detacher)
    }

    @menu_detach(GtkMenu* menu) void {
        @gtk_menu_detach(menu)
    }

    @menu_get_attach_widget(GtkMenu* menu) GtkWidget*? {
        @return gtk_menu_get_attach_widget(menu)
    }

    @menu_get_for_attach_widget(GtkWidget* widget) GList*? {
        @return gtk_menu_get_for_attach_widget(widget)
    }

    // Unimplemented: void
    //(*GtkMenuPositionFunc) (GtkMenu *menu,
    //                        gint *x,
    //                        gint *y,
    //                        gboolean *push_in,
    //                        gpointer user_data);

    // Unimplemented: void
    //(*GtkMenuDetachFunc) (GtkWidget *attach_widget,
    //                      GtkMenu *menu);

    // ---
    // End of GtkMenu

    // GtkMenuBar

    @menu_bar_new GtkWidget*? {
        @return gtk_menu_bar_new()
    }

    @menu_bar_new_from_model(GMenuModel* model) GtkWidget*? {
        @return gtk_menu_bar_new_from_model(model)
    }

    @menu_bar_set_pack_direction(GtkMenuBar* menubar, GtkPackDirection pack_dir) void {
        @gtk_menu_bar_set_pack_direction(menubar, pack_dir)
    }

    @menu_bar_get_pack_direction(GtkMenuBar* menubar) GtkPackDirection? {
        @return gtk_menu_bar_get_pack_direction(menubar)
    }

    @menu_bar_set_child_pack_direction(GtkMenuBar* menubar, GtkPackDirection child_pack_dir) void {
        @gtk_menu_bar_set_child_pack_direction(menubar, child_pack_dir)
    }

    @menu_bar_get_child_pack_direction(GtkMenuBar* menubar) GtkPackDirection? {
        @return gtk_menu_bar_get_child_pack_direction(menubar)
    }

    // ---
    // End of GtkMenuBar

    // GtkMenuItem

    @menu_item_new GtkWidget*? {
        @return gtk_menu_item_new()
    }

    @menu_item_new_with_label(const gchar* label) GtkWidget*? {
        @return gtk_menu_item_new_with_label(label)
    }

    @menu_item_new_with_mnemonic(const gchar* label) GtkWidget*? {
        @return gtk_menu_item_new_with_mnemonic(label)
    }

    // Deprecated: @menu_item_set_right_justified(GtkMenuItem* menu_item,
    //                                   gboolean right_justified)

    // Deprecated: @menu_item_get_right_justified(GtkMenuItem* menu_item)

    #const gchar* menu_item_get_label(GtkMenuItem* menu_item) {
        @return gtk_menu_item_get_label(menu_item)
    }

    @menu_item_set_label(GtkMenuItem* menu_item, const gchar* label) void {
        @gtk_menu_item_set_label(menu_item, label)
    }

    @menu_item_get_use_underline(GtkMenuItem* menu_item) gboolean? {
        @return gtk_menu_item_get_use_underline(menu_item)
    }

    @menu_item_set_use_underline(GtkMenuItem* menu_item, gboolean setting) void {
        @gtk_menu_item_set_use_underline(menu_item, setting)
    }

    @menu_item_set_submenu(GtkMenuItem* menu_item, GtkWidget* submenu) void {
        @gtk_menu_item_set_submenu(menu_item, submenu)
    }

    @menu_item_get_submenu(GtkMenuItem* menu_item) GtkWidget*? {
        @return gtk_menu_item_get_submenu(menu_item)
    }

    @menu_item_set_accel_path(GtkMenuItem* menu_item, const gchar* accel_path) void {
        @gtk_menu_item_set_accel_path(menu_item, accel_path)
    }

    #const gchar* menu_item_get_accel_path(GtkMenuItem* menu_item) {
        @return gtk_menu_item_get_accel_path(menu_item)
    }

    @menu_item_select(GtkMenuItem* menu_item) void {
        @gtk_menu_item_select(menu_item)
    }

    @menu_item_deselect(GtkMenuItem* menu_item) void {
        @gtk_menu_item_deselect(menu_item)
    }

    @menu_item_activate(GtkMenuItem* menu_item) void {
        @gtk_menu_item_activate(menu_item)
    }

    @menu_item_toggle_size_request(GtkMenuItem* menu_item, gint* requisition) void {
        @gtk_menu_item_toggle_size_request(menu_item, requisition)
    }

    @menu_item_toggle_size_allocate(GtkMenuItem* menu_item, gint allocation) void {
        @gtk_menu_item_toggle_size_allocate(menu_item, allocation)
    }

    @menu_item_get_reserve_indicator(GtkMenuItem* menu_item) gboolean? {
        @return gtk_menu_item_get_reserve_indicator(menu_item)
    }

    @menu_item_set_reserve_indicator(GtkMenuItem* menu_item, gboolean reserve) void {
        @gtk_menu_item_set_reserve_indicator(menu_item, reserve)
    }

    // ---
    // End of GtkMenuItem

    // GtkRadioMenuItem

    @radio_menu_item_new(GSList* group) GtkWidget*? {
        @return gtk_radio_menu_item_new(group)
    }

    @radio_menu_item_new_with_label(GSList* group, const gchar* label) GtkWidget*? {
        @return gtk_radio_menu_item_new_with_label(group, label)
    }

    @radio_menu_item_new_with_mnemonic(GSList* group, const gchar* label) GtkWidget*? {
        @return gtk_radio_menu_item_new_with_mnemonic(group, label)
    }

    @radio_menu_item_new_from_widget(GtkRadioMenuItem* group) GtkWidget*? {
        @return gtk_radio_menu_item_new_from_widget(group)
    }

    @radio_menu_item_new_with_label_from_widget(GtkRadioMenuItem* group, const gchar* label) GtkWidget*? {
        @return gtk_radio_menu_item_new_with_label_from_widget(group, label)
    }

    @radio_menu_item_new_with_mnemonic_from_widget(GtkRadioMenuItem* group, const gchar* label) GtkWidget*? {
        @return gtk_radio_menu_item_new_with_mnemonic_from_widget(group, label)
    }

    @radio_menu_item_set_group(GtkRadioMenuItem* radio_menu_item, GSList* group) void {
        @gtk_radio_menu_item_set_group(radio_menu_item, group)
    }

    @radio_menu_item_get_group(GtkRadioMenuItem* radio_menu_item) GSList*? {
        @return gtk_radio_menu_item_get_group(radio_menu_item)
    }

    @radio_menu_item_join_group(GtkRadioMenuItem* radio_menu_item, GtkRadioMenuItem* group_source) void {
        @gtk_radio_menu_item_join_group(radio_menu_item, group_source)
    }

    // ---
    // End of GtkRadioMenuItem

    // GtkCheckMenuItem

    @check_menu_item_new GtkWidget*? {
        @return gtk_check_menu_item_new()
    }

    @check_menu_item_new_with_label(const gchar* label) GtkWidget*? {
        @return gtk_check_menu_item_new_with_label(label)
    }

    @check_menu_item_new_with_mnemonic(const gchar* label) GtkWidget*? {
        @return gtk_check_menu_item_new_with_mnemonic(label)
    }

    @check_menu_item_get_active(GtkCheckMenuItem* check_menu_item) gboolean? {
        @return gtk_check_menu_item_get_active(check_menu_item)
    }

    @check_menu_item_set_active(GtkCheckMenuItem* check_menu_item, gboolean is_active) void {
        @gtk_check_menu_item_set_active(check_menu_item, is_active)
    }

    @check_menu_item_toggled(GtkCheckMenuItem* check_menu_item) void {
        @gtk_check_menu_item_toggled(check_menu_item)
    }

    @check_menu_item_get_inconsistent(GtkCheckMenuItem* check_menu_item) gboolean? {
        @return gtk_check_menu_item_get_inconsistent(check_menu_item)
    }

    @check_menu_item_set_inconsistent(GtkCheckMenuItem* check_menu_item, gboolean setting) void {
        @gtk_check_menu_item_set_inconsistent(check_menu_item, setting)
    }

    @check_menu_item_set_draw_as_radio(GtkCheckMenuItem* check_menu_item, gboolean draw_as_radio) void {
        @gtk_check_menu_item_set_draw_as_radio(check_menu_item, draw_as_radio)
    }

    @check_menu_item_get_draw_as_radio(GtkCheckMenuItem* check_menu_item) gboolean? {
        @return gtk_check_menu_item_get_draw_as_radio(check_menu_item)
    }

    // ---
    // End of GtkCheckMenuItem

    // GtkSeparatorMenuItem

    @separator_menu_item_new GtkWidget*? {
        @return gtk_separator_menu_item_new()
    }

    // ---
    // End of GtkSeparatorMenuItem

    // GtkToolShell

    @tool_shell_get_ellipsize_mode(GtkToolShell* shell) PangoEllipsizeMode? {
        @return gtk_tool_shell_get_ellipsize_mode(shell)
    }

    @tool_shell_get_icon_size(GtkToolShell* shell) GtkIconSize? {
        @return gtk_tool_shell_get_icon_size(shell)
    }

    @tool_shell_get_orientation(GtkToolShell* shell) GtkOrientation? {
        @return gtk_tool_shell_get_orientation(shell)
    }

    @tool_shell_get_relief_style(GtkToolShell* shell) GtkReliefStyle? {
        @return gtk_tool_shell_get_relief_style(shell)
    }

    @tool_shell_get_style(GtkToolShell* shell) GtkToolbarStyle? {
        @return gtk_tool_shell_get_style(shell)
    }

    @tool_shell_get_text_alignment(GtkToolShell* shell) gfloat? {
        @return gtk_tool_shell_get_text_alignment(shell)
    }

    @tool_shell_get_text_orientation(GtkToolShell* shell) GtkOrientation? {
        @return gtk_tool_shell_get_text_orientation(shell)
    }

    @tool_shell_rebuild_menu(GtkToolShell* shell) void {
        @gtk_tool_shell_rebuild_menu(shell)
    }

    @tool_shell_get_text_size_group(GtkToolShell* shell) GtkSizeGroup*? {
        @return gtk_tool_shell_get_text_size_group(shell)
    }

    // ---
    // End of GtkToolShell

    // GtkToolbar

    @toolbar_new GtkWidget*? {
        @return gtk_toolbar_new()
    }

    @toolbar_insert(GtkToolbar* toolbar, GtkToolItem* item, gint pos) void {
        @gtk_toolbar_insert(toolbar,item, pos)
    }

    @toolbar_get_item_index(GtkToolbar* toolbar, GtkToolItem* item) gint? {
        @return gtk_toolbar_get_item_index(toolbar, item)
    }

    @toolbar_get_n_items(GtkToolbar* toolbar) gint? {
        @return gtk_toolbar_get_n_items(toolbar)
    }

    @toolbar_get_nth_item(GtkToolbar* toolbar, gint n) GtkToolItem*? {
        @return gtk_toolbar_get_nth_item(toolbar, n)
    }

    @toolbar_get_drop_index(GtkToolbar* toolbar, gint x, gint y) gint? {
        @return gtk_toolbar_get_drop_index(toolbar,x, y)
    }

    @toolbar_set_drop_highlight_item(GtkToolbar* toolbar, GtkToolItem* tool_item, gint index_) void {
        @gtk_toolbar_set_drop_highlight_item(toolbar,tool_item, index_)
    }

    @toolbar_set_show_arrow(GtkToolbar* toolbar, gboolean show_arrow) void {
        @gtk_toolbar_set_show_arrow(toolbar, show_arrow)
    }

    @toolbar_unset_icon_size(GtkToolbar* toolbar) void {
        @gtk_toolbar_unset_icon_size(toolbar)
    }

    @toolbar_get_show_arrow(GtkToolbar* toolbar) gboolean? {
        @return gtk_toolbar_get_show_arrow(toolbar)
    }

    @toolbar_get_style(GtkToolbar* toolbar) GtkToolbarStyle? {
        @return gtk_toolbar_get_style(toolbar)
    }

    @toolbar_get_icon_size(GtkToolbar* toolbar) GtkIconSize? {
        @return gtk_toolbar_get_icon_size(toolbar)
    }

    @toolbar_get_relief_style(GtkToolbar* toolbar) GtkReliefStyle? {
        @return gtk_toolbar_get_relief_style(toolbar)
    }

    @toolbar_set_style(GtkToolbar* toolbar, GtkToolbarStyle style) void {
        @gtk_toolbar_set_style(toolbar, style)
    }

    @toolbar_set_icon_size(GtkToolbar* toolbar, GtkIconSize icon_size) void {
        @gtk_toolbar_set_icon_size(toolbar, icon_size)
    }

    @toolbar_unset_style(GtkToolbar* toolbar) void {
        @gtk_toolbar_unset_style(toolbar)
    }

    // ---
    // End of GtkToolbar

    // GtkToolItem

    @tool_item_new GtkToolItem*? {
        @return gtk_tool_item_new()
    }

    @tool_item_set_homogeneous(GtkToolItem* tool_item, gboolean homogeneous) void {
        @gtk_tool_item_set_homogeneous(tool_item, homogeneous)
    }

    @tool_item_get_homogeneous(GtkToolItem* tool_item) gboolean? {
        @return gtk_tool_item_get_homogeneous(tool_item)
    }

    @tool_item_set_expand(GtkToolItem* tool_item, gboolean expand) void {
        @gtk_tool_item_set_expand(tool_item, expand)
    }

    @tool_item_get_expand(GtkToolItem* tool_item) gboolean? {
        @return gtk_tool_item_get_expand(tool_item)
    }

    @tool_item_set_tooltip_text(GtkToolItem* tool_item, const gchar* text) void {
        @gtk_tool_item_set_tooltip_text(tool_item, text)
    }

    @tool_item_set_tooltip_markup(GtkToolItem* tool_item, const gchar* markup) void {
        @gtk_tool_item_set_tooltip_markup(tool_item, markup)
    }

    @tool_item_set_use_drag_window(GtkToolItem* tool_item, gboolean use_drag_window) void {
        @gtk_tool_item_set_use_drag_window(tool_item, use_drag_window)
    }

    @tool_item_get_use_drag_window(GtkToolItem* tool_item) gboolean? {
        @return gtk_tool_item_get_use_drag_window(tool_item)
    }

    @tool_item_set_visible_horizontal(GtkToolItem* tool_item, gboolean visible_horizontal) void {
        @gtk_tool_item_set_visible_horizontal(tool_item, visible_horizontal)
    }

    @tool_item_get_visible_horizontal(GtkToolItem* tool_item) gboolean? {
        @return gtk_tool_item_get_visible_horizontal(tool_item)
    }

    @tool_item_set_visible_vertical(GtkToolItem* tool_item, gboolean visible_vertical) void {
        @gtk_tool_item_set_visible_vertical(tool_item, visible_vertical)
    }

    @tool_item_get_visible_vertical(GtkToolItem* tool_item) gboolean? {
        @return gtk_tool_item_get_visible_vertical(tool_item)
    }

    @tool_item_set_is_important(GtkToolItem* tool_item, gboolean is_important) void {
        @gtk_tool_item_set_is_important(tool_item, is_important)
    }

    @tool_item_get_is_important(GtkToolItem* tool_item) gboolean? {
        @return gtk_tool_item_get_is_important(tool_item)
    }

    @tool_item_get_ellipsize_mode(GtkToolItem* tool_item) PangoEllipsizeMode? {
        @return gtk_tool_item_get_ellipsize_mode(tool_item)
    }

    @tool_item_get_icon_size(GtkToolItem* tool_item) GtkIconSize? {
        @return gtk_tool_item_get_icon_size(tool_item)
    }

    @tool_item_get_orientation(GtkToolItem* tool_item) GtkOrientation? {
        @return gtk_tool_item_get_orientation(tool_item)
    }

    @tool_item_get_toolbar_style(GtkToolItem* tool_item) GtkToolbarStyle? {
        @return gtk_tool_item_get_toolbar_style(tool_item)
    }

    @tool_item_get_relief_style(GtkToolItem* tool_item) GtkReliefStyle? {
        @return gtk_tool_item_get_relief_style(tool_item)
    }

    @tool_item_get_text_alignment(GtkToolItem* tool_item) gfloat? {
        @return gtk_tool_item_get_text_alignment(tool_item)
    }

    @tool_item_get_text_orientation(GtkToolItem* tool_item) GtkOrientation? {
        @return gtk_tool_item_get_text_orientation(tool_item)
    }

    @tool_item_retrieve_proxy_menu_item(GtkToolItem* tool_item) GtkWidget*? {
        @return gtk_tool_item_retrieve_proxy_menu_item(tool_item)
    }

    @tool_item_get_proxy_menu_item(GtkToolItem* tool_item, const gchar* menu_item_id) GtkWidget*? {
        @return gtk_tool_item_get_proxy_menu_item(tool_item, menu_item_id)
    }

    @tool_item_set_proxy_menu_item(GtkToolItem* tool_item, const gchar* menu_item_id, GtkWidget* menu_item) void {
        @gtk_tool_item_set_proxy_menu_item(tool_item,menu_item_id, menu_item)
    }

    @tool_item_rebuild_menu(GtkToolItem* tool_item) void {
        @gtk_tool_item_rebuild_menu(tool_item)
    }

    @tool_item_toolbar_reconfigured(GtkToolItem* tool_item) void {
        @gtk_tool_item_toolbar_reconfigured(tool_item)
    }

    @tool_item_get_text_size_group(GtkToolItem* tool_item) GtkSizeGroup*? {
        @return gtk_tool_item_get_text_size_group(tool_item)
    }

    // ---
    // End of GtkToolItem

    // GtkToolPalette

    @tool_palette_new GtkWidget*? {
        @return gtk_tool_palette_new()
    }

    @tool_palette_get_exclusive(GtkToolPalette* palette, GtkToolItemGroup* group) gboolean? {
        @return gtk_tool_palette_get_exclusive(palette, group)
    }

    @tool_palette_set_exclusive(GtkToolPalette* palette, GtkToolItemGroup* group, gboolean exclusive) void {
        @gtk_tool_palette_set_exclusive(palette,group, exclusive)
    }

    @tool_palette_get_expand(GtkToolPalette* palette, GtkToolItemGroup* group) gboolean? {
        @return gtk_tool_palette_get_expand(palette, group)
    }

    @tool_palette_set_expand(GtkToolPalette* palette, GtkToolItemGroup* group, gboolean expand) void {
        @gtk_tool_palette_set_expand(palette,group, expand)
    }

    @tool_palette_get_group_position(GtkToolPalette* palette, GtkToolItemGroup* group) gint? {
        @return gtk_tool_palette_get_group_position(palette, group)
    }

    @tool_palette_set_group_position(GtkToolPalette* palette, GtkToolItemGroup* group, gint position) void {
        @gtk_tool_palette_set_group_position(palette,group, position)
    }

    @tool_palette_get_icon_size(GtkToolPalette* palette) GtkIconSize? {
        @return gtk_tool_palette_get_icon_size(palette)
    }

    @tool_palette_set_icon_size(GtkToolPalette* palette, GtkIconSize icon_size) void {
        @gtk_tool_palette_set_icon_size(palette, icon_size)
    }

    @tool_palette_unset_icon_size(GtkToolPalette* palette) void {
        @gtk_tool_palette_unset_icon_size(palette)
    }

    @tool_palette_get_style(GtkToolPalette* palette) GtkToolbarStyle? {
        @return gtk_tool_palette_get_style(palette)
    }

    @tool_palette_set_style(GtkToolPalette* palette, GtkToolbarStyle style) void {
        @gtk_tool_palette_set_style(palette, style)
    }

    @tool_palette_unset_style(GtkToolPalette* palette) void {
        @gtk_tool_palette_unset_style(palette)
    }

    @tool_palette_add_drag_dest(GtkToolPalette* palette, GtkWidget* widget, GtkDestDefaults flags, GtkToolPaletteDragTargets targets, GdkDragAction actions) void {
        @gtk_tool_palette_add_drag_dest(palette,widget,flags,targets, actions)
    }

    @tool_palette_get_drag_item(GtkToolPalette* palette, const GtkSelectionData* selection) GtkWidget*? {
        @return gtk_tool_palette_get_drag_item(palette, selection)
    }

    #const GtkTargetEntry* tool_palette_get_drag_target_group() {
        @return gtk_tool_palette_get_drag_target_group()
    }

    #const GtkTargetEntry* tool_palette_get_drag_target_item() {
        @return gtk_tool_palette_get_drag_target_item()
    }

    @tool_palette_get_drop_group(GtkToolPalette* palette, gint x, gint y) GtkToolItemGroup*? {
        @return gtk_tool_palette_get_drop_group(palette,x, y)
    }

    @tool_palette_get_drop_item(GtkToolPalette* palette, gint x, gint y) GtkToolItem*? {
        @return gtk_tool_palette_get_drop_item(palette,x, y)
    }

    @tool_palette_set_drag_source(GtkToolPalette* palette, GtkToolPaletteDragTargets targets) void {
        @gtk_tool_palette_set_drag_source(palette, targets)
    }

    // Deprecated: @tool_palette_get_hadjustment(GtkToolPalette* palette)

    // Deprecated: @tool_palette_get_vadjustment(GtkToolPalette* palette)

    // ---
    // End of GtkToolPalette

    // GtkToolItemGroup

    @tool_item_group_get_collapsed(GtkToolItemGroup* group) gboolean? {
        @return gtk_tool_item_group_get_collapsed(group)
    }

    @tool_item_group_get_drop_item(GtkToolItemGroup* group, gint x, gint y) GtkToolItem*? {
        @return gtk_tool_item_group_get_drop_item(group,x, y)
    }

    @tool_item_group_get_ellipsize(GtkToolItemGroup* group) PangoEllipsizeMode? {
        @return gtk_tool_item_group_get_ellipsize(group)
    }

    @tool_item_group_get_item_position(GtkToolItemGroup* group, GtkToolItem* item) gint? {
        @return gtk_tool_item_group_get_item_position(group, item)
    }

    @tool_item_group_get_n_items(GtkToolItemGroup* group) guint? {
        @return gtk_tool_item_group_get_n_items(group)
    }

    #const gchar* tool_item_group_get_label(GtkToolItemGroup* group) {
        @return gtk_tool_item_group_get_label(group)
    }

    @tool_item_group_get_label_widget(GtkToolItemGroup* group) GtkWidget*? {
        @return gtk_tool_item_group_get_label_widget(group)
    }

    @tool_item_group_get_nth_item(GtkToolItemGroup* group, guint index) GtkToolItem*? {
        @return gtk_tool_item_group_get_nth_item(group, index)
    }

    @tool_item_group_get_header_relief(GtkToolItemGroup* group) GtkReliefStyle? {
        @return gtk_tool_item_group_get_header_relief(group)
    }

    @tool_item_group_insert(GtkToolItemGroup* group, GtkToolItem* item, gint position) void {
        @gtk_tool_item_group_insert(group,item, position)
    }

    @tool_item_group_new(const gchar* label) GtkWidget*? {
        @return gtk_tool_item_group_new(label)
    }

    @tool_item_group_set_collapsed(GtkToolItemGroup* group, gboolean collapsed) void {
        @gtk_tool_item_group_set_collapsed(group, collapsed)
    }

    @tool_item_group_set_ellipsize(GtkToolItemGroup* group, PangoEllipsizeMode ellipsize) void {
        @gtk_tool_item_group_set_ellipsize(group, ellipsize)
    }

    @tool_item_group_set_item_position(GtkToolItemGroup* group, GtkToolItem* item, gint position) void {
        @gtk_tool_item_group_set_item_position(group,item, position)
    }

    @tool_item_group_set_label(GtkToolItemGroup* group, const gchar* label) void {
        @gtk_tool_item_group_set_label(group, label)
    }

    @tool_item_group_set_label_widget(GtkToolItemGroup* group, GtkWidget* label_widget) void {
        @gtk_tool_item_group_set_label_widget(group, label_widget)
    }

    @tool_item_group_set_header_relief(GtkToolItemGroup* group, GtkReliefStyle style) void {
        @gtk_tool_item_group_set_header_relief(group, style)
    }

    // ---
    // End of GtkToolItemGroup

    // GtkSeparatorToolItem

    @separator_tool_item_new GtkToolItem*? {
        @return gtk_separator_tool_item_new()
    }

    @separator_tool_item_set_draw(GtkSeparatorToolItem* item, gboolean draw) void {
        @gtk_separator_tool_item_set_draw(item, draw)
    }

    @separator_tool_item_get_draw(GtkSeparatorToolItem* item) gboolean? {
        @return gtk_separator_tool_item_get_draw(item)
    }

    // ---
    // End of GtkSeparatorToolItem

    // GtkToolButton

    @tool_button_new(GtkWidget* icon_widget, const gchar* label) GtkToolItem*? {
        @return gtk_tool_button_new(icon_widget, label)
    }

    // Deprecated: @tool_button_new_from_stock(const gchar* stock_id)

    @tool_button_set_label(GtkToolButton* button, const gchar* label) void {
        @gtk_tool_button_set_label(button, label)
    }

    #const gchar* tool_button_get_label(GtkToolButton* button) {
        @return gtk_tool_button_get_label(button)
    }

    @tool_button_set_use_underline(GtkToolButton* button, gboolean use_underline) void {
        @gtk_tool_button_set_use_underline(button, use_underline)
    }

    @tool_button_get_use_underline(GtkToolButton* button) gboolean? {
        @return gtk_tool_button_get_use_underline(button)
    }

    // Deprecated: @tool_button_set_stock_id(GtkToolButton* button,
    //                              const gchar* stock_id)

    // Deprecated: @tool_button_get_stock_id(GtkToolButton* button)

    @tool_button_set_icon_name(GtkToolButton* button, const gchar* icon_name) void {
        @gtk_tool_button_set_icon_name(button, icon_name)
    }

    #const gchar* tool_button_get_icon_name(GtkToolButton* button) {
        @return gtk_tool_button_get_icon_name(button)
    }

    @tool_button_set_icon_widget(GtkToolButton* button, GtkWidget* icon_widget) void {
        @gtk_tool_button_set_icon_widget(button, icon_widget)
    }

    @tool_button_get_icon_widget(GtkToolButton* button) GtkWidget*? {
        @return gtk_tool_button_get_icon_widget(button)
    }

    @tool_button_set_label_widget(GtkToolButton* button, GtkWidget* label_widget) void {
        @gtk_tool_button_set_label_widget(button, label_widget)
    }

    @tool_button_get_label_widget(GtkToolButton* button) GtkWidget*? {
        @return gtk_tool_button_get_label_widget(button)
    }

    // ---
    // End of GtkToolButton

    // GtkMenuToolButton

    @menu_tool_button_new(GtkWidget* icon_widget, const gchar* label) GtkToolItem*? {
        @return gtk_menu_tool_button_new(icon_widget, label)
    }

    // Deprecated: @menu_tool_button_new_from_stock(const gchar* stock_id)

    @menu_tool_button_set_menu(GtkMenuToolButton* button, GtkWidget* menu) void {
        @gtk_menu_tool_button_set_menu(button, menu)
    }

    @menu_tool_button_get_menu(GtkMenuToolButton* button) GtkWidget*? {
        @return gtk_menu_tool_button_get_menu(button)
    }

    @menu_tool_button_set_arrow_tooltip_text(GtkMenuToolButton* button, const gchar* text) void {
        @gtk_menu_tool_button_set_arrow_tooltip_text(button, text)
    }

    @menu_tool_button_set_arrow_tooltip_markup(GtkMenuToolButton* button, const gchar* markup) void {
        @gtk_menu_tool_button_set_arrow_tooltip_markup(button, markup)
    }

    // ---
    // End of GtkMenuToolButton

    // GtkToggleToolButton

    @toggle_tool_button_new GtkToolItem*? {
        @return gtk_toggle_tool_button_new()
    }

    // Deprecated: @toggle_tool_button_new_from_stock(const gchar* stock_id)

    @toggle_tool_button_set_active(GtkToggleToolButton* button, gboolean is_active) void {
        @gtk_toggle_tool_button_set_active(button, is_active)
    }

    @toggle_tool_button_get_active(GtkToggleToolButton* button) gboolean? {
        @return gtk_toggle_tool_button_get_active(button)
    }

    // ---
    // End of GtkToggleToolButton

    // GtkRadioToolButton

    @radio_tool_button_new(GSList* group) GtkToolItem*? {
        @return gtk_radio_tool_button_new(group)
    }

    // Deprecated: @radio_tool_button_new_from_stock(GSList* group,
    //                                      const gchar* stock_id)

    @radio_tool_button_new_from_widget(GtkRadioToolButton* group) GtkToolItem*? {
        @return gtk_radio_tool_button_new_from_widget(group)
    }

    // Deprecated: @radio_tool_button_new_with_stock_from_widget(GtkRadioToolButton* group,
    //                                const gchar* stock_id)

    @radio_tool_button_get_group(GtkRadioToolButton* button) GSList*? {
        @return gtk_radio_tool_button_get_group(button)
    }

    @radio_tool_button_set_group(GtkRadioToolButton* button, GSList* group) void {
        @gtk_radio_tool_button_set_group(button, group)
    }

    // ---
    // End of GtkRadioToolButton

    // GtkPopover

    @popover_new(GtkWidget* relative_to) GtkWidget*? {
        @return gtk_popover_new(relative_to)
    }

    @popover_new_from_model(GtkWidget* relative_to, GMenuModel* model) GtkWidget*? {
        @return gtk_popover_new_from_model(relative_to, model)
    }

    @popover_bind_model(GtkPopover* popover, GMenuModel* model, const gchar* action_namespace) void {
        @gtk_popover_bind_model(popover,model, action_namespace)
    }

    @popover_popup(GtkPopover* popover) void {
        @gtk_popover_popup(popover)
    }

    @popover_popdown(GtkPopover* popover) void {
        @gtk_popover_popdown(popover)
    }

    @popover_set_relative_to(GtkPopover* popover, GtkWidget* relative_to) void {
        @gtk_popover_set_relative_to(popover, relative_to)
    }

    @popover_get_relative_to(GtkPopover* popover) GtkWidget*? {
        @return gtk_popover_get_relative_to(popover)
    }

    @popover_set_pointing_to(GtkPopover* popover, const GdkRectangle* rect) void {
        @gtk_popover_set_pointing_to(popover, rect)
    }

    @popover_get_pointing_to(GtkPopover* popover, GdkRectangle* rect) gboolean? {
        @return gtk_popover_get_pointing_to(popover, rect)
    }

    @popover_set_position(GtkPopover* popover, GtkPositionType position) void {
        @gtk_popover_set_position(popover, position)
    }

    @popover_get_position(GtkPopover* popover) GtkPositionType? {
        @return gtk_popover_get_position(popover)
    }

    @popover_set_constrain_to(GtkPopover* popover, GtkPopoverConstraint constraint) void {
        @gtk_popover_set_constrain_to(popover, constraint)
    }

    @popover_get_constrain_to(GtkPopover* popover) GtkPopoverConstraint? {
        @return gtk_popover_get_constrain_to(popover)
    }

    @popover_set_modal(GtkPopover* popover, gboolean modal) void {
        @gtk_popover_set_modal(popover, modal)
    }

    @popover_get_modal(GtkPopover* popover) gboolean? {
        @return gtk_popover_get_modal(popover)
    }

    // Deprecated: @popover_set_transitions_enabled(GtkPopover* popover,
    //                                     gboolean transitions_enabled)

    // Deprecated: @popover_get_transitions_enabled(GtkPopover* popover)

    @popover_set_default_widget(GtkPopover* popover, GtkWidget* widget) void {
        @gtk_popover_set_default_widget(popover, widget)
    }

    @popover_get_default_widget(GtkPopover* popover) GtkWidget*? {
        @return gtk_popover_get_default_widget(popover)
    }

    // ---
    // End of GtkPopover

    // GtkPopoverMenu

    @popover_menu_new GtkWidget*? {
        @return gtk_popover_menu_new()
    }

    @popover_menu_open_submenu(GtkPopoverMenu* popover, const gchar* name) void {
        @gtk_popover_menu_open_submenu(popover, name)
    }

    // ---
    // End of GtkPopoverMenu

    // GtkColorChooser

    @color_chooser_get_rgba(GtkColorChooser* chooser, GdkRGBA* color) void {
        @gtk_color_chooser_get_rgba(chooser, color)
    }

    @color_chooser_set_rgba(GtkColorChooser* chooser, const GdkRGBA* color) void {
        @gtk_color_chooser_set_rgba(chooser, color)
    }

    @color_chooser_get_use_alpha(GtkColorChooser* chooser) gboolean? {
        @return gtk_color_chooser_get_use_alpha(chooser)
    }

    @color_chooser_set_use_alpha(GtkColorChooser* chooser, gboolean use_alpha) void {
        @gtk_color_chooser_set_use_alpha(chooser, use_alpha)
    }

    @color_chooser_add_palette(GtkColorChooser* chooser, GtkOrientation orientation, gint colors_per_line, gint n_colors, GdkRGBA* colors) void {
        @gtk_color_chooser_add_palette(chooser,orientation,colors_per_line,n_colors, colors)
    }

    // ---
    // End of GtkColorChooser

    // GtkColorButton

    @color_button_new GtkWidget*? {
        @return gtk_color_button_new()
    }

    // Deprecated: @color_button_new_with_color(const GdkColor* color)

    @color_button_new_with_rgba(const GdkRGBA* rgba) GtkWidget*? {
        @return gtk_color_button_new_with_rgba(rgba)
    }

    // Deprecated: @color_button_set_color(GtkColorButton* button,
    //                            const GdkColor* color)

    // Deprecated: @color_button_get_color(GtkColorButton* button,
    //                            GdkColor* color)

    // Deprecated: @color_button_set_alpha(GtkColorButton* button,
    //                            guint16 alpha)

    // Deprecated: @color_button_get_alpha(GtkColorButton* button)

    // Deprecated: @color_button_set_rgba(GtkColorButton* button,
    //                           const GdkRGBA* rgba)

    // Deprecated: @color_button_get_rgba(GtkColorButton* button,
    //                           GdkRGBA* rgba)

    // Deprecated: @color_button_set_use_alpha(GtkColorButton* button,
    //                                gboolean use_alpha)

    // Deprecated: @color_button_get_use_alpha(GtkColorButton* button)

    @color_button_set_title(GtkColorButton* button, const gchar* title) void {
        @gtk_color_button_set_title(button, title)
    }

    #const gchar* color_button_get_title(GtkColorButton* button) {
        @return gtk_color_button_get_title(button)
    }

    // ---
    // End of GtkColorButton

    // GtkColorChooserWidget

    @color_chooser_widget_new GtkWidget*? {
        @return gtk_color_chooser_widget_new()
    }

    // ---
    // End of GtkColorChooserWidget

    // GtkColorChooserDialog

    @color_chooser_dialog_new(const gchar* title, GtkWindow* parent) GtkWidget*? {
        @return gtk_color_chooser_dialog_new(title, parent)
    }

    // ---
    // End of GtkColorChooserDialog

    // GtkFileChooser

    @file_chooser_set_action(GtkFileChooser* chooser, GtkFileChooserAction action) void {
        @gtk_file_chooser_set_action(chooser, action)
    }

    @file_chooser_get_action(GtkFileChooser* chooser) GtkFileChooserAction? {
        @return gtk_file_chooser_get_action(chooser)
    }

    @file_chooser_set_local_only(GtkFileChooser* chooser, gboolean local_only) void {
        @gtk_file_chooser_set_local_only(chooser, local_only)
    }

    @file_chooser_get_local_only(GtkFileChooser* chooser) gboolean? {
        @return gtk_file_chooser_get_local_only(chooser)
    }

    @file_chooser_set_select_multiple(GtkFileChooser* chooser, gboolean select_multiple) void {
        @gtk_file_chooser_set_select_multiple(chooser, select_multiple)
    }

    @file_chooser_get_select_multiple(GtkFileChooser* chooser) gboolean? {
        @return gtk_file_chooser_get_select_multiple(chooser)
    }

    @file_chooser_set_show_hidden(GtkFileChooser* chooser, gboolean show_hidden) void {
        @gtk_file_chooser_set_show_hidden(chooser, show_hidden)
    }

    @file_chooser_get_show_hidden(GtkFileChooser* chooser) gboolean? {
        @return gtk_file_chooser_get_show_hidden(chooser)
    }

    @file_chooser_set_do_overwrite_confirmation(GtkFileChooser* chooser, gboolean do_overwrite_confirmation) void {
        @gtk_file_chooser_set_do_overwrite_confirmation(chooser, do_overwrite_confirmation)
    }

    @file_chooser_get_do_overwrite_confirmation(GtkFileChooser* chooser) gboolean? {
        @return gtk_file_chooser_get_do_overwrite_confirmation(chooser)
    }

    @file_chooser_set_create_folders(GtkFileChooser* chooser, gboolean create_folders) void {
        @gtk_file_chooser_set_create_folders(chooser, create_folders)
    }

    @file_chooser_get_create_folders(GtkFileChooser* chooser) gboolean? {
        @return gtk_file_chooser_get_create_folders(chooser)
    }

    @file_chooser_set_current_name(GtkFileChooser* chooser, const gchar* name) void {
        @gtk_file_chooser_set_current_name(chooser, name)
    }

    @file_chooser_get_current_name(GtkFileChooser* chooser) gchar*? {
        @return gtk_file_chooser_get_current_name(chooser)
    }

    @file_chooser_get_filename(GtkFileChooser* chooser) gchar*? {
        @return gtk_file_chooser_get_filename(chooser)
    }

    @file_chooser_set_filename(GtkFileChooser* chooser, const char* filename) gboolean? {
        @return gtk_file_chooser_set_filename(chooser, filename)
    }

    @file_chooser_select_filename(GtkFileChooser* chooser, const char* filename) gboolean? {
        @return gtk_file_chooser_select_filename(chooser, filename)
    }

    @file_chooser_unselect_filename(GtkFileChooser* chooser, const char* filename) void {
        @gtk_file_chooser_unselect_filename(chooser, filename)
    }

    @file_chooser_select_all(GtkFileChooser* chooser) void {
        @gtk_file_chooser_select_all(chooser)
    }

    @file_chooser_unselect_all(GtkFileChooser* chooser) void {
        @gtk_file_chooser_unselect_all(chooser)
    }

    @file_chooser_get_filenames(GtkFileChooser* chooser) GSList*? {
        @return gtk_file_chooser_get_filenames(chooser)
    }

    @file_chooser_set_current_folder(GtkFileChooser* chooser, const gchar* filename) gboolean? {
        @return gtk_file_chooser_set_current_folder(chooser, filename)
    }

    @file_chooser_get_current_folder(GtkFileChooser* chooser) gchar*? {
        @return gtk_file_chooser_get_current_folder(chooser)
    }

    @file_chooser_get_uri(GtkFileChooser* chooser) gchar*? {
        @return gtk_file_chooser_get_uri(chooser)
    }

    @file_chooser_set_uri(GtkFileChooser* chooser, const char* uri) gboolean? {
        @return gtk_file_chooser_set_uri(chooser, uri)
    }

    @file_chooser_select_uri(GtkFileChooser* chooser, const char* uri) gboolean? {
        @return gtk_file_chooser_select_uri(chooser, uri)
    }

    @file_chooser_unselect_uri(GtkFileChooser* chooser, const char* uri) void {
        @gtk_file_chooser_unselect_uri(chooser, uri)
    }

    @file_chooser_get_uris(GtkFileChooser* chooser) GSList*? {
        @return gtk_file_chooser_get_uris(chooser)
    }

    @file_chooser_set_current_folder_uri(GtkFileChooser* chooser, const gchar* uri) gboolean? {
        @return gtk_file_chooser_set_current_folder_uri(chooser, uri)
    }

    @file_chooser_get_current_folder_uri(GtkFileChooser* chooser) gchar*? {
        @return gtk_file_chooser_get_current_folder_uri(chooser)
    }

    @file_chooser_set_preview_widget(GtkFileChooser* chooser, GtkWidget* preview_widget) void {
        @gtk_file_chooser_set_preview_widget(chooser, preview_widget)
    }

    @file_chooser_get_preview_widget(GtkFileChooser* chooser) GtkWidget*? {
        @return gtk_file_chooser_get_preview_widget(chooser)
    }

    @file_chooser_set_preview_widget_active(GtkFileChooser* chooser, gboolean active) void {
        @gtk_file_chooser_set_preview_widget_active(chooser, active)
    }

    @file_chooser_get_preview_widget_active(GtkFileChooser* chooser) gboolean? {
        @return gtk_file_chooser_get_preview_widget_active(chooser)
    }

    @file_chooser_set_use_preview_label(GtkFileChooser* chooser, gboolean use_label) void {
        @gtk_file_chooser_set_use_preview_label(chooser, use_label)
    }

    @file_chooser_get_use_preview_label(GtkFileChooser* chooser) gboolean? {
        @return gtk_file_chooser_get_use_preview_label(chooser)
    }

    @file_chooser_get_preview_filename(GtkFileChooser* chooser) char*? {
        @return gtk_file_chooser_get_preview_filename(chooser)
    }

    @file_chooser_get_preview_uri(GtkFileChooser* chooser) char*? {
        @return gtk_file_chooser_get_preview_uri(chooser)
    }

    @file_chooser_set_extra_widget(GtkFileChooser* chooser, GtkWidget* extra_widget) void {
        @gtk_file_chooser_set_extra_widget(chooser, extra_widget)
    }

    @file_chooser_get_extra_widget(GtkFileChooser* chooser) GtkWidget*? {
        @return gtk_file_chooser_get_extra_widget(chooser)
    }

    @file_chooser_add_choice(GtkFileChooser* chooser, const char* id, const char* label, const char** options, const char** option_labels) void {
        @gtk_file_chooser_add_choice(chooser,id,label,options, option_labels)
    }

    @file_chooser_remove_choice(GtkFileChooser* chooser, const char* id) void {
        @gtk_file_chooser_remove_choice(chooser, id)
    }

    @file_chooser_set_choice(GtkFileChooser* chooser, const char* id, const char* option) void {
        @gtk_file_chooser_set_choice(chooser,id, option)
    }

    #const char* file_chooser_get_choice(GtkFileChooser* chooser, const char* id) {
        @return gtk_file_chooser_get_choice(chooser, id)
    }

    @file_chooser_add_filter(GtkFileChooser* chooser, GtkFileFilter* filter) void {
        @gtk_file_chooser_add_filter(chooser, filter)
    }

    @file_chooser_remove_filter(GtkFileChooser* chooser, GtkFileFilter* filter) void {
        @gtk_file_chooser_remove_filter(chooser, filter)
    }

    @file_chooser_list_filters(GtkFileChooser* chooser) GSList*? {
        @return gtk_file_chooser_list_filters(chooser)
    }

    @file_chooser_set_filter(GtkFileChooser* chooser, GtkFileFilter* filter) void {
        @gtk_file_chooser_set_filter(chooser, filter)
    }

    @file_chooser_get_filter(GtkFileChooser* chooser) GtkFileFilter*? {
        @return gtk_file_chooser_get_filter(chooser)
    }

    @file_chooser_add_shortcut_folder(GtkFileChooser* chooser, const char* folder, GError** error) gboolean? {
        @return gtk_file_chooser_add_shortcut_folder(chooser,folder, error)
    }

    @file_chooser_remove_shortcut_folder(GtkFileChooser* chooser, const char* folder, GError** error) gboolean? {
        @return gtk_file_chooser_remove_shortcut_folder(chooser,folder, error)
    }

    @file_chooser_list_shortcut_folders(GtkFileChooser* chooser) GSList*? {
        @return gtk_file_chooser_list_shortcut_folders(chooser)
    }

    @file_chooser_add_shortcut_folder_uri(GtkFileChooser* chooser, const char* uri, GError** error) gboolean? {
        @return gtk_file_chooser_add_shortcut_folder_uri(chooser,uri, error)
    }

    @file_chooser_remove_shortcut_folder_uri(GtkFileChooser* chooser, const char* uri, GError** error) gboolean? {
        @return gtk_file_chooser_remove_shortcut_folder_uri(chooser,uri, error)
    }

    @file_chooser_list_shortcut_folder_uris(GtkFileChooser* chooser) GSList*? {
        @return gtk_file_chooser_list_shortcut_folder_uris(chooser)
    }

    @file_chooser_get_current_folder_file(GtkFileChooser* chooser) GFile*? {
        @return gtk_file_chooser_get_current_folder_file(chooser)
    }

    @file_chooser_get_file(GtkFileChooser* chooser) GFile*? {
        @return gtk_file_chooser_get_file(chooser)
    }

    @file_chooser_get_files(GtkFileChooser* chooser) GSList*? {
        @return gtk_file_chooser_get_files(chooser)
    }

    @file_chooser_get_preview_file(GtkFileChooser* chooser) GFile*? {
        @return gtk_file_chooser_get_preview_file(chooser)
    }

    @file_chooser_select_file(GtkFileChooser* chooser, GFile* file, GError** error) gboolean? {
        @return gtk_file_chooser_select_file(chooser,file, error)
    }

    @file_chooser_set_current_folder_file(GtkFileChooser* chooser, GFile* file, GError** error) gboolean? {
        @return gtk_file_chooser_set_current_folder_file(chooser,file, error)
    }

    @file_chooser_set_file(GtkFileChooser* chooser, GFile* file, GError** error) gboolean? {
        @return gtk_file_chooser_set_file(chooser,file, error)
    }

    @file_chooser_unselect_file(GtkFileChooser* chooser, GFile* file) void {
        @gtk_file_chooser_unselect_file(chooser, file)
    }

    // ---
    // End of GtkFileChooser

    // GtkFileChooserButton

    @file_chooser_button_new(const gchar* title, GtkFileChooserAction action) GtkWidget*? {
        @return gtk_file_chooser_button_new(title, action)
    }

    @file_chooser_button_new_with_dialog(GtkWidget* dialog) GtkWidget*? {
        @return gtk_file_chooser_button_new_with_dialog(dialog)
    }

    #const gchar* file_chooser_button_get_title(GtkFileChooserButton* button) {
        @return gtk_file_chooser_button_get_title(button)
    }

    @file_chooser_button_set_title(GtkFileChooserButton* button, const gchar* title) void {
        @gtk_file_chooser_button_set_title(button, title)
    }

    @file_chooser_button_get_width_chars(GtkFileChooserButton* button) gint? {
        @return gtk_file_chooser_button_get_width_chars(button)
    }

    @file_chooser_button_set_width_chars(GtkFileChooserButton* button, gint n_chars) void {
        @gtk_file_chooser_button_set_width_chars(button, n_chars)
    }

    // Deprecated: @file_chooser_button_get_focus_on_click(GtkFileChooserButton* button)

    // Deprecated: @file_chooser_button_set_focus_on_click(GtkFileChooserButton* button,
    //                                gboolean focus_on_click)

    // ---
    // End of GtkFileChooserButton

    // GtkFileChooserNative

    @file_chooser_native_new(const gchar* title, GtkWindow* parent, GtkFileChooserAction action, const gchar* accept_label, const gchar* cancel_label) GtkFileChooserNative*? {
        @return gtk_file_chooser_native_new(title,parent,action,accept_label, cancel_label)
    }

    #const char* file_chooser_native_get_accept_label(GtkFileChooserNative* self) {
        @return gtk_file_chooser_native_get_accept_label(self)
    }

    @file_chooser_native_set_accept_label(GtkFileChooserNative* self, const char* accept_label) void {
        @gtk_file_chooser_native_set_accept_label(self, accept_label)
    }

    #const char* file_chooser_native_get_cancel_label(GtkFileChooserNative* self) {
        @return gtk_file_chooser_native_get_cancel_label(self)
    }

    @file_chooser_native_set_cancel_label(GtkFileChooserNative* self, const char* cancel_label) void {
        @gtk_file_chooser_native_set_cancel_label(self, cancel_label)
    }

    // ---
    // End of GtkFileChooserNative

    // GtkFileChooserDialog

    #template <typename... ID>
    @file_chooser_dialog_new(const gchar* title, GtkWindow* parent, GtkFileChooserAction action, const gchar* first_button_text, ID... response_id) GtkWidget*? {
        @return (gtk_file_chooser_dialog_new(title,parent,action,first_button_text,response_id), ...)
    }

    // ---
    // End of GtkFileChooserDialog

    // GtkFileChooserWidget

    @file_chooser_widget_new(GtkFileChooserAction action) GtkWidget*? {
        @return gtk_file_chooser_widget_new(action)
    }

    // ---
    // End of GtkFileChooserWidget

    // GtkFileFilter

    // Unimplemented: gboolean
    //(*GtkFileFilterFunc) (const GtkFileFilterInfo* filter_info,
    //                      gpointer data)

    @file_filter_new GtkFileFilter*? {
        @return gtk_file_filter_new()
    }

    @file_filter_set_name(GtkFileFilter* filter, const gchar* name) void {
        @gtk_file_filter_set_name(filter, name)
    }

    #const gchar* file_filter_get_name(GtkFileFilter* filter) {
        @return gtk_file_filter_get_name(filter)
    }

    @file_filter_add_mime_type(GtkFileFilter* filter, const gchar* mime_type) void {
        @gtk_file_filter_add_mime_type(filter, mime_type)
    }

    @file_filter_add_pattern(GtkFileFilter* filter, const gchar* pattern) void {
        @gtk_file_filter_add_pattern(filter, pattern)
    }

    @file_filter_add_pixbuf_formats(GtkFileFilter* filter) void {
        @gtk_file_filter_add_pixbuf_formats(filter)
    }

    @file_filter_add_custom(GtkFileFilter* filter, GtkFileFilterFlags needed, GtkFileFilterFunc func, gpointer data, GDestroyNotify notify) void {
        @gtk_file_filter_add_custom(filter,needed,func,data, notify)
    }

    @file_filter_get_needed(GtkFileFilter* filter) GtkFileFilterFlags? {
        @return gtk_file_filter_get_needed(filter)
    }

    @file_filter_filter(GtkFileFilter* filter, const GtkFileFilterInfo* filter_info) gboolean? {
        @return gtk_file_filter_filter(filter, filter_info)
    }

    @file_filter_new_from_gvariant(GVariant* variant) GtkFileFilter*? {
        @return gtk_file_filter_new_from_gvariant(variant)
    }

    @file_filter_to_gvariant(GtkFileFilter* filter) GVariant*? {
        @return gtk_file_filter_to_gvariant(filter)
    }

    // ---
    // End of GtkFileFilter

    // GtkFontChooser

    @font_chooser_get_font_family(GtkFontChooser* fontchooser) PangoFontFamily*? {
        @return gtk_font_chooser_get_font_family(fontchooser)
    }

    @font_chooser_get_font_face(GtkFontChooser* fontchooser) PangoFontFace*? {
        @return gtk_font_chooser_get_font_face(fontchooser)
    }

    @font_chooser_get_font_size(GtkFontChooser* fontchooser) gint? {
        @return gtk_font_chooser_get_font_size(fontchooser)
    }

    @font_chooser_get_font(GtkFontChooser* fontchooser) gchar*? {
        @return gtk_font_chooser_get_font(fontchooser)
    }

    @font_chooser_set_font(GtkFontChooser* fontchooser, const gchar* fontname) void {
        @gtk_font_chooser_set_font(fontchooser, fontname)
    }

    @font_chooser_get_font_desc(GtkFontChooser* fontchooser) PangoFontDescription*? {
        @return gtk_font_chooser_get_font_desc(fontchooser)
    }

    @font_chooser_set_font_desc(GtkFontChooser* fontchooser, const PangoFontDescription* font_desc) void {
        @gtk_font_chooser_set_font_desc(fontchooser, font_desc)
    }

    @font_chooser_get_preview_text(GtkFontChooser* fontchooser) gchar*? {
        @return gtk_font_chooser_get_preview_text(fontchooser)
    }

    @font_chooser_set_preview_text(GtkFontChooser* fontchooser, const gchar* text) void {
        @gtk_font_chooser_set_preview_text(fontchooser, text)
    }

    @font_chooser_get_show_preview_entry(GtkFontChooser* fontchooser) gboolean? {
        @return gtk_font_chooser_get_show_preview_entry(fontchooser)
    }

    @font_chooser_set_show_preview_entry(GtkFontChooser* fontchooser, gboolean show_preview_entry) void {
        @gtk_font_chooser_set_show_preview_entry(fontchooser, show_preview_entry)
    }

    // Unimplemented: gboolean
    //(*GtkFontFilterFunc) (const PangoFontFamily* family,
    //                      const PangoFontFace* face,
    //                      gpointer data)

    @font_chooser_set_filter_func(GtkFontChooser* fontchooser, GtkFontFilterFunc filter, gpointer user_data, GDestroyNotify destroy) void {
        @gtk_font_chooser_set_filter_func(fontchooser,filter,user_data, destroy)
    }

    @font_chooser_set_font_map(GtkFontChooser* fontchooser, PangoFontMap* fontmap) void {
        @gtk_font_chooser_set_font_map(fontchooser, fontmap)
    }

    @font_chooser_get_font_map(GtkFontChooser* fontchooser) PangoFontMap*? {
        @return gtk_font_chooser_get_font_map(fontchooser)
    }

    @font_chooser_set_level(GtkFontChooser* fontchooser, GtkFontChooserLevel level) void {
        @gtk_font_chooser_set_level(fontchooser, level)
    }

    @font_chooser_get_level(GtkFontChooser* fontchooser) GtkFontChooserLevel? {
        @return gtk_font_chooser_get_level(fontchooser)
    }

    @font_chooser_get_font_features(GtkFontChooser* fontchooser) char*? {
        @return gtk_font_chooser_get_font_features(fontchooser)
    }

    @font_chooser_set_language(GtkFontChooser* fontchooser, const char* language) void {
        @gtk_font_chooser_set_language(fontchooser, language)
    }

    @font_chooser_get_language(GtkFontChooser* fontchooser) char*? {
        @return gtk_font_chooser_get_language(fontchooser)
    }

    // ---
    // End of GtkFontChooser

    // GtkFontButton

    @font_button_new GtkWidget*? {
        @return gtk_font_button_new()
    }

    @font_button_new_with_font(const gchar* fontname) GtkWidget*? {
        @return gtk_font_button_new_with_font(fontname)
    }

    // Deprecated: @font_button_set_font_name(GtkFontButton* font_button,
    //                               const gchar* fontname)

    // Deprecated: @font_button_get_font_name(GtkFontButton* font_button)

    @font_button_set_show_style(GtkFontButton* font_button, gboolean show_style) void {
        @gtk_font_button_set_show_style(font_button, show_style)
    }

    @font_button_get_show_style(GtkFontButton* font_button) gboolean? {
        @return gtk_font_button_get_show_style(font_button)
    }

    @font_button_set_show_size(GtkFontButton* font_button, gboolean show_size) void {
        @gtk_font_button_set_show_size(font_button, show_size)
    }

    @font_button_get_show_size(GtkFontButton* font_button) gboolean? {
        @return gtk_font_button_get_show_size(font_button)
    }

    @font_button_set_use_font(GtkFontButton* font_button, gboolean use_font) void {
        @gtk_font_button_set_use_font(font_button, use_font)
    }

    @font_button_get_use_font(GtkFontButton* font_button) gboolean? {
        @return gtk_font_button_get_use_font(font_button)
    }

    @font_button_set_use_size(GtkFontButton* font_button, gboolean use_size) void {
        @gtk_font_button_set_use_size(font_button, use_size)
    }

    @font_button_get_use_size(GtkFontButton* font_button) gboolean? {
        @return gtk_font_button_get_use_size(font_button)
    }

    @font_button_set_title(GtkFontButton* font_button, const gchar* title) void {
        @gtk_font_button_set_title(font_button, title)
    }

    #const gchar* font_button_get_title(GtkFontButton* font_button) {
        @return gtk_font_button_get_title(font_button)
    }

    // ---
    // End of GtkFontButton

    // GtkFontChooserWidget

    @font_chooser_widget_new GtkWidget*? {
        @return gtk_font_chooser_widget_new()
    }

    // ---
    // End of GtkFontChooserWidget

    // GtkFontChooserDialog

    @font_chooser_dialog_new(const gchar* title, GtkWindow* parent) GtkWidget*? {
        @return gtk_font_chooser_dialog_new(title, parent)
    }

    // ---
    // End of GtkFontChooserDialog

    // GtkPlacesSidebar

    @places_sidebar_new GtkWidget*? {
        @return gtk_places_sidebar_new()
    }

    @places_sidebar_set_open_flags(GtkPlacesSidebar* sidebar, GtkPlacesOpenFlags flags) void {
        @gtk_places_sidebar_set_open_flags(sidebar, flags)
    }

    @places_sidebar_get_open_flags(GtkPlacesSidebar* sidebar) GtkPlacesOpenFlags? {
        @return gtk_places_sidebar_get_open_flags(sidebar)
    }

    @places_sidebar_set_location(GtkPlacesSidebar* sidebar, GFile* location) void {
        @gtk_places_sidebar_set_location(sidebar, location)
    }

    @places_sidebar_get_location(GtkPlacesSidebar* sidebar) GFile*? {
        @return gtk_places_sidebar_get_location(sidebar)
    }

    @places_sidebar_set_show_recent(GtkPlacesSidebar* sidebar, gboolean show_recent) void {
        @gtk_places_sidebar_set_show_recent(sidebar, show_recent)
    }

    @places_sidebar_get_show_recent(GtkPlacesSidebar* sidebar) gboolean? {
        @return gtk_places_sidebar_get_show_recent(sidebar)
    }

    @places_sidebar_set_show_desktop(GtkPlacesSidebar* sidebar, gboolean show_desktop) void {
        @gtk_places_sidebar_set_show_desktop(sidebar, show_desktop)
    }

    @places_sidebar_get_show_desktop(GtkPlacesSidebar* sidebar) gboolean? {
        @return gtk_places_sidebar_get_show_desktop(sidebar)
    }

    @places_sidebar_add_shortcut(GtkPlacesSidebar* sidebar, GFile* location) void {
        @gtk_places_sidebar_add_shortcut(sidebar, location)
    }

    @places_sidebar_remove_shortcut(GtkPlacesSidebar* sidebar, GFile* location) void {
        @gtk_places_sidebar_remove_shortcut(sidebar, location)
    }

    @places_sidebar_list_shortcuts(GtkPlacesSidebar* sidebar) GSList*? {
        @return gtk_places_sidebar_list_shortcuts(sidebar)
    }

    @places_sidebar_get_nth_bookmark(GtkPlacesSidebar* sidebar, gint n) GFile*? {
        @return gtk_places_sidebar_get_nth_bookmark(sidebar, n)
    }

    // Deprecated: @places_sidebar_get_show_connect_to_server(GtkPlacesSidebar* sidebar)

    // Deprecated: @places_sidebar_set_show_connect_to_server(GtkPlacesSidebar* sidebar,
    //                                gboolean show_connect_to_server)

    @places_sidebar_get_local_only(GtkPlacesSidebar* sidebar) gboolean? {
        @return gtk_places_sidebar_get_local_only(sidebar)
    }

    @places_sidebar_set_local_only(GtkPlacesSidebar* sidebar, gboolean local_only) void {
        @gtk_places_sidebar_set_local_only(sidebar, local_only)
    }

    @places_sidebar_get_show_enter_location(GtkPlacesSidebar* sidebar) gboolean? {
        @return gtk_places_sidebar_get_show_enter_location(sidebar)
    }

    @places_sidebar_set_show_enter_location(GtkPlacesSidebar* sidebar, gboolean show_enter_location) void {
        @gtk_places_sidebar_set_show_enter_location(sidebar, show_enter_location)
    }

    @places_sidebar_get_show_trash(GtkPlacesSidebar* sidebar) gboolean? {
        @return gtk_places_sidebar_get_show_trash(sidebar)
    }

    @places_sidebar_set_show_trash(GtkPlacesSidebar* sidebar, gboolean show_trash) void {
        @gtk_places_sidebar_set_show_trash(sidebar, show_trash)
    }

    @places_sidebar_get_show_other_locations(GtkPlacesSidebar* sidebar) gboolean? {
        @return gtk_places_sidebar_get_show_other_locations(sidebar)
    }

    @places_sidebar_set_show_other_locations(GtkPlacesSidebar* sidebar, gboolean show_other_locations) void {
        @gtk_places_sidebar_set_show_other_locations(sidebar, show_other_locations)
    }

    @places_sidebar_set_drop_targets_visible(GtkPlacesSidebar* sidebar, gboolean visible, GdkDragContext* context) void {
        @gtk_places_sidebar_set_drop_targets_visible(sidebar,visible, context)
    }

    // ---
    // End of GtkPlacesSidebar

    // GtkWidget
    @widget_show_all(GtkWidget* widget) void {
        @gtk_widget_show_all(widget)
    }
}